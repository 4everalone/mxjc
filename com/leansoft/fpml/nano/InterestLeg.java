// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type describing the fixed income leg of the equity swap.
 */
@RootElement(name = "interestLeg", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class InterestLeg extends ReturnSwapLeg implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private InterestLegCalculationPeriodDates interestLegCalculationPeriodDates;
	
	@Element
	private ReturnSwapNotional notional;
	
	@Element
	private LegAmount interestAmount;
	
	@Element
	private InterestCalculation interestCalculation;
	
	@Element
	private StubCalculationPeriod stubCalculationPeriod;
	
    
	/**
     * public getter
     *
     * Component that holds the various dates used to specify the interest leg of the equity swap. It is used to define the InterestPeriodDates identifyer.
     *
     * @returns com.leansoft.fpml.nano.InterestLegCalculationPeriodDates
	 */
	public InterestLegCalculationPeriodDates getInterestLegCalculationPeriodDates() {
	    return this.interestLegCalculationPeriodDates;
	}
	
	/**
	 * public setter
	 *
     * Component that holds the various dates used to specify the interest leg of the equity swap. It is used to define the InterestPeriodDates identifyer.
     *
     * @param com.leansoft.fpml.nano.InterestLegCalculationPeriodDates
	 */
	public void setInterestLegCalculationPeriodDates(InterestLegCalculationPeriodDates interestLegCalculationPeriodDates) {
	    this.interestLegCalculationPeriodDates = interestLegCalculationPeriodDates;
	}
	/**
     * public getter
     *
     * Specifies the notional of a return type swap. When used in the equity leg, the definition will typically combine the actual amount (using the notional component defined by the FpML industry group) and the determination method. When used in the interest leg, the definition will typically point to the definition of the equity leg.
     *
     * @returns com.leansoft.fpml.nano.ReturnSwapNotional
	 */
	public ReturnSwapNotional getNotional() {
	    return this.notional;
	}
	
	/**
	 * public setter
	 *
     * Specifies the notional of a return type swap. When used in the equity leg, the definition will typically combine the actual amount (using the notional component defined by the FpML industry group) and the determination method. When used in the interest leg, the definition will typically point to the definition of the equity leg.
     *
     * @param com.leansoft.fpml.nano.ReturnSwapNotional
	 */
	public void setNotional(ReturnSwapNotional notional) {
	    this.notional = notional;
	}
	/**
     * public getter
     *
     * Specifies, in relation to each Interest Payment Date, the amount to which the Interest Payment Date relates. Unless otherwise specified, this term has the meaning defined in the ISDA 2000 ISDA Definitions.
     *
     * @returns com.leansoft.fpml.nano.LegAmount
	 */
	public LegAmount getInterestAmount() {
	    return this.interestAmount;
	}
	
	/**
	 * public setter
	 *
     * Specifies, in relation to each Interest Payment Date, the amount to which the Interest Payment Date relates. Unless otherwise specified, this term has the meaning defined in the ISDA 2000 ISDA Definitions.
     *
     * @param com.leansoft.fpml.nano.LegAmount
	 */
	public void setInterestAmount(LegAmount interestAmount) {
	    this.interestAmount = interestAmount;
	}
	/**
     * public getter
     *
     * Specifies the calculation method of the interest rate leg of the equity swap. Includes the floating or fixed rate calculation definitions, along with the determination of the day count fraction.
     *
     * @returns com.leansoft.fpml.nano.InterestCalculation
	 */
	public InterestCalculation getInterestCalculation() {
	    return this.interestCalculation;
	}
	
	/**
	 * public setter
	 *
     * Specifies the calculation method of the interest rate leg of the equity swap. Includes the floating or fixed rate calculation definitions, along with the determination of the day count fraction.
     *
     * @param com.leansoft.fpml.nano.InterestCalculation
	 */
	public void setInterestCalculation(InterestCalculation interestCalculation) {
	    this.interestCalculation = interestCalculation;
	}
	/**
     * public getter
     *
     * Specifies the stub calculation period
     *
     * @returns com.leansoft.fpml.nano.StubCalculationPeriod
	 */
	public StubCalculationPeriod getStubCalculationPeriod() {
	    return this.stubCalculationPeriod;
	}
	
	/**
	 * public setter
	 *
     * Specifies the stub calculation period
     *
     * @param com.leansoft.fpml.nano.StubCalculationPeriod
	 */
	public void setStubCalculationPeriod(StubCalculationPeriod stubCalculationPeriod) {
	    this.stubCalculationPeriod = stubCalculationPeriod;
	}

}