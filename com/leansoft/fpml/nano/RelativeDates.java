// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;

/**
 * A type describing a set of dates defined as relative to another set of dates.
 */
public class RelativeDates extends RelativeDateOffset implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BigInteger periodSkip;
	
	@Element
	private DateRange scheduleBounds;
	
    
	/**
     * public getter
     *
     * The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getPeriodSkip() {
	    return this.periodSkip;
	}
	
	/**
	 * public setter
	 *
     * The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.
     *
     * @param java.math.BigInteger
	 */
	public void setPeriodSkip(BigInteger periodSkip) {
	    this.periodSkip = periodSkip;
	}
	/**
     * public getter
     *
     * The first and last dates of a schedule. This can be used to restrict the range of values in a reference series of dates.
     *
     * @returns com.leansoft.fpml.nano.DateRange
	 */
	public DateRange getScheduleBounds() {
	    return this.scheduleBounds;
	}
	
	/**
	 * public setter
	 *
     * The first and last dates of a schedule. This can be used to restrict the range of values in a reference series of dates.
     *
     * @param com.leansoft.fpml.nano.DateRange
	 */
	public void setScheduleBounds(DateRange scheduleBounds) {
	    this.scheduleBounds = scheduleBounds;
	}

}