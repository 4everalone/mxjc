// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type that is used for describing a particular rate against base currency. Exists within SideRates.
 */
public class SideRate implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Currency currency;
	
	@Element
	private SideRateBasisEnum sideRateBasis;
	
	@Element
	private BigDecimal rate;
	
	@Element
	private BigDecimal spotRate;
	
	@Element
	private BigDecimal forwardPoints;
	
    
	/**
     * public getter
     *
     * The currency in which an amount is denominated.
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getCurrency() {
	    return this.currency;
	}
	
	/**
	 * public setter
	 *
     * The currency in which an amount is denominated.
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setCurrency(Currency currency) {
	    this.currency = currency;
	}
	/**
     * public getter
     *
     * The method by which the exchange rate against base currency is quoted.
     *
     * @returns com.leansoft.fpml.nano.SideRateBasisEnum
	 */
	public SideRateBasisEnum getSideRateBasis() {
	    return this.sideRateBasis;
	}
	
	/**
	 * public setter
	 *
     * The method by which the exchange rate against base currency is quoted.
     *
     * @param com.leansoft.fpml.nano.SideRateBasisEnum
	 */
	public void setSideRateBasis(SideRateBasisEnum sideRateBasis) {
	    this.sideRateBasis = sideRateBasis;
	}
	/**
     * public getter
     *
     * The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getRate() {
	    return this.rate;
	}
	
	/**
	 * public setter
	 *
     * The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.
     *
     * @param java.math.BigDecimal
	 */
	public void setRate(BigDecimal rate) {
	    this.rate = rate;
	}
	/**
     * public getter
     *
     * An optional element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move "up" or "down" to be triggered.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getSpotRate() {
	    return this.spotRate;
	}
	
	/**
	 * public setter
	 *
     * An optional element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move "up" or "down" to be triggered.
     *
     * @param java.math.BigDecimal
	 */
	public void setSpotRate(BigDecimal spotRate) {
	    this.spotRate = spotRate;
	}
	/**
     * public getter
     *
     * An optional element used for deals consumated in the FX Forwards market. Forward points represent the interest rate differential between the two currencies traded and are quoted as a preminum or a discount. Forward points are added to, or subtracted from, the spot rate to create the rate of the forward trade.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getForwardPoints() {
	    return this.forwardPoints;
	}
	
	/**
	 * public setter
	 *
     * An optional element used for deals consumated in the FX Forwards market. Forward points represent the interest rate differential between the two currencies traded and are quoted as a preminum or a discount. Forward points are added to, or subtracted from, the spot rate to create the rate of the forward trade.
     *
     * @param java.math.BigDecimal
	 */
	public void setForwardPoints(BigDecimal forwardPoints) {
	    this.forwardPoints = forwardPoints;
	}

}