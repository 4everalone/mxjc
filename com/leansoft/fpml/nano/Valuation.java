// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A valuation of an valuable object - an asset or a pricing input. This is an abstract type, used as a base for values of pricing structures such as yield curves as well as asset values.
 */
public class Valuation implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private AnyAssetReference objectReference;
	
	@Element
	private ValuationScenarioReference valuationScenarioReference;
	
	@Attribute  
	private String id;
	
	@Attribute  
	private Object definitionRef;
	
    
	/**
     * public getter
     *
     * A reference to the asset or pricing structure that this values.
     *
     * @returns com.leansoft.fpml.nano.AnyAssetReference
	 */
	public AnyAssetReference getObjectReference() {
	    return this.objectReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the asset or pricing structure that this values.
     *
     * @param com.leansoft.fpml.nano.AnyAssetReference
	 */
	public void setObjectReference(AnyAssetReference objectReference) {
	    this.objectReference = objectReference;
	}
	/**
     * public getter
     *
     * A reference to the valuation scenario used to calculate this valuation. If the Valuation occurs within a ValuationSet, this value is optional and is defaulted from the ValuationSet. If this value occurs in both places, the lower level value (i.e. the one here) overrides that in the higher (i.e. ValuationSet).
     *
     * @returns com.leansoft.fpml.nano.ValuationScenarioReference
	 */
	public ValuationScenarioReference getValuationScenarioReference() {
	    return this.valuationScenarioReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the valuation scenario used to calculate this valuation. If the Valuation occurs within a ValuationSet, this value is optional and is defaulted from the ValuationSet. If this value occurs in both places, the lower level value (i.e. the one here) overrides that in the higher (i.e. ValuationSet).
     *
     * @param com.leansoft.fpml.nano.ValuationScenarioReference
	 */
	public void setValuationScenarioReference(ValuationScenarioReference valuationScenarioReference) {
	    this.valuationScenarioReference = valuationScenarioReference;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.Object
	 */
	public Object getDefinitionRef() {
	    return this.definitionRef;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.Object
	 */
	public void setDefinitionRef(Object definitionRef) {
	    this.definitionRef = definitionRef;
	}

}