// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * A type defining the parameters used to generate the calculation period dates schedule, including the specification of any initial or final stub calculation periods. A calculation perod schedule consists of an optional initial stub calculation period, one or more regular calculation periods and an optional final stub calculation period. In the absence of any initial or final stub calculation periods, the regular part of the calculation period schedule is assumed to be between the effective date and the termination date. No implicit stubs are allowed, i.e. stubs must be explicitly specified using an appropriate combination of firstPeriodStateDate, firstRegularPeriodStartDate and lastRegularPeriodEndDate.
 */
public class CalculationPeriodDates implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private List<Object> effectiveDateOrRelativeEffectiveDate;
	
	@Element
	private List<Object> terminationDateOrRelativeTerminationDate;
	
	@Element
	private BusinessDayAdjustments calculationPeriodDatesAdjustments;
	
	@Element
	private AdjustableDate firstPeriodStartDate;
	
	@Element
	private Date firstRegularPeriodStartDate;
	
	@Element
	private Date firstCompoundingPeriodEndDate;
	
	@Element
	private Date lastRegularPeriodEndDate;
	
	@Element
	private StubPeriodTypeEnum stubPeriodType;
	
	@Element
	private CalculationPeriodFrequency calculationPeriodFrequency;
	
	@Attribute  
	private String id;
	
    
	/**
	 * public getter
	 *
     * @returns java.util.List<java.lang.Object>
	 */
	public List<Object> getEffectiveDateOrRelativeEffectiveDate() {
	    return this.effectiveDateOrRelativeEffectiveDate;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.List<java.lang.Object>
	 */
	public void setEffectiveDateOrRelativeEffectiveDate(List<Object> effectiveDateOrRelativeEffectiveDate) {
	    this.effectiveDateOrRelativeEffectiveDate = effectiveDateOrRelativeEffectiveDate;
	}
	/**
	 * public getter
	 *
     * @returns java.util.List<java.lang.Object>
	 */
	public List<Object> getTerminationDateOrRelativeTerminationDate() {
	    return this.terminationDateOrRelativeTerminationDate;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.List<java.lang.Object>
	 */
	public void setTerminationDateOrRelativeTerminationDate(List<Object> terminationDateOrRelativeTerminationDate) {
	    this.terminationDateOrRelativeTerminationDate = terminationDateOrRelativeTerminationDate;
	}
	/**
     * public getter
     *
     * The business day convention to apply to each calculation period end date if it would otherwise fall on a day that is not a business day in the specified financial business centers.
     *
     * @returns com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public BusinessDayAdjustments getCalculationPeriodDatesAdjustments() {
	    return this.calculationPeriodDatesAdjustments;
	}
	
	/**
	 * public setter
	 *
     * The business day convention to apply to each calculation period end date if it would otherwise fall on a day that is not a business day in the specified financial business centers.
     *
     * @param com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public void setCalculationPeriodDatesAdjustments(BusinessDayAdjustments calculationPeriodDatesAdjustments) {
	    this.calculationPeriodDatesAdjustments = calculationPeriodDatesAdjustments;
	}
	/**
     * public getter
     *
     * The start date of the calculation period if the date falls before the effective date. It must only be specified if it is not equal to the effective date. This date may be subject to adjustment in accordance with a business day convention.
     *
     * @returns com.leansoft.fpml.nano.AdjustableDate
	 */
	public AdjustableDate getFirstPeriodStartDate() {
	    return this.firstPeriodStartDate;
	}
	
	/**
	 * public setter
	 *
     * The start date of the calculation period if the date falls before the effective date. It must only be specified if it is not equal to the effective date. This date may be subject to adjustment in accordance with a business day convention.
     *
     * @param com.leansoft.fpml.nano.AdjustableDate
	 */
	public void setFirstPeriodStartDate(AdjustableDate firstPeriodStartDate) {
	    this.firstPeriodStartDate = firstPeriodStartDate;
	}
	/**
     * public getter
     *
     * The start date of the regular part of the calculation period schedule. It must only be specified if there is an initial stub calculation period. This day may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.
     *
     * @returns java.util.Date
	 */
	public Date getFirstRegularPeriodStartDate() {
	    return this.firstRegularPeriodStartDate;
	}
	
	/**
	 * public setter
	 *
     * The start date of the regular part of the calculation period schedule. It must only be specified if there is an initial stub calculation period. This day may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.
     *
     * @param java.util.Date
	 */
	public void setFirstRegularPeriodStartDate(Date firstRegularPeriodStartDate) {
	    this.firstRegularPeriodStartDate = firstRegularPeriodStartDate;
	}
	/**
     * public getter
     *
     * The end date of the initial compounding period when compounding is applicable. It must only be specified when the compoundingMethod element is present and not equal to a value of None. This date may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.
     *
     * @returns java.util.Date
	 */
	public Date getFirstCompoundingPeriodEndDate() {
	    return this.firstCompoundingPeriodEndDate;
	}
	
	/**
	 * public setter
	 *
     * The end date of the initial compounding period when compounding is applicable. It must only be specified when the compoundingMethod element is present and not equal to a value of None. This date may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.
     *
     * @param java.util.Date
	 */
	public void setFirstCompoundingPeriodEndDate(Date firstCompoundingPeriodEndDate) {
	    this.firstCompoundingPeriodEndDate = firstCompoundingPeriodEndDate;
	}
	/**
     * public getter
     *
     * The end date of the regular part of the calculation period schedule. It must only be specified if there is a final stub calculation period. This day may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.
     *
     * @returns java.util.Date
	 */
	public Date getLastRegularPeriodEndDate() {
	    return this.lastRegularPeriodEndDate;
	}
	
	/**
	 * public setter
	 *
     * The end date of the regular part of the calculation period schedule. It must only be specified if there is a final stub calculation period. This day may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.
     *
     * @param java.util.Date
	 */
	public void setLastRegularPeriodEndDate(Date lastRegularPeriodEndDate) {
	    this.lastRegularPeriodEndDate = lastRegularPeriodEndDate;
	}
	/**
     * public getter
     *
     * Method to allocate any irregular period remaining after regular periods have been allocated between the effective and termination date.
     *
     * @returns com.leansoft.fpml.nano.StubPeriodTypeEnum
	 */
	public StubPeriodTypeEnum getStubPeriodType() {
	    return this.stubPeriodType;
	}
	
	/**
	 * public setter
	 *
     * Method to allocate any irregular period remaining after regular periods have been allocated between the effective and termination date.
     *
     * @param com.leansoft.fpml.nano.StubPeriodTypeEnum
	 */
	public void setStubPeriodType(StubPeriodTypeEnum stubPeriodType) {
	    this.stubPeriodType = stubPeriodType;
	}
	/**
     * public getter
     *
     * The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.
     *
     * @returns com.leansoft.fpml.nano.CalculationPeriodFrequency
	 */
	public CalculationPeriodFrequency getCalculationPeriodFrequency() {
	    return this.calculationPeriodFrequency;
	}
	
	/**
	 * public setter
	 *
     * The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.
     *
     * @param com.leansoft.fpml.nano.CalculationPeriodFrequency
	 */
	public void setCalculationPeriodFrequency(CalculationPeriodFrequency calculationPeriodFrequency) {
	    this.calculationPeriodFrequency = calculationPeriodFrequency;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}