// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;

/**
 * A type that allows referencing a position by ID and version.
 */
@RootElement(name = "removedPosition", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class PositionReference implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PositionId positionId;
	
	@Element
	private BigInteger version;
	
    
	/**
     * public getter
     *
     * A version-independent identifier for the position, possibly based on trade identifier.
     *
     * @returns com.leansoft.fpml.nano.PositionId
	 */
	public PositionId getPositionId() {
	    return this.positionId;
	}
	
	/**
	 * public setter
	 *
     * A version-independent identifier for the position, possibly based on trade identifier.
     *
     * @param com.leansoft.fpml.nano.PositionId
	 */
	public void setPositionId(PositionId positionId) {
	    this.positionId = positionId;
	}
	/**
     * public getter
     *
     * A version identifier. Version identifiers must be ascending, i.e. higher numbers imply newer versions. There is no requirement that version identifiers for a position be sequential or small, so for example timestamp-based version identifiers could be used.
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getVersion() {
	    return this.version;
	}
	
	/**
	 * public setter
	 *
     * A version identifier. Version identifiers must be ascending, i.e. higher numbers imply newer versions. There is no requirement that version identifiers for a position be sequential or small, so for example timestamp-based version identifiers could be used.
     *
     * @param java.math.BigInteger
	 */
	public void setVersion(BigInteger version) {
	    this.version = version;
	}

}