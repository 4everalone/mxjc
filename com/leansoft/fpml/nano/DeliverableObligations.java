// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

@RootElement(name = "deliverableObligations", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class DeliverableObligations implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Boolean accruedInterest;
	
	@Element
	private ObligationCategoryEnum category;
	
	@Element
	private Empty notSubordinated;
	
	@Element
	private SpecifiedCurrency specifiedCurrency;
	
	@Element
	private Empty notSovereignLender;
	
	@Element
	private NotDomesticCurrency notDomesticCurrency;
	
	@Element
	private Empty notDomesticLaw;
	
	@Element
	private Empty listed;
	
	@Element
	private Empty notContingent;
	
	@Element
	private Empty notDomesticIssuance;
	
	@Element
	private PCDeliverableObligationCharac assignableLoan;
	
	@Element
	private PCDeliverableObligationCharac consentRequiredLoan;
	
	@Element
	private LoanParticipation directLoanParticipation;
	
	@Element
	private Empty transferable;
	
	@Element
	private Interval maximumMaturity;
	
	@Element
	private Empty acceleratedOrMatured;
	
	@Element
	private Empty notBearer;
	
	@Element
	private Empty fullFaithAndCreditObLiability;
	
	@Element
	private Empty generalFundObligationLiability;
	
	@Element
	private Empty revenueObligationLiability;
	
	@Element
	private LoanParticipation indirectLoanParticipation;
	
	@Element
	private String excluded;
	
	@Element
	private String othReferenceEntityObligations;
	
    
	/**
     * public getter
     *
     * Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAccruedInterest() {
	    return this.accruedInterest;
	}
	
	/**
	 * public setter
	 *
     * Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest
     *
     * @param java.lang.Boolean
	 */
	public void setAccruedInterest(Boolean accruedInterest) {
	    this.accruedInterest = accruedInterest;
	}
	/**
     * public getter
     *
     * Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category
     *
     * @returns com.leansoft.fpml.nano.ObligationCategoryEnum
	 */
	public ObligationCategoryEnum getCategory() {
	    return this.category;
	}
	
	/**
	 * public setter
	 *
     * Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category
     *
     * @param com.leansoft.fpml.nano.ObligationCategoryEnum
	 */
	public void setCategory(ObligationCategoryEnum category) {
	    this.category = category;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotSubordinated() {
	    return this.notSubordinated;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotSubordinated(Empty notSubordinated) {
	    this.notSubordinated = notSubordinated;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency
     *
     * @returns com.leansoft.fpml.nano.SpecifiedCurrency
	 */
	public SpecifiedCurrency getSpecifiedCurrency() {
	    return this.specifiedCurrency;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency
     *
     * @param com.leansoft.fpml.nano.SpecifiedCurrency
	 */
	public void setSpecifiedCurrency(SpecifiedCurrency specifiedCurrency) {
	    this.specifiedCurrency = specifiedCurrency;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organization. ISDA 2003 Term: Not Sovereign Lender
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotSovereignLender() {
	    return this.notSovereignLender;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organization. ISDA 2003 Term: Not Sovereign Lender
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotSovereignLender(Empty notSovereignLender) {
	    this.notSovereignLender = notSovereignLender;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency
     *
     * @returns com.leansoft.fpml.nano.NotDomesticCurrency
	 */
	public NotDomesticCurrency getNotDomesticCurrency() {
	    return this.notDomesticCurrency;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency
     *
     * @param com.leansoft.fpml.nano.NotDomesticCurrency
	 */
	public void setNotDomesticCurrency(NotDomesticCurrency notDomesticCurrency) {
	    this.notDomesticCurrency = notDomesticCurrency;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotDomesticLaw() {
	    return this.notDomesticLaw;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotDomesticLaw(Empty notDomesticLaw) {
	    this.notDomesticLaw = notDomesticLaw;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getListed() {
	    return this.listed;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setListed(Empty listed) {
	    this.listed = listed;
	}
	/**
     * public getter
     *
     * A deliverable obligation characteristic. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotContingent() {
	    return this.notContingent;
	}
	
	/**
	 * public setter
	 *
     * A deliverable obligation characteristic. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotContingent(Empty notContingent) {
	    this.notContingent = notContingent;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognized bond. ISDA 2003 Term: Not Domestic Issuance
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotDomesticIssuance() {
	    return this.notDomesticIssuance;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognized bond. ISDA 2003 Term: Not Domestic Issuance
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotDomesticIssuance(Empty notDomesticIssuance) {
	    this.notDomesticIssuance = notDomesticIssuance;
	}
	/**
     * public getter
     *
     * A deliverable obligation characteristic. A loan that is freely assignable to a bank or financial institution without the consent of the Reference Entity or the guarantor, if any, of the loan (or the consent of the applicable borrower if a Reference Entity is guaranteeing the loan) or any agent. ISDA 2003 Term: Assignable Loan
     *
     * @returns com.leansoft.fpml.nano.PCDeliverableObligationCharac
	 */
	public PCDeliverableObligationCharac getAssignableLoan() {
	    return this.assignableLoan;
	}
	
	/**
	 * public setter
	 *
     * A deliverable obligation characteristic. A loan that is freely assignable to a bank or financial institution without the consent of the Reference Entity or the guarantor, if any, of the loan (or the consent of the applicable borrower if a Reference Entity is guaranteeing the loan) or any agent. ISDA 2003 Term: Assignable Loan
     *
     * @param com.leansoft.fpml.nano.PCDeliverableObligationCharac
	 */
	public void setAssignableLoan(PCDeliverableObligationCharac assignableLoan) {
	    this.assignableLoan = assignableLoan;
	}
	/**
     * public getter
     *
     * A deliverable obligation characteristic. A loan that is capable of being assigned with the consent of the Reference Entity or the guarantor, if any, of the loan or any agent. ISDA 2003 Term: Consent Required Loan
     *
     * @returns com.leansoft.fpml.nano.PCDeliverableObligationCharac
	 */
	public PCDeliverableObligationCharac getConsentRequiredLoan() {
	    return this.consentRequiredLoan;
	}
	
	/**
	 * public setter
	 *
     * A deliverable obligation characteristic. A loan that is capable of being assigned with the consent of the Reference Entity or the guarantor, if any, of the loan or any agent. ISDA 2003 Term: Consent Required Loan
     *
     * @param com.leansoft.fpml.nano.PCDeliverableObligationCharac
	 */
	public void setConsentRequiredLoan(PCDeliverableObligationCharac consentRequiredLoan) {
	    this.consentRequiredLoan = consentRequiredLoan;
	}
	/**
     * public getter
     *
     * A deliverable obligation characteristic. A loan with a participation agreement whereby the buyer is capable of creating, or procuring the creation of, a contractual right in favour of the seller that provides the seller with recourse to the participation seller for a specified share in any payments due under the relevant loan which are received by the participation seller. ISDA 2003 Term: Direct Loan Participation
     *
     * @returns com.leansoft.fpml.nano.LoanParticipation
	 */
	public LoanParticipation getDirectLoanParticipation() {
	    return this.directLoanParticipation;
	}
	
	/**
	 * public setter
	 *
     * A deliverable obligation characteristic. A loan with a participation agreement whereby the buyer is capable of creating, or procuring the creation of, a contractual right in favour of the seller that provides the seller with recourse to the participation seller for a specified share in any payments due under the relevant loan which are received by the participation seller. ISDA 2003 Term: Direct Loan Participation
     *
     * @param com.leansoft.fpml.nano.LoanParticipation
	 */
	public void setDirectLoanParticipation(LoanParticipation directLoanParticipation) {
	    this.directLoanParticipation = directLoanParticipation;
	}
	/**
     * public getter
     *
     * A deliverable obligation characteristic. An obligation that is transferable to institutional investors without any contractual, statutory or regulatory restrictions. ISDA 2003 Term: Transferable
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getTransferable() {
	    return this.transferable;
	}
	
	/**
	 * public setter
	 *
     * A deliverable obligation characteristic. An obligation that is transferable to institutional investors without any contractual, statutory or regulatory restrictions. ISDA 2003 Term: Transferable
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setTransferable(Empty transferable) {
	    this.transferable = transferable;
	}
	/**
     * public getter
     *
     * A deliverable obligation characteristic. An obligation that has a remaining maturity from the Physical Settlement Date of not greater than the period specified. ISDA 2003 Term: Maximum Maturity
     *
     * @returns com.leansoft.fpml.nano.Interval
	 */
	public Interval getMaximumMaturity() {
	    return this.maximumMaturity;
	}
	
	/**
	 * public setter
	 *
     * A deliverable obligation characteristic. An obligation that has a remaining maturity from the Physical Settlement Date of not greater than the period specified. ISDA 2003 Term: Maximum Maturity
     *
     * @param com.leansoft.fpml.nano.Interval
	 */
	public void setMaximumMaturity(Interval maximumMaturity) {
	    this.maximumMaturity = maximumMaturity;
	}
	/**
     * public getter
     *
     * A deliverable obligation characteristic. An obligation at time of default is due to mature and due to be repaid, or as a result of downgrade/bankruptcy is due to be repaid as a result of an acceleration clause. ISDA 2003 Term: Accelerated or Matured
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getAcceleratedOrMatured() {
	    return this.acceleratedOrMatured;
	}
	
	/**
	 * public setter
	 *
     * A deliverable obligation characteristic. An obligation at time of default is due to mature and due to be repaid, or as a result of downgrade/bankruptcy is due to be repaid as a result of an acceleration clause. ISDA 2003 Term: Accelerated or Matured
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setAcceleratedOrMatured(Empty acceleratedOrMatured) {
	    this.acceleratedOrMatured = acceleratedOrMatured;
	}
	/**
     * public getter
     *
     * A deliverable obligation characteristic. Any obligation that is not a bearer instrument. This applies to Bonds only and is meant to avoid tax, fraud and security/delivery provisions that can potentially be associated with Bearer Bonds. ISDA 2003 Term: Not Bearer
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotBearer() {
	    return this.notBearer;
	}
	
	/**
	 * public setter
	 *
     * A deliverable obligation characteristic. Any obligation that is not a bearer instrument. This applies to Bonds only and is meant to avoid tax, fraud and security/delivery provisions that can potentially be associated with Bearer Bonds. ISDA 2003 Term: Not Bearer
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotBearer(Empty notBearer) {
	    this.notBearer = notBearer;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getFullFaithAndCreditObLiability() {
	    return this.fullFaithAndCreditObLiability;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setFullFaithAndCreditObLiability(Empty fullFaithAndCreditObLiability) {
	    this.fullFaithAndCreditObLiability = fullFaithAndCreditObLiability;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getGeneralFundObligationLiability() {
	    return this.generalFundObligationLiability;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setGeneralFundObligationLiability(Empty generalFundObligationLiability) {
	    this.generalFundObligationLiability = generalFundObligationLiability;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getRevenueObligationLiability() {
	    return this.revenueObligationLiability;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setRevenueObligationLiability(Empty revenueObligationLiability) {
	    this.revenueObligationLiability = revenueObligationLiability;
	}
	/**
     * public getter
     *
     * ISDA 1999 Term: Indirect Loan Participation. NOTE: Only applicable as a deliverable obligation under ISDA Credit 1999.
     *
     * @returns com.leansoft.fpml.nano.LoanParticipation
	 */
	public LoanParticipation getIndirectLoanParticipation() {
	    return this.indirectLoanParticipation;
	}
	
	/**
	 * public setter
	 *
     * ISDA 1999 Term: Indirect Loan Participation. NOTE: Only applicable as a deliverable obligation under ISDA Credit 1999.
     *
     * @param com.leansoft.fpml.nano.LoanParticipation
	 */
	public void setIndirectLoanParticipation(LoanParticipation indirectLoanParticipation) {
	    this.indirectLoanParticipation = indirectLoanParticipation;
	}
	/**
     * public getter
     *
     * A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations
     *
     * @returns java.lang.String
	 */
	public String getExcluded() {
	    return this.excluded;
	}
	
	/**
	 * public setter
	 *
     * A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations
     *
     * @param java.lang.String
	 */
	public void setExcluded(String excluded) {
	    this.excluded = excluded;
	}
	/**
     * public getter
     *
     * This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity
     *
     * @returns java.lang.String
	 */
	public String getOthReferenceEntityObligations() {
	    return this.othReferenceEntityObligations;
	}
	
	/**
	 * public setter
	 *
     * This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity
     *
     * @param java.lang.String
	 */
	public void setOthReferenceEntityObligations(String othReferenceEntityObligations) {
	    this.othReferenceEntityObligations = othReferenceEntityObligations;
	}

}