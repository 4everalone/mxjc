// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * An abstract pricing structure valuation base type. Used as a base for values of pricing structures such as yield curves and volatility matrices. Derived from the "Valuation" type.
 */
@RootElement(name = "pricingStructureValuation", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class PricingStructureValuation extends Valuation implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private IdentifiedDate baseDate;
	
	@Element
	private IdentifiedDate spotDate;
	
	@Element
	private IdentifiedDate inputDataDate;
	
	@Element
	private IdentifiedDate endDate;
	
	@Element
	private Date buildDateTime;
	
    
	/**
     * public getter
     *
     * The base date for which the structure applies, i.e. the curve date. Normally this will align with the valuation date.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getBaseDate() {
	    return this.baseDate;
	}
	
	/**
	 * public setter
	 *
     * The base date for which the structure applies, i.e. the curve date. Normally this will align with the valuation date.
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setBaseDate(IdentifiedDate baseDate) {
	    this.baseDate = baseDate;
	}
	/**
     * public getter
     *
     * The spot settlement date for which the structure applies, normally 0-2 days after the base date. The difference between the baseDate and the spotDate is termed the settlement lag, and is sometimes called "days to spot".
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getSpotDate() {
	    return this.spotDate;
	}
	
	/**
	 * public setter
	 *
     * The spot settlement date for which the structure applies, normally 0-2 days after the base date. The difference between the baseDate and the spotDate is termed the settlement lag, and is sometimes called "days to spot".
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setSpotDate(IdentifiedDate spotDate) {
	    this.spotDate = spotDate;
	}
	/**
     * public getter
     *
     * The date from which the input data used to construct the pricing input was obtained. Often the same as the baseDate, but sometimes the pricing input may be "rolled forward", in which input data from one date is used to generate a curve for a later date.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getInputDataDate() {
	    return this.inputDataDate;
	}
	
	/**
	 * public setter
	 *
     * The date from which the input data used to construct the pricing input was obtained. Often the same as the baseDate, but sometimes the pricing input may be "rolled forward", in which input data from one date is used to generate a curve for a later date.
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setInputDataDate(IdentifiedDate inputDataDate) {
	    this.inputDataDate = inputDataDate;
	}
	/**
     * public getter
     *
     * The last date for which data is supplied in this pricing input.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getEndDate() {
	    return this.endDate;
	}
	
	/**
	 * public setter
	 *
     * The last date for which data is supplied in this pricing input.
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setEndDate(IdentifiedDate endDate) {
	    this.endDate = endDate;
	}
	/**
     * public getter
     *
     * The date and time when the pricing input was generated.
     *
     * @returns java.util.Date
	 */
	public Date getBuildDateTime() {
	    return this.buildDateTime;
	}
	
	/**
	 * public setter
	 *
     * The date and time when the pricing input was generated.
     *
     * @param java.util.Date
	 */
	public void setBuildDateTime(Date buildDateTime) {
	    this.buildDateTime = buildDateTime;
	}

}