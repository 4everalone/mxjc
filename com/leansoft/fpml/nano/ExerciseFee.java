// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type defining the fee payable on exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised.
 */
public class ExerciseFee implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrAccountReference payerPartyReference;
	
	@Element
	private PartyOrAccountReference receiverPartyReference;
	
	@Element
	private ScheduleReference notionalReference;
	
	@Element
	private BigDecimal feeAmount;
	
	@Element
	private BigDecimal feeRate;
	
	@Element
	private RelativeDateOffset feePaymentDate;
	
    
	/**
     * public getter
     *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getPayerPartyReference() {
	    return this.payerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setPayerPartyReference(PartyOrAccountReference payerPartyReference) {
	    this.payerPartyReference = payerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getReceiverPartyReference() {
	    return this.receiverPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setReceiverPartyReference(PartyOrAccountReference receiverPartyReference) {
	    this.receiverPartyReference = receiverPartyReference;
	}
	/**
     * public getter
     *
     * A pointer style reference to the associated notional schedule defined elsewhere in the document.
     *
     * @returns com.leansoft.fpml.nano.ScheduleReference
	 */
	public ScheduleReference getNotionalReference() {
	    return this.notionalReference;
	}
	
	/**
	 * public setter
	 *
     * A pointer style reference to the associated notional schedule defined elsewhere in the document.
     *
     * @param com.leansoft.fpml.nano.ScheduleReference
	 */
	public void setNotionalReference(ScheduleReference notionalReference) {
	    this.notionalReference = notionalReference;
	}
	/**
     * public getter
     *
     * The amount of fee to be paid on exercise. The fee currency is that of the referenced notional.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getFeeAmount() {
	    return this.feeAmount;
	}
	
	/**
	 * public setter
	 *
     * The amount of fee to be paid on exercise. The fee currency is that of the referenced notional.
     *
     * @param java.math.BigDecimal
	 */
	public void setFeeAmount(BigDecimal feeAmount) {
	    this.feeAmount = feeAmount;
	}
	/**
     * public getter
     *
     * A fee represented as a percentage of some referenced notional. A percentage of 5% would be represented as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getFeeRate() {
	    return this.feeRate;
	}
	
	/**
	 * public setter
	 *
     * A fee represented as a percentage of some referenced notional. A percentage of 5% would be represented as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setFeeRate(BigDecimal feeRate) {
	    this.feeRate = feeRate;
	}
	/**
     * public getter
     *
     * The date on which exercise fee(s) will be paid. It is specified as a relative date.
     *
     * @returns com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public RelativeDateOffset getFeePaymentDate() {
	    return this.feePaymentDate;
	}
	
	/**
	 * public setter
	 *
     * The date on which exercise fee(s) will be paid. It is specified as a relative date.
     *
     * @param com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public void setFeePaymentDate(RelativeDateOffset feePaymentDate) {
	    this.feePaymentDate = feePaymentDate;
	}

}