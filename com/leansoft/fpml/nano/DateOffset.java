// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;

/**
 * A type defining an offset used in calculating a date when this date is defined in reference to another date through a date offset. The type includes the convention for adjusting the date and an optional sequence element to indicate the order in a sequence of multiple date offsets.
 */
public class DateOffset extends Offset implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BusinessDayConventionEnum businessDayConvention;
	
	@Element
	private BigInteger sequence;
	
    
	/**
     * public getter
     *
     * The convention for adjusting a date if it would otherwise fall on a day that is not a business day.
     *
     * @returns com.leansoft.fpml.nano.BusinessDayConventionEnum
	 */
	public BusinessDayConventionEnum getBusinessDayConvention() {
	    return this.businessDayConvention;
	}
	
	/**
	 * public setter
	 *
     * The convention for adjusting a date if it would otherwise fall on a day that is not a business day.
     *
     * @param com.leansoft.fpml.nano.BusinessDayConventionEnum
	 */
	public void setBusinessDayConvention(BusinessDayConventionEnum businessDayConvention) {
	    this.businessDayConvention = businessDayConvention;
	}
	/**
     * public getter
     *
     * Sequence in which the reference to the time period multiplier should be applied.
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getSequence() {
	    return this.sequence;
	}
	
	/**
	 * public setter
	 *
     * Sequence in which the reference to the time period multiplier should be applied.
     *
     * @param java.math.BigInteger
	 */
	public void setSequence(BigInteger sequence) {
	    this.sequence = sequence;
	}

}