// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;

/**
 * A type that describes the information to identify an intermediary through which payment will be made by the correspondent bank to the ultimate beneficiary of the funds.
 */
public class IntermediaryInformation implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private RoutingIds routingIds;
	
	@Element
	private RoutingExplicitDetails routingExplicitDetails;
	
	@Element
	private RoutingIdsAndExplicitDetails routingIdsAndExplicitDetails;
	
	@Element
	private BigInteger intermediarySequenceNumber;
	
	@Element
	private PartyReference intermediaryPartyReference;
	
    
	/**
     * public getter
     *
     * A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.
     *
     * @returns com.leansoft.fpml.nano.RoutingIds
	 */
	public RoutingIds getRoutingIds() {
	    return this.routingIds;
	}
	
	/**
	 * public setter
	 *
     * A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.
     *
     * @param com.leansoft.fpml.nano.RoutingIds
	 */
	public void setRoutingIds(RoutingIds routingIds) {
	    this.routingIds = routingIds;
	}
	/**
     * public getter
     *
     * A set of details that is used to identify a party involved in the routing of a payment when the party does not have a code that identifies it within one of the recognized payment systems.
     *
     * @returns com.leansoft.fpml.nano.RoutingExplicitDetails
	 */
	public RoutingExplicitDetails getRoutingExplicitDetails() {
	    return this.routingExplicitDetails;
	}
	
	/**
	 * public setter
	 *
     * A set of details that is used to identify a party involved in the routing of a payment when the party does not have a code that identifies it within one of the recognized payment systems.
     *
     * @param com.leansoft.fpml.nano.RoutingExplicitDetails
	 */
	public void setRoutingExplicitDetails(RoutingExplicitDetails routingExplicitDetails) {
	    this.routingExplicitDetails = routingExplicitDetails;
	}
	/**
     * public getter
     *
     * A combination of coded payment system identifiers and details for physical addressing for a party involved in the routing of a payment.
     *
     * @returns com.leansoft.fpml.nano.RoutingIdsAndExplicitDetails
	 */
	public RoutingIdsAndExplicitDetails getRoutingIdsAndExplicitDetails() {
	    return this.routingIdsAndExplicitDetails;
	}
	
	/**
	 * public setter
	 *
     * A combination of coded payment system identifiers and details for physical addressing for a party involved in the routing of a payment.
     *
     * @param com.leansoft.fpml.nano.RoutingIdsAndExplicitDetails
	 */
	public void setRoutingIdsAndExplicitDetails(RoutingIdsAndExplicitDetails routingIdsAndExplicitDetails) {
	    this.routingIdsAndExplicitDetails = routingIdsAndExplicitDetails;
	}
	/**
     * public getter
     *
     * A sequence number that gives the position of the current intermediary in the chain of payment intermediaries. The assumed domain value set is an ascending sequence of integers starting from 1.
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getIntermediarySequenceNumber() {
	    return this.intermediarySequenceNumber;
	}
	
	/**
	 * public setter
	 *
     * A sequence number that gives the position of the current intermediary in the chain of payment intermediaries. The assumed domain value set is an ascending sequence of integers starting from 1.
     *
     * @param java.math.BigInteger
	 */
	public void setIntermediarySequenceNumber(BigInteger intermediarySequenceNumber) {
	    this.intermediarySequenceNumber = intermediarySequenceNumber;
	}
	/**
     * public getter
     *
     * Reference to the party acting as intermediary.
     *
     * @returns com.leansoft.fpml.nano.PartyReference
	 */
	public PartyReference getIntermediaryPartyReference() {
	    return this.intermediaryPartyReference;
	}
	
	/**
	 * public setter
	 *
     * Reference to the party acting as intermediary.
     *
     * @param com.leansoft.fpml.nano.PartyReference
	 */
	public void setIntermediaryPartyReference(PartyReference intermediaryPartyReference) {
	    this.intermediaryPartyReference = intermediaryPartyReference;
	}

}