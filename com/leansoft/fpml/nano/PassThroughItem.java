// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * Type to represent a single pass through payment.
 */
public class PassThroughItem implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrAccountReference payerPartyReference;
	
	@Element
	private PartyOrAccountReference receiverPartyReference;
	
	@Element
	private AssetReference underlyerReference;
	
	@Element
	private BigDecimal passThroughPercentage;
	
    
	/**
     * public getter
     *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getPayerPartyReference() {
	    return this.payerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setPayerPartyReference(PartyOrAccountReference payerPartyReference) {
	    this.payerPartyReference = payerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getReceiverPartyReference() {
	    return this.receiverPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setReceiverPartyReference(PartyOrAccountReference receiverPartyReference) {
	    this.receiverPartyReference = receiverPartyReference;
	}
	/**
     * public getter
     *
     * Reference to the underlyer whose payments are being passed through.
     *
     * @returns com.leansoft.fpml.nano.AssetReference
	 */
	public AssetReference getUnderlyerReference() {
	    return this.underlyerReference;
	}
	
	/**
	 * public setter
	 *
     * Reference to the underlyer whose payments are being passed through.
     *
     * @param com.leansoft.fpml.nano.AssetReference
	 */
	public void setUnderlyerReference(AssetReference underlyerReference) {
	    this.underlyerReference = underlyerReference;
	}
	/**
     * public getter
     *
     * Percentage of payments from the underlyer which are passed through.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getPassThroughPercentage() {
	    return this.passThroughPercentage;
	}
	
	/**
	 * public setter
	 *
     * Percentage of payments from the underlyer which are passed through.
     *
     * @param java.math.BigDecimal
	 */
	public void setPassThroughPercentage(BigDecimal passThroughPercentage) {
	    this.passThroughPercentage = passThroughPercentage;
	}

}