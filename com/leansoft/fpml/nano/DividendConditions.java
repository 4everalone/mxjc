// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type describing the conditions governing the payment of dividends to the receiver of the equity return. With the exception of the dividend payout ratio, which is defined for each of the underlying components.
 */
public class DividendConditions implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Boolean dividendReinvestment;
	
	@Element
	private DividendEntitlementEnum dividendEntitlement;
	
	@Element
	private DividendAmountTypeEnum dividendAmount;
	
	@Element
	private DividendPaymentDate dividendPaymentDate;
	
	@Element
	private DateReference dividendPeriodEffectiveDate;
	
	@Element
	private DateReference dividendPeriodEndDate;
	
	@Element
	private DividendPeriodEnum dividendPeriod;
	
	@Element
	private PartyReference extraOrdinaryDividends;
	
	@Element
	private DividendAmountTypeEnum excessDividendAmount;
	
	@Element
	private IdentifiedCurrency currency;
	
	@Element
	private DeterminationMethod determinationMethod;
	
	@Element
	private IdentifiedCurrencyReference currencyReference;
	
	@Element
	private DividendPaymentDate dividendFxTriggerDate;
	
	@Element
	private InterestAccrualsCompoundingMethod interestAccrualsMethod;
	
    
	/**
     * public getter
     *
     * Boolean element that defines whether the dividend will be reinvested or not.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getDividendReinvestment() {
	    return this.dividendReinvestment;
	}
	
	/**
	 * public setter
	 *
     * Boolean element that defines whether the dividend will be reinvested or not.
     *
     * @param java.lang.Boolean
	 */
	public void setDividendReinvestment(Boolean dividendReinvestment) {
	    this.dividendReinvestment = dividendReinvestment;
	}
	/**
     * public getter
     *
     * Defines the date on which the receiver on the equity return is entitled to the dividend.
     *
     * @returns com.leansoft.fpml.nano.DividendEntitlementEnum
	 */
	public DividendEntitlementEnum getDividendEntitlement() {
	    return this.dividendEntitlement;
	}
	
	/**
	 * public setter
	 *
     * Defines the date on which the receiver on the equity return is entitled to the dividend.
     *
     * @param com.leansoft.fpml.nano.DividendEntitlementEnum
	 */
	public void setDividendEntitlement(DividendEntitlementEnum dividendEntitlement) {
	    this.dividendEntitlement = dividendEntitlement;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.DividendAmountTypeEnum
	 */
	public DividendAmountTypeEnum getDividendAmount() {
	    return this.dividendAmount;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.DividendAmountTypeEnum
	 */
	public void setDividendAmount(DividendAmountTypeEnum dividendAmount) {
	    this.dividendAmount = dividendAmount;
	}
	/**
     * public getter
     *
     * Specifies when the dividend will be paid to the receiver of the equity return. Has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. Is not applicable in the case of a dividend reinvestment election.
     *
     * @returns com.leansoft.fpml.nano.DividendPaymentDate
	 */
	public DividendPaymentDate getDividendPaymentDate() {
	    return this.dividendPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * Specifies when the dividend will be paid to the receiver of the equity return. Has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. Is not applicable in the case of a dividend reinvestment election.
     *
     * @param com.leansoft.fpml.nano.DividendPaymentDate
	 */
	public void setDividendPaymentDate(DividendPaymentDate dividendPaymentDate) {
	    this.dividendPaymentDate = dividendPaymentDate;
	}
	/**
     * public getter
     *
     * Dividend period has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. This element specifies the date on which the dividend period will commence.
     *
     * @returns com.leansoft.fpml.nano.DateReference
	 */
	public DateReference getDividendPeriodEffectiveDate() {
	    return this.dividendPeriodEffectiveDate;
	}
	
	/**
	 * public setter
	 *
     * Dividend period has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. This element specifies the date on which the dividend period will commence.
     *
     * @param com.leansoft.fpml.nano.DateReference
	 */
	public void setDividendPeriodEffectiveDate(DateReference dividendPeriodEffectiveDate) {
	    this.dividendPeriodEffectiveDate = dividendPeriodEffectiveDate;
	}
	/**
     * public getter
     *
     * Dividend period has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. This element specifies the date on which the dividend period will end. It includes a boolean attribute for defining whether this end date is included or excluded from the dividend period.
     *
     * @returns com.leansoft.fpml.nano.DateReference
	 */
	public DateReference getDividendPeriodEndDate() {
	    return this.dividendPeriodEndDate;
	}
	
	/**
	 * public setter
	 *
     * Dividend period has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. This element specifies the date on which the dividend period will end. It includes a boolean attribute for defining whether this end date is included or excluded from the dividend period.
     *
     * @param com.leansoft.fpml.nano.DateReference
	 */
	public void setDividendPeriodEndDate(DateReference dividendPeriodEndDate) {
	    this.dividendPeriodEndDate = dividendPeriodEndDate;
	}
	/**
     * public getter
     *
     * Defines the First Period or the Second Period, as defined in the 2002 ISDA Equity Derivatives Definitions.
     *
     * @returns com.leansoft.fpml.nano.DividendPeriodEnum
	 */
	public DividendPeriodEnum getDividendPeriod() {
	    return this.dividendPeriod;
	}
	
	/**
	 * public setter
	 *
     * Defines the First Period or the Second Period, as defined in the 2002 ISDA Equity Derivatives Definitions.
     *
     * @param com.leansoft.fpml.nano.DividendPeriodEnum
	 */
	public void setDividendPeriod(DividendPeriodEnum dividendPeriod) {
	    this.dividendPeriod = dividendPeriod;
	}
	/**
     * public getter
     *
     * Reference to the party which determines if dividends are extraordinary in relation to normal levels.
     *
     * @returns com.leansoft.fpml.nano.PartyReference
	 */
	public PartyReference getExtraOrdinaryDividends() {
	    return this.extraOrdinaryDividends;
	}
	
	/**
	 * public setter
	 *
     * Reference to the party which determines if dividends are extraordinary in relation to normal levels.
     *
     * @param com.leansoft.fpml.nano.PartyReference
	 */
	public void setExtraOrdinaryDividends(PartyReference extraOrdinaryDividends) {
	    this.extraOrdinaryDividends = extraOrdinaryDividends;
	}
	/**
     * public getter
     *
     * Determination of Gross Cash Dividend per Share
     *
     * @returns com.leansoft.fpml.nano.DividendAmountTypeEnum
	 */
	public DividendAmountTypeEnum getExcessDividendAmount() {
	    return this.excessDividendAmount;
	}
	
	/**
	 * public setter
	 *
     * Determination of Gross Cash Dividend per Share
     *
     * @param com.leansoft.fpml.nano.DividendAmountTypeEnum
	 */
	public void setExcessDividendAmount(DividendAmountTypeEnum excessDividendAmount) {
	    this.excessDividendAmount = excessDividendAmount;
	}
	/**
     * public getter
     *
     * The currency in which an amount is denominated.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedCurrency
	 */
	public IdentifiedCurrency getCurrency() {
	    return this.currency;
	}
	
	/**
	 * public setter
	 *
     * The currency in which an amount is denominated.
     *
     * @param com.leansoft.fpml.nano.IdentifiedCurrency
	 */
	public void setCurrency(IdentifiedCurrency currency) {
	    this.currency = currency;
	}
	/**
     * public getter
     *
     * Specifies the method according to which an amount or a date is determined.
     *
     * @returns com.leansoft.fpml.nano.DeterminationMethod
	 */
	public DeterminationMethod getDeterminationMethod() {
	    return this.determinationMethod;
	}
	
	/**
	 * public setter
	 *
     * Specifies the method according to which an amount or a date is determined.
     *
     * @param com.leansoft.fpml.nano.DeterminationMethod
	 */
	public void setDeterminationMethod(DeterminationMethod determinationMethod) {
	    this.determinationMethod = determinationMethod;
	}
	/**
     * public getter
     *
     * The currency in which an amount is denominated.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedCurrencyReference
	 */
	public IdentifiedCurrencyReference getCurrencyReference() {
	    return this.currencyReference;
	}
	
	/**
	 * public setter
	 *
     * The currency in which an amount is denominated.
     *
     * @param com.leansoft.fpml.nano.IdentifiedCurrencyReference
	 */
	public void setCurrencyReference(IdentifiedCurrencyReference currencyReference) {
	    this.currencyReference = currencyReference;
	}
	/**
     * public getter
     *
     * Specifies the date on which the FX rate will be considered in the case of a Composite FX swap.
     *
     * @returns com.leansoft.fpml.nano.DividendPaymentDate
	 */
	public DividendPaymentDate getDividendFxTriggerDate() {
	    return this.dividendFxTriggerDate;
	}
	
	/**
	 * public setter
	 *
     * Specifies the date on which the FX rate will be considered in the case of a Composite FX swap.
     *
     * @param com.leansoft.fpml.nano.DividendPaymentDate
	 */
	public void setDividendFxTriggerDate(DividendPaymentDate dividendFxTriggerDate) {
	    this.dividendFxTriggerDate = dividendFxTriggerDate;
	}
	/**
     * public getter
     *
     * FpML entity
     *
     * @returns com.leansoft.fpml.nano.InterestAccrualsCompoundingMethod
	 */
	public InterestAccrualsCompoundingMethod getInterestAccrualsMethod() {
	    return this.interestAccrualsMethod;
	}
	
	/**
	 * public setter
	 *
     * FpML entity
     *
     * @param com.leansoft.fpml.nano.InterestAccrualsCompoundingMethod
	 */
	public void setInterestAccrualsMethod(InterestAccrualsCompoundingMethod interestAccrualsMethod) {
	    this.interestAccrualsMethod = interestAccrualsMethod;
	}

}