// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A partial derivative multiplied by a weighting factor.
 */
public class WeightedPartialDerivative implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PricingStructureReference partialDerivativeReference;
	
	@Element
	private BigDecimal weight;
	
    
	/**
     * public getter
     *
     * A reference to a partial derivative defined in the ComputedDerivative.model, i.e. defined as part of this sensitivity definition.
     *
     * @returns com.leansoft.fpml.nano.PricingStructureReference
	 */
	public PricingStructureReference getPartialDerivativeReference() {
	    return this.partialDerivativeReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to a partial derivative defined in the ComputedDerivative.model, i.e. defined as part of this sensitivity definition.
     *
     * @param com.leansoft.fpml.nano.PricingStructureReference
	 */
	public void setPartialDerivativeReference(PricingStructureReference partialDerivativeReference) {
	    this.partialDerivativeReference = partialDerivativeReference;
	}
	/**
     * public getter
     *
     * The weight factor to be applied to the partial derivative, e.g. 1 or -1, or some other scaling value.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getWeight() {
	    return this.weight;
	}
	
	/**
	 * public setter
	 *
     * The weight factor to be applied to the partial derivative, e.g. 1 or -1, or some other scaling value.
     *
     * @param java.math.BigDecimal
	 */
	public void setWeight(BigDecimal weight) {
	    this.weight = weight;
	}

}