// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * Abstract base class for all underlying assets.
 */
public abstract class UnderlyingAsset extends IdentifiedAsset implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Currency currency;
	
	@Element
	private ExchangeId exchangeId;
	
	@Element
	private ClearanceSystem clearanceSystem;
	
	@Element
	private ProductReference definition;
	
    
	/**
     * public getter
     *
     * Currency in which the underlying asset is denominated.
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getCurrency() {
	    return this.currency;
	}
	
	/**
	 * public setter
	 *
     * Currency in which the underlying asset is denominated.
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setCurrency(Currency currency) {
	    this.currency = currency;
	}
	/**
     * public getter
     *
     * Identification of the exchange on which this asset is transacted for the purposes of calculating a contractural payoff. The term "Exchange" is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.
     *
     * @returns com.leansoft.fpml.nano.ExchangeId
	 */
	public ExchangeId getExchangeId() {
	    return this.exchangeId;
	}
	
	/**
	 * public setter
	 *
     * Identification of the exchange on which this asset is transacted for the purposes of calculating a contractural payoff. The term "Exchange" is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.
     *
     * @param com.leansoft.fpml.nano.ExchangeId
	 */
	public void setExchangeId(ExchangeId exchangeId) {
	    this.exchangeId = exchangeId;
	}
	/**
     * public getter
     *
     * Identification of the clearance system associated with the transaction exchange.
     *
     * @returns com.leansoft.fpml.nano.ClearanceSystem
	 */
	public ClearanceSystem getClearanceSystem() {
	    return this.clearanceSystem;
	}
	
	/**
	 * public setter
	 *
     * Identification of the clearance system associated with the transaction exchange.
     *
     * @param com.leansoft.fpml.nano.ClearanceSystem
	 */
	public void setClearanceSystem(ClearanceSystem clearanceSystem) {
	    this.clearanceSystem = clearanceSystem;
	}
	/**
     * public getter
     *
     * An optional reference to a full FpML product that defines the simple product in greater detail. In case of inconsistency between the terms of the simple product and those of the detailed definition, the values in the simple product override those in the detailed definition.
     *
     * @returns com.leansoft.fpml.nano.ProductReference
	 */
	public ProductReference getDefinition() {
	    return this.definition;
	}
	
	/**
	 * public setter
	 *
     * An optional reference to a full FpML product that defines the simple product in greater detail. In case of inconsistency between the terms of the simple product and those of the detailed definition, the values in the simple product override those in the detailed definition.
     *
     * @param com.leansoft.fpml.nano.ProductReference
	 */
	public void setDefinition(ProductReference definition) {
	    this.definition = definition;
	}

}