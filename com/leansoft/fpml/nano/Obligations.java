// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

@RootElement(name = "obligations", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class Obligations implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private ObligationCategoryEnum category;
	
	@Element
	private Empty notSubordinated;
	
	@Element
	private SpecifiedCurrency specifiedCurrency;
	
	@Element
	private Empty notSovereignLender;
	
	@Element
	private NotDomesticCurrency notDomesticCurrency;
	
	@Element
	private Empty notDomesticLaw;
	
	@Element
	private Empty listed;
	
	@Element
	private Empty notDomesticIssuance;
	
	@Element
	private Empty fullFaithAndCreditObLiability;
	
	@Element
	private Empty generalFundObligationLiability;
	
	@Element
	private Empty revenueObligationLiability;
	
	@Element
	private Empty notContingent;
	
	@Element
	private String excluded;
	
	@Element
	private String othReferenceEntityObligations;
	
	@Element
	private Lien designatedPriority;
	
    
	/**
     * public getter
     *
     * Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category
     *
     * @returns com.leansoft.fpml.nano.ObligationCategoryEnum
	 */
	public ObligationCategoryEnum getCategory() {
	    return this.category;
	}
	
	/**
	 * public setter
	 *
     * Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category
     *
     * @param com.leansoft.fpml.nano.ObligationCategoryEnum
	 */
	public void setCategory(ObligationCategoryEnum category) {
	    this.category = category;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotSubordinated() {
	    return this.notSubordinated;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotSubordinated(Empty notSubordinated) {
	    this.notSubordinated = notSubordinated;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency
     *
     * @returns com.leansoft.fpml.nano.SpecifiedCurrency
	 */
	public SpecifiedCurrency getSpecifiedCurrency() {
	    return this.specifiedCurrency;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency
     *
     * @param com.leansoft.fpml.nano.SpecifiedCurrency
	 */
	public void setSpecifiedCurrency(SpecifiedCurrency specifiedCurrency) {
	    this.specifiedCurrency = specifiedCurrency;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organization. ISDA 2003 Term: Not Sovereign Lender
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotSovereignLender() {
	    return this.notSovereignLender;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organization. ISDA 2003 Term: Not Sovereign Lender
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotSovereignLender(Empty notSovereignLender) {
	    this.notSovereignLender = notSovereignLender;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency
     *
     * @returns com.leansoft.fpml.nano.NotDomesticCurrency
	 */
	public NotDomesticCurrency getNotDomesticCurrency() {
	    return this.notDomesticCurrency;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency
     *
     * @param com.leansoft.fpml.nano.NotDomesticCurrency
	 */
	public void setNotDomesticCurrency(NotDomesticCurrency notDomesticCurrency) {
	    this.notDomesticCurrency = notDomesticCurrency;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotDomesticLaw() {
	    return this.notDomesticLaw;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotDomesticLaw(Empty notDomesticLaw) {
	    this.notDomesticLaw = notDomesticLaw;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getListed() {
	    return this.listed;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setListed(Empty listed) {
	    this.listed = listed;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognized bond. ISDA 2003 Term: Not Domestic Issuance
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotDomesticIssuance() {
	    return this.notDomesticIssuance;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognized bond. ISDA 2003 Term: Not Domestic Issuance
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotDomesticIssuance(Empty notDomesticIssuance) {
	    this.notDomesticIssuance = notDomesticIssuance;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getFullFaithAndCreditObLiability() {
	    return this.fullFaithAndCreditObLiability;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setFullFaithAndCreditObLiability(Empty fullFaithAndCreditObLiability) {
	    this.fullFaithAndCreditObLiability = fullFaithAndCreditObLiability;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getGeneralFundObligationLiability() {
	    return this.generalFundObligationLiability;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setGeneralFundObligationLiability(Empty generalFundObligationLiability) {
	    this.generalFundObligationLiability = generalFundObligationLiability;
	}
	/**
     * public getter
     *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getRevenueObligationLiability() {
	    return this.revenueObligationLiability;
	}
	
	/**
	 * public setter
	 *
     * An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setRevenueObligationLiability(Empty revenueObligationLiability) {
	    this.revenueObligationLiability = revenueObligationLiability;
	}
	/**
     * public getter
     *
     * NOTE: Only allowed as an obligation charcteristic under ISDA Credit 1999. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNotContingent() {
	    return this.notContingent;
	}
	
	/**
	 * public setter
	 *
     * NOTE: Only allowed as an obligation charcteristic under ISDA Credit 1999. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNotContingent(Empty notContingent) {
	    this.notContingent = notContingent;
	}
	/**
     * public getter
     *
     * A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations
     *
     * @returns java.lang.String
	 */
	public String getExcluded() {
	    return this.excluded;
	}
	
	/**
	 * public setter
	 *
     * A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations
     *
     * @param java.lang.String
	 */
	public void setExcluded(String excluded) {
	    this.excluded = excluded;
	}
	/**
     * public getter
     *
     * This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity
     *
     * @returns java.lang.String
	 */
	public String getOthReferenceEntityObligations() {
	    return this.othReferenceEntityObligations;
	}
	
	/**
	 * public setter
	 *
     * This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity
     *
     * @param java.lang.String
	 */
	public void setOthReferenceEntityObligations(String othReferenceEntityObligations) {
	    this.othReferenceEntityObligations = othReferenceEntityObligations;
	}
	/**
     * public getter
     *
     * Applies to Loan CDS, to indicate what lien level is appropriate for a deliverable obligation. Example: a 2nd lien Loan CDS would imply that the deliverable obligations are 1st or 2nd lien loans.
     *
     * @returns com.leansoft.fpml.nano.Lien
	 */
	public Lien getDesignatedPriority() {
	    return this.designatedPriority;
	}
	
	/**
	 * public setter
	 *
     * Applies to Loan CDS, to indicate what lien level is appropriate for a deliverable obligation. Example: a 2nd lien Loan CDS would imply that the deliverable obligations are 1st or 2nd lien loans.
     *
     * @param com.leansoft.fpml.nano.Lien
	 */
	public void setDesignatedPriority(Lien designatedPriority) {
	    this.designatedPriority = designatedPriority;
	}

}