// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;
import java.util.List;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A type defining a Forward Rate Agreement (FRA) product.
 */
@RootElement(name = "fra", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class Fra extends Product implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrTradeSideReference buyerPartyReference;
	
	@Element
	private PartyOrTradeSideReference sellerPartyReference;
	
	@Element
	private RequiredIdentifierDate adjustedEffectiveDate;
	
	@Element
	private Date adjustedTerminationDate;
	
	@Element
	private AdjustableDate paymentDate;
	
	@Element
	private RelativeDateOffset fixingDateOffset;
	
	@Element
	private DayCountFraction dayCountFraction;
	
	@Element
	private BigInteger calculationPeriodNumberOfDays;
	
	@Element
	private Money notional;
	
	@Element
	private BigDecimal fixedRate;
	
	@Element
	private FloatingRateIndex floatingRateIndex;
	
	@Element
	private List<Interval> indexTenor;
	
	@Element
	private FraDiscountingEnum fraDiscounting;
	
    
	/**
     * public getter
     *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getBuyerPartyReference() {
	    return this.buyerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setBuyerPartyReference(PartyOrTradeSideReference buyerPartyReference) {
	    this.buyerPartyReference = buyerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getSellerPartyReference() {
	    return this.sellerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setSellerPartyReference(PartyOrTradeSideReference sellerPartyReference) {
	    this.sellerPartyReference = sellerPartyReference;
	}
	/**
     * public getter
     *
     * The start date of the calculation period. This date should already be adjusted for any applicable business day convention. This is also the date when the observed rate is applied, the reset date.
     *
     * @returns com.leansoft.fpml.nano.RequiredIdentifierDate
	 */
	public RequiredIdentifierDate getAdjustedEffectiveDate() {
	    return this.adjustedEffectiveDate;
	}
	
	/**
	 * public setter
	 *
     * The start date of the calculation period. This date should already be adjusted for any applicable business day convention. This is also the date when the observed rate is applied, the reset date.
     *
     * @param com.leansoft.fpml.nano.RequiredIdentifierDate
	 */
	public void setAdjustedEffectiveDate(RequiredIdentifierDate adjustedEffectiveDate) {
	    this.adjustedEffectiveDate = adjustedEffectiveDate;
	}
	/**
     * public getter
     *
     * The end date of the calculation period. This date should already be adjusted for any applicable business day convention.
     *
     * @returns java.util.Date
	 */
	public Date getAdjustedTerminationDate() {
	    return this.adjustedTerminationDate;
	}
	
	/**
	 * public setter
	 *
     * The end date of the calculation period. This date should already be adjusted for any applicable business day convention.
     *
     * @param java.util.Date
	 */
	public void setAdjustedTerminationDate(Date adjustedTerminationDate) {
	    this.adjustedTerminationDate = adjustedTerminationDate;
	}
	/**
     * public getter
     *
     * The payment date. This date is subject to adjustment in accordance with any applicable business day convention.
     *
     * @returns com.leansoft.fpml.nano.AdjustableDate
	 */
	public AdjustableDate getPaymentDate() {
	    return this.paymentDate;
	}
	
	/**
	 * public setter
	 *
     * The payment date. This date is subject to adjustment in accordance with any applicable business day convention.
     *
     * @param com.leansoft.fpml.nano.AdjustableDate
	 */
	public void setPaymentDate(AdjustableDate paymentDate) {
	    this.paymentDate = paymentDate;
	}
	/**
     * public getter
     *
     * Specifies the fixing date relative to the reset date in terms of a business days offset and an associated set of financial business centers. Normally these offset calculation rules will be those specified in the ISDA definition for the relevant floating rate index (ISDA's Floating Rate Option). However, non-standard offset calculation rules may apply for a trade if mutually agreed by the principal parties to the transaction. The href attribute on the dateRelativeTo element should reference the id attribute on the adjustedEffectiveDate element.
     *
     * @returns com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public RelativeDateOffset getFixingDateOffset() {
	    return this.fixingDateOffset;
	}
	
	/**
	 * public setter
	 *
     * Specifies the fixing date relative to the reset date in terms of a business days offset and an associated set of financial business centers. Normally these offset calculation rules will be those specified in the ISDA definition for the relevant floating rate index (ISDA's Floating Rate Option). However, non-standard offset calculation rules may apply for a trade if mutually agreed by the principal parties to the transaction. The href attribute on the dateRelativeTo element should reference the id attribute on the adjustedEffectiveDate element.
     *
     * @param com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public void setFixingDateOffset(RelativeDateOffset fixingDateOffset) {
	    this.fixingDateOffset = fixingDateOffset;
	}
	/**
     * public getter
     *
     * The day count fraction.
     *
     * @returns com.leansoft.fpml.nano.DayCountFraction
	 */
	public DayCountFraction getDayCountFraction() {
	    return this.dayCountFraction;
	}
	
	/**
	 * public setter
	 *
     * The day count fraction.
     *
     * @param com.leansoft.fpml.nano.DayCountFraction
	 */
	public void setDayCountFraction(DayCountFraction dayCountFraction) {
	    this.dayCountFraction = dayCountFraction;
	}
	/**
     * public getter
     *
     * The number of days from the adjusted effective date to the adjusted termination date calculated in accordance with the applicable day count fraction.
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getCalculationPeriodNumberOfDays() {
	    return this.calculationPeriodNumberOfDays;
	}
	
	/**
	 * public setter
	 *
     * The number of days from the adjusted effective date to the adjusted termination date calculated in accordance with the applicable day count fraction.
     *
     * @param java.math.BigInteger
	 */
	public void setCalculationPeriodNumberOfDays(BigInteger calculationPeriodNumberOfDays) {
	    this.calculationPeriodNumberOfDays = calculationPeriodNumberOfDays;
	}
	/**
     * public getter
     *
     * The notional amount.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getNotional() {
	    return this.notional;
	}
	
	/**
	 * public setter
	 *
     * The notional amount.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setNotional(Money notional) {
	    this.notional = notional;
	}
	/**
     * public getter
     *
     * The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getFixedRate() {
	    return this.fixedRate;
	}
	
	/**
	 * public setter
	 *
     * The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setFixedRate(BigDecimal fixedRate) {
	    this.fixedRate = fixedRate;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.FloatingRateIndex
	 */
	public FloatingRateIndex getFloatingRateIndex() {
	    return this.floatingRateIndex;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.FloatingRateIndex
	 */
	public void setFloatingRateIndex(FloatingRateIndex floatingRateIndex) {
	    this.floatingRateIndex = floatingRateIndex;
	}
	/**
     * public getter
     *
     * The ISDA Designated Maturity, i.e. the tenor of the floating rate.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Interval>
	 */
	public List<Interval> getIndexTenor() {
	    return this.indexTenor;
	}
	
	/**
	 * public setter
	 *
     * The ISDA Designated Maturity, i.e. the tenor of the floating rate.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Interval>
	 */
	public void setIndexTenor(List<Interval> indexTenor) {
	    this.indexTenor = indexTenor;
	}
	/**
     * public getter
     *
     * Specifies whether discounting applies and, if so, what type.
     *
     * @returns com.leansoft.fpml.nano.FraDiscountingEnum
	 */
	public FraDiscountingEnum getFraDiscounting() {
	    return this.fraDiscounting;
	}
	
	/**
	 * public setter
	 *
     * Specifies whether discounting applies and, if so, what type.
     *
     * @param com.leansoft.fpml.nano.FraDiscountingEnum
	 */
	public void setFraDiscounting(FraDiscountingEnum fraDiscounting) {
	    this.fraDiscounting = fraDiscounting;
	}

}