// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * Summary trade economic details used to help identify a trade where no shared trade ID is available.
 */
public class TradeDetails implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private IdentifiedDate tradeDate;
	
	@Element
	private AdjustableDate2 effectiveDate;
	
	@Element
	private AdjustableDate2 terminationDate;
	
	@Element
	private ProductType productType;
	
	@Element
	private List<TradeUnderlyer> underlyer;
	
	@Element
	private List<CashflowNotional> notional;
	
    
	/**
     * public getter
     *
     * The trade date.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getTradeDate() {
	    return this.tradeDate;
	}
	
	/**
	 * public setter
	 *
     * The trade date.
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setTradeDate(IdentifiedDate tradeDate) {
	    this.tradeDate = tradeDate;
	}
	/**
     * public getter
     *
     * The earliest of all the effective dates of all constituent streams.
     *
     * @returns com.leansoft.fpml.nano.AdjustableDate2
	 */
	public AdjustableDate2 getEffectiveDate() {
	    return this.effectiveDate;
	}
	
	/**
	 * public setter
	 *
     * The earliest of all the effective dates of all constituent streams.
     *
     * @param com.leansoft.fpml.nano.AdjustableDate2
	 */
	public void setEffectiveDate(AdjustableDate2 effectiveDate) {
	    this.effectiveDate = effectiveDate;
	}
	/**
     * public getter
     *
     * The latest of all of the termination dates of the constituent streams.
     *
     * @returns com.leansoft.fpml.nano.AdjustableDate2
	 */
	public AdjustableDate2 getTerminationDate() {
	    return this.terminationDate;
	}
	
	/**
	 * public setter
	 *
     * The latest of all of the termination dates of the constituent streams.
     *
     * @param com.leansoft.fpml.nano.AdjustableDate2
	 */
	public void setTerminationDate(AdjustableDate2 terminationDate) {
	    this.terminationDate = terminationDate;
	}
	/**
     * public getter
     *
     * A classification of the type of product. FpML does not define domain values for this element.
     *
     * @returns com.leansoft.fpml.nano.ProductType
	 */
	public ProductType getProductType() {
	    return this.productType;
	}
	
	/**
	 * public setter
	 *
     * A classification of the type of product. FpML does not define domain values for this element.
     *
     * @param com.leansoft.fpml.nano.ProductType
	 */
	public void setProductType(ProductType productType) {
	    this.productType = productType;
	}
	/**
     * public getter
     *
     * The set of underlyers to the trade that can be used in computing the trade's cashflows. If this information is needed to identify the trade, all of the trade's underlyers should be specified, whether or not they figure into the cashflow calculation. Otherwise, only those underlyers used to compute this particular cashflow need be supplied.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.TradeUnderlyer>
	 */
	public List<TradeUnderlyer> getUnderlyer() {
	    return this.underlyer;
	}
	
	/**
	 * public setter
	 *
     * The set of underlyers to the trade that can be used in computing the trade's cashflows. If this information is needed to identify the trade, all of the trade's underlyers should be specified, whether or not they figure into the cashflow calculation. Otherwise, only those underlyers used to compute this particular cashflow need be supplied.
     *
     * @param java.util.List<com.leansoft.fpml.nano.TradeUnderlyer>
	 */
	public void setUnderlyer(List<TradeUnderlyer> underlyer) {
	    this.underlyer = underlyer;
	}
	/**
     * public getter
     *
     * The notional or notionals in effect on the last day of the last calculation period in each stream.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.CashflowNotional>
	 */
	public List<CashflowNotional> getNotional() {
	    return this.notional;
	}
	
	/**
	 * public setter
	 *
     * The notional or notionals in effect on the last day of the last calculation period in each stream.
     *
     * @param java.util.List<com.leansoft.fpml.nano.CashflowNotional>
	 */
	public void setNotional(List<CashflowNotional> notional) {
	    this.notional = notional;
	}

}