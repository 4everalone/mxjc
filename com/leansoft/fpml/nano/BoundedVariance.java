// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type describing variance bounds, which are used to exclude money price values outside of the specified range In a Up Conditional Swap Underlyer price must be equal to or higher than Lower Barrier In a Down Conditional Swap Underlyer price must be equal to or lower than Upper Barrier In a Corridor Conditional Swap Underlyer price must be equal to or higher than Lower Barrier and must be equal to or lower than Upper Barrier.
 */
public class BoundedVariance implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private RealisedVarianceMethodEnum realisedVarianceMethod;
	
	@Element
	private boolean daysInRangeAdjustment;
	
	@Element
	private BigDecimal upperBarrier;
	
	@Element
	private BigDecimal lowerBarrier;
	
    
	/**
     * public getter
     *
     * The contract specifies whether which price must satisfy the boundary condition.
     *
     * @returns com.leansoft.fpml.nano.RealisedVarianceMethodEnum
	 */
	public RealisedVarianceMethodEnum getRealisedVarianceMethod() {
	    return this.realisedVarianceMethod;
	}
	
	/**
	 * public setter
	 *
     * The contract specifies whether which price must satisfy the boundary condition.
     *
     * @param com.leansoft.fpml.nano.RealisedVarianceMethodEnum
	 */
	public void setRealisedVarianceMethod(RealisedVarianceMethodEnum realisedVarianceMethod) {
	    this.realisedVarianceMethod = realisedVarianceMethod;
	}
	/**
     * public getter
     *
     * The contract specifies whether the notional should be scaled by the Number of Days in Range divided by the Expected N. The number of Days in Ranges refers to the number of returns that contribute to the realized volatility.
     *
     * @returns .boolean
	 */
	public boolean getDaysInRangeAdjustment() {
	    return this.daysInRangeAdjustment;
	}
	
	/**
	 * public setter
	 *
     * The contract specifies whether the notional should be scaled by the Number of Days in Range divided by the Expected N. The number of Days in Ranges refers to the number of returns that contribute to the realized volatility.
     *
     * @param .boolean
	 */
	public void setDaysInRangeAdjustment(boolean daysInRangeAdjustment) {
	    this.daysInRangeAdjustment = daysInRangeAdjustment;
	}
	/**
     * public getter
     *
     * All observations above this price level will be excluded from the variance calculation.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getUpperBarrier() {
	    return this.upperBarrier;
	}
	
	/**
	 * public setter
	 *
     * All observations above this price level will be excluded from the variance calculation.
     *
     * @param java.math.BigDecimal
	 */
	public void setUpperBarrier(BigDecimal upperBarrier) {
	    this.upperBarrier = upperBarrier;
	}
	/**
     * public getter
     *
     * All observations below this price level will be excluded from the variance calculation.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getLowerBarrier() {
	    return this.lowerBarrier;
	}
	
	/**
	 * public setter
	 *
     * All observations below this price level will be excluded from the variance calculation.
     *
     * @param java.math.BigDecimal
	 */
	public void setLowerBarrier(BigDecimal lowerBarrier) {
	    this.lowerBarrier = lowerBarrier;
	}

}