// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * A type defining parameters used to generate the payment dates schedule, including the specification of early or delayed payments. Payment dates are determined relative to the calculation period dates or the reset dates.
 */
public class PaymentDates implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private CalculationPeriodDatesReference calculationPeriodDatesReference;
	
	@Element
	private ResetDatesReference resetDatesReference;
	
	@Element
	private Interval paymentFrequency;
	
	@Element
	private Date firstPaymentDate;
	
	@Element
	private Date lastRegularPaymentDate;
	
	@Element
	private PayRelativeToEnum payRelativeTo;
	
	@Element
	private Offset paymentDaysOffset;
	
	@Element
	private BusinessDayAdjustments paymentDatesAdjustments;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * A pointer style reference to the associated calculation period dates component defined elsewhere in the document.
     *
     * @returns com.leansoft.fpml.nano.CalculationPeriodDatesReference
	 */
	public CalculationPeriodDatesReference getCalculationPeriodDatesReference() {
	    return this.calculationPeriodDatesReference;
	}
	
	/**
	 * public setter
	 *
     * A pointer style reference to the associated calculation period dates component defined elsewhere in the document.
     *
     * @param com.leansoft.fpml.nano.CalculationPeriodDatesReference
	 */
	public void setCalculationPeriodDatesReference(CalculationPeriodDatesReference calculationPeriodDatesReference) {
	    this.calculationPeriodDatesReference = calculationPeriodDatesReference;
	}
	/**
     * public getter
     *
     * A pointer style reference to the associated reset dates component defined elsewhere in the document.
     *
     * @returns com.leansoft.fpml.nano.ResetDatesReference
	 */
	public ResetDatesReference getResetDatesReference() {
	    return this.resetDatesReference;
	}
	
	/**
	 * public setter
	 *
     * A pointer style reference to the associated reset dates component defined elsewhere in the document.
     *
     * @param com.leansoft.fpml.nano.ResetDatesReference
	 */
	public void setResetDatesReference(ResetDatesReference resetDatesReference) {
	    this.resetDatesReference = resetDatesReference;
	}
	/**
     * public getter
     *
     * The frequency at which regular payment dates occur. If the payment frequency is equal to the frequency defined in the calculation period dates component then one calculation period contributes to each payment amount. If the payment frequency is less frequent than the frequency defined in the calculation period dates component then more than one calculation period will contribute to e payment amount. A payment frequency more frequent than the calculation period frequency or one that is not a multiple of the calculation period frequency is invalid.
     *
     * @returns com.leansoft.fpml.nano.Interval
	 */
	public Interval getPaymentFrequency() {
	    return this.paymentFrequency;
	}
	
	/**
	 * public setter
	 *
     * The frequency at which regular payment dates occur. If the payment frequency is equal to the frequency defined in the calculation period dates component then one calculation period contributes to each payment amount. If the payment frequency is less frequent than the frequency defined in the calculation period dates component then more than one calculation period will contribute to e payment amount. A payment frequency more frequent than the calculation period frequency or one that is not a multiple of the calculation period frequency is invalid.
     *
     * @param com.leansoft.fpml.nano.Interval
	 */
	public void setPaymentFrequency(Interval paymentFrequency) {
	    this.paymentFrequency = paymentFrequency;
	}
	/**
     * public getter
     *
     * The first unadjusted payment date. This day may be subject to adjustment in accordance with any business day convention specified in paymentDatesAdjustments. This element must only be included if there is an initial stub. This date will normally correspond to an unadjusted calculation period start or end date. This is true even if early or delayed payment is specified to be applicable since the actual first payment date will be the specified number of days before or after the applicable adjusted calculation period start or end date with the resulting payment date then being adjusted in accordance with any business day convention specified in paymentDatesAdjustments.
     *
     * @returns java.util.Date
	 */
	public Date getFirstPaymentDate() {
	    return this.firstPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * The first unadjusted payment date. This day may be subject to adjustment in accordance with any business day convention specified in paymentDatesAdjustments. This element must only be included if there is an initial stub. This date will normally correspond to an unadjusted calculation period start or end date. This is true even if early or delayed payment is specified to be applicable since the actual first payment date will be the specified number of days before or after the applicable adjusted calculation period start or end date with the resulting payment date then being adjusted in accordance with any business day convention specified in paymentDatesAdjustments.
     *
     * @param java.util.Date
	 */
	public void setFirstPaymentDate(Date firstPaymentDate) {
	    this.firstPaymentDate = firstPaymentDate;
	}
	/**
     * public getter
     *
     * The last regular unadjusted payment date. This day may be subject to adjustment in accordance with any business day convention specified in paymentDatesAdjustments. This element must only be included if there is a final stub. All calculation periods after this date contribute to the final payment. The final payment is made relative to the final set of calculation periods or the final reset date as the case may be. This date will normally correspond to an unadjusted calculation period start or end date. This is true even if early or delayed payment is specified to be applicable since the actual last regular payment date will be the specified number of days before or after the applicable adjusted calculation period start or end date with the resulting payment date then being adjusted in accordance with any business day convention specified in paymentDatesAdjustments.
     *
     * @returns java.util.Date
	 */
	public Date getLastRegularPaymentDate() {
	    return this.lastRegularPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * The last regular unadjusted payment date. This day may be subject to adjustment in accordance with any business day convention specified in paymentDatesAdjustments. This element must only be included if there is a final stub. All calculation periods after this date contribute to the final payment. The final payment is made relative to the final set of calculation periods or the final reset date as the case may be. This date will normally correspond to an unadjusted calculation period start or end date. This is true even if early or delayed payment is specified to be applicable since the actual last regular payment date will be the specified number of days before or after the applicable adjusted calculation period start or end date with the resulting payment date then being adjusted in accordance with any business day convention specified in paymentDatesAdjustments.
     *
     * @param java.util.Date
	 */
	public void setLastRegularPaymentDate(Date lastRegularPaymentDate) {
	    this.lastRegularPaymentDate = lastRegularPaymentDate;
	}
	/**
     * public getter
     *
     * Specifies whether the payments occur relative to each adjusted calculation period start date, adjusted calculation period end date or each reset date. The reset date is applicable in the case of certain euro (former French Franc) floating rate indices. Calculation period start date means relative to the start of the first calculation period contributing to a given payment. Similarly, calculation period end date means the end of the last calculation period contributing to a given payment.
     *
     * @returns com.leansoft.fpml.nano.PayRelativeToEnum
	 */
	public PayRelativeToEnum getPayRelativeTo() {
	    return this.payRelativeTo;
	}
	
	/**
	 * public setter
	 *
     * Specifies whether the payments occur relative to each adjusted calculation period start date, adjusted calculation period end date or each reset date. The reset date is applicable in the case of certain euro (former French Franc) floating rate indices. Calculation period start date means relative to the start of the first calculation period contributing to a given payment. Similarly, calculation period end date means the end of the last calculation period contributing to a given payment.
     *
     * @param com.leansoft.fpml.nano.PayRelativeToEnum
	 */
	public void setPayRelativeTo(PayRelativeToEnum payRelativeTo) {
	    this.payRelativeTo = payRelativeTo;
	}
	/**
     * public getter
     *
     * If early payment or delayed payment is required, specifies the number of days offset that the payment occurs relative to what would otherwise be the unadjusted payment date. The offset can be specified in terms of either calendar or business days. Even in the case of a calendar days offset, the resulting payment date, adjusted for the specified calendar days offset, will still be adjusted in accordance with the specified payment dates adjustments. This element should only be included if early or delayed payment is applicable, i.e. if the periodMultiplier element value is not equal to zero. An early payment would be indicated by a negative periodMultiplier element value and a delayed payment (or payment lag) would be indicated by a positive periodMultiplier element value.
     *
     * @returns com.leansoft.fpml.nano.Offset
	 */
	public Offset getPaymentDaysOffset() {
	    return this.paymentDaysOffset;
	}
	
	/**
	 * public setter
	 *
     * If early payment or delayed payment is required, specifies the number of days offset that the payment occurs relative to what would otherwise be the unadjusted payment date. The offset can be specified in terms of either calendar or business days. Even in the case of a calendar days offset, the resulting payment date, adjusted for the specified calendar days offset, will still be adjusted in accordance with the specified payment dates adjustments. This element should only be included if early or delayed payment is applicable, i.e. if the periodMultiplier element value is not equal to zero. An early payment would be indicated by a negative periodMultiplier element value and a delayed payment (or payment lag) would be indicated by a positive periodMultiplier element value.
     *
     * @param com.leansoft.fpml.nano.Offset
	 */
	public void setPaymentDaysOffset(Offset paymentDaysOffset) {
	    this.paymentDaysOffset = paymentDaysOffset;
	}
	/**
     * public getter
     *
     * The business day convention to apply to each payment date if it would otherwise fall on a day that is not a business day in the specified financial business centers.
     *
     * @returns com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public BusinessDayAdjustments getPaymentDatesAdjustments() {
	    return this.paymentDatesAdjustments;
	}
	
	/**
	 * public setter
	 *
     * The business day convention to apply to each payment date if it would otherwise fall on a day that is not a business day in the specified financial business centers.
     *
     * @param com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public void setPaymentDatesAdjustments(BusinessDayAdjustments paymentDatesAdjustments) {
	    this.paymentDatesAdjustments = paymentDatesAdjustments;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}