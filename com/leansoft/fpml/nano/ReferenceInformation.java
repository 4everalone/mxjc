// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;

public class ReferenceInformation implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private LegalEntity referenceEntity;
	
	@Element
	private List<ReferenceObligation> referenceObligation;
	
	@Element
	private Empty noReferenceObligation;
	
	@Element
	private Empty unknownReferenceObligation;
	
	@Element
	private Boolean allGuarantees;
	
	@Element
	private BigDecimal referencePrice;
	
	@Element
	private Empty referencePolicy;
	
	@Element
	private Boolean securedList;
	
    
	/**
     * public getter
     *
     * The corporate or sovereign entity on which you are buying or selling protection and any successor that assumes all or substantially all of its contractual and other obligations. It is vital to use the correct legal name of the entity and to be careful not to choose a subsidiary if you really want to trade protection on a parent company. Please note, Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2003 Term: Reference Entity
     *
     * @returns com.leansoft.fpml.nano.LegalEntity
	 */
	public LegalEntity getReferenceEntity() {
	    return this.referenceEntity;
	}
	
	/**
	 * public setter
	 *
     * The corporate or sovereign entity on which you are buying or selling protection and any successor that assumes all or substantially all of its contractual and other obligations. It is vital to use the correct legal name of the entity and to be careful not to choose a subsidiary if you really want to trade protection on a parent company. Please note, Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2003 Term: Reference Entity
     *
     * @param com.leansoft.fpml.nano.LegalEntity
	 */
	public void setReferenceEntity(LegalEntity referenceEntity) {
	    this.referenceEntity = referenceEntity;
	}
	/**
     * public getter
     *
     * The Reference Obligation is a financial instrument that is either issued or guaranteed by the reference entity. It serves to clarify the precise reference entity protection is being offered upon, and its legal position with regard to other related firms (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable and establishes the Pari Passu ranking (as the deliverable bonds must rank equal to the reference obligation). ISDA 2003 Term: Reference Obligation
     *
     * @returns java.util.List<com.leansoft.fpml.nano.ReferenceObligation>
	 */
	public List<ReferenceObligation> getReferenceObligation() {
	    return this.referenceObligation;
	}
	
	/**
	 * public setter
	 *
     * The Reference Obligation is a financial instrument that is either issued or guaranteed by the reference entity. It serves to clarify the precise reference entity protection is being offered upon, and its legal position with regard to other related firms (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable and establishes the Pari Passu ranking (as the deliverable bonds must rank equal to the reference obligation). ISDA 2003 Term: Reference Obligation
     *
     * @param java.util.List<com.leansoft.fpml.nano.ReferenceObligation>
	 */
	public void setReferenceObligation(List<ReferenceObligation> referenceObligation) {
	    this.referenceObligation = referenceObligation;
	}
	/**
     * public getter
     *
     * Used to indicate that there is no Reference Obligation associated with this Credit Default Swap and that there will never be one.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getNoReferenceObligation() {
	    return this.noReferenceObligation;
	}
	
	/**
	 * public setter
	 *
     * Used to indicate that there is no Reference Obligation associated with this Credit Default Swap and that there will never be one.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setNoReferenceObligation(Empty noReferenceObligation) {
	    this.noReferenceObligation = noReferenceObligation;
	}
	/**
     * public getter
     *
     * Used to indicate that the Reference obligation associated with the Credit Default Swap is currently not known. This is not valid for Legal Confirmation purposes, but is valid for earlier stages in the trade life cycle (e.g. Broker Confirmation).
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getUnknownReferenceObligation() {
	    return this.unknownReferenceObligation;
	}
	
	/**
	 * public setter
	 *
     * Used to indicate that the Reference obligation associated with the Credit Default Swap is currently not known. This is not valid for Legal Confirmation purposes, but is valid for earlier stages in the trade life cycle (e.g. Broker Confirmation).
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setUnknownReferenceObligation(Empty unknownReferenceObligation) {
	    this.unknownReferenceObligation = unknownReferenceObligation;
	}
	/**
     * public getter
     *
     * Indicates whether an obligation of the Reference Entity, guaranteed by the Reference Entity on behalf of a non-Affiliate, is to be considered an Obligation for the purpose of the transaction. It will be considered an obligation if allGuarantees is applicable (true) and not if allGuarantees is inapplicable (false). ISDA 2003 Term: All Guarantees
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAllGuarantees() {
	    return this.allGuarantees;
	}
	
	/**
	 * public setter
	 *
     * Indicates whether an obligation of the Reference Entity, guaranteed by the Reference Entity on behalf of a non-Affiliate, is to be considered an Obligation for the purpose of the transaction. It will be considered an obligation if allGuarantees is applicable (true) and not if allGuarantees is inapplicable (false). ISDA 2003 Term: All Guarantees
     *
     * @param java.lang.Boolean
	 */
	public void setAllGuarantees(Boolean allGuarantees) {
	    this.allGuarantees = allGuarantees;
	}
	/**
     * public getter
     *
     * Used to determine (a) for physically settled trades, the Physical Settlement Amount, which equals the Floating Rate Payer Calculation Amount times the Reference Price and (b) for cash settled trades, the Cash Settlement Amount, which equals the greater of (i) the difference between the Reference Price and the Final Price and (ii) zero. ISDA 2003 Term: Reference Price
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getReferencePrice() {
	    return this.referencePrice;
	}
	
	/**
	 * public setter
	 *
     * Used to determine (a) for physically settled trades, the Physical Settlement Amount, which equals the Floating Rate Payer Calculation Amount times the Reference Price and (b) for cash settled trades, the Cash Settlement Amount, which equals the greater of (i) the difference between the Reference Price and the Final Price and (ii) zero. ISDA 2003 Term: Reference Price
     *
     * @param java.math.BigDecimal
	 */
	public void setReferencePrice(BigDecimal referencePrice) {
	    this.referencePrice = referencePrice;
	}
	/**
     * public getter
     *
     * Applicable to the transactions on mortgage-backed security, which can make use of a reference policy. Presence of the element indicates that the reference policy is applicable; absence implies that it is not.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getReferencePolicy() {
	    return this.referencePolicy;
	}
	
	/**
	 * public setter
	 *
     * Applicable to the transactions on mortgage-backed security, which can make use of a reference policy. Presence of the element indicates that the reference policy is applicable; absence implies that it is not.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setReferencePolicy(Empty referencePolicy) {
	    this.referencePolicy = referencePolicy;
	}
	/**
     * public getter
     *
     * With respect to any day, the list of Syndicated Secured Obligations of the Designated Priority of the Reference Entity published by Markit Group Limited or any successor thereto appointed by the Specified Dealers (the "Secured List Publisher") on or most recently before such day, which list is currently available at [http://www.markit.com]. ISDA 2003 Term: Relevant Secured List.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getSecuredList() {
	    return this.securedList;
	}
	
	/**
	 * public setter
	 *
     * With respect to any day, the list of Syndicated Secured Obligations of the Designated Priority of the Reference Entity published by Markit Group Limited or any successor thereto appointed by the Specified Dealers (the "Secured List Publisher") on or most recently before such day, which list is currently available at [http://www.markit.com]. ISDA 2003 Term: Relevant Secured List.
     *
     * @param java.lang.Boolean
	 */
	public void setSecuredList(Boolean securedList) {
	    this.securedList = securedList;
	}

}