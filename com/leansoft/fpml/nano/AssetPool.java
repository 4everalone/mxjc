// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;
import java.math.BigDecimal;

/**
 * Characterise the asset pool behind an asset backed bond.
 */
public class AssetPool implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BigInteger version;
	
	@Element
	private IdentifiedDate effectiveDate;
	
	@Element
	private BigDecimal initialFactor;
	
	@Element
	private BigDecimal currentFactor;
	
    
	/**
     * public getter
     *
     * The version number
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getVersion() {
	    return this.version;
	}
	
	/**
	 * public setter
	 *
     * The version number
     *
     * @param java.math.BigInteger
	 */
	public void setVersion(BigInteger version) {
	    this.version = version;
	}
	/**
     * public getter
     *
     * Optionally it is possible to specify a version effective date when a versionId is supplied.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getEffectiveDate() {
	    return this.effectiveDate;
	}
	
	/**
	 * public setter
	 *
     * Optionally it is possible to specify a version effective date when a versionId is supplied.
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setEffectiveDate(IdentifiedDate effectiveDate) {
	    this.effectiveDate = effectiveDate;
	}
	/**
     * public getter
     *
     * The part of the mortgage that is outstanding on trade inception, i.e. has not been repaid yet as principal. It is expressed as a multiplier factor to the morgage: 1 means that the whole mortage amount is outstanding, 0.8 means that 20% has been repaid.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getInitialFactor() {
	    return this.initialFactor;
	}
	
	/**
	 * public setter
	 *
     * The part of the mortgage that is outstanding on trade inception, i.e. has not been repaid yet as principal. It is expressed as a multiplier factor to the morgage: 1 means that the whole mortage amount is outstanding, 0.8 means that 20% has been repaid.
     *
     * @param java.math.BigDecimal
	 */
	public void setInitialFactor(BigDecimal initialFactor) {
	    this.initialFactor = initialFactor;
	}
	/**
     * public getter
     *
     * The part of the mortgage that is currently outstanding. It is expressed similarly to the initial factor, as factor multiplier to the mortgage. This term is formally defined as part of the "ISDA Standard Terms Supplement for use with credit derivatives transactions on mortgage-backed security with pas-as-you-go or physical settlement".
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getCurrentFactor() {
	    return this.currentFactor;
	}
	
	/**
	 * public setter
	 *
     * The part of the mortgage that is currently outstanding. It is expressed similarly to the initial factor, as factor multiplier to the mortgage. This term is formally defined as part of the "ISDA Standard Terms Supplement for use with credit derivatives transactions on mortgage-backed security with pas-as-you-go or physical settlement".
     *
     * @param java.math.BigDecimal
	 */
	public void setCurrentFactor(BigDecimal currentFactor) {
	    this.currentFactor = currentFactor;
	}

}