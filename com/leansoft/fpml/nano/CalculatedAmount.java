// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * An abstract base class for all calculated money amounts, which are in the currency of the cash multiplier of the calculation.
 */
public abstract class CalculatedAmount implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private AdjustableRelativeOrPeriodicDates calculationDates;
	
	@Element
	private AdjustableOrRelativeDate observationStartDate;
	
	@Element
	private Boolean optionsExchangeDividends;
	
	@Element
	private Boolean additionalDividends;
	
	@Element
	private Boolean allDividends;
	
    
	/**
     * public getter
     *
     * Specifies the date on which a calculation or an observation will be performed for the purpose of calculating the amount.
     *
     * @returns com.leansoft.fpml.nano.AdjustableRelativeOrPeriodicDates
	 */
	public AdjustableRelativeOrPeriodicDates getCalculationDates() {
	    return this.calculationDates;
	}
	
	/**
	 * public setter
	 *
     * Specifies the date on which a calculation or an observation will be performed for the purpose of calculating the amount.
     *
     * @param com.leansoft.fpml.nano.AdjustableRelativeOrPeriodicDates
	 */
	public void setCalculationDates(AdjustableRelativeOrPeriodicDates calculationDates) {
	    this.calculationDates = calculationDates;
	}
	/**
     * public getter
     *
     * The start of the period over which observations are made which are used in the calculation Used when the observation start date differs from the trade date such as for forward starting swaps.
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getObservationStartDate() {
	    return this.observationStartDate;
	}
	
	/**
	 * public setter
	 *
     * The start of the period over which observations are made which are used in the calculation Used when the observation start date differs from the trade date such as for forward starting swaps.
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setObservationStartDate(AdjustableOrRelativeDate observationStartDate) {
	    this.observationStartDate = observationStartDate;
	}
	/**
     * public getter
     *
     * If present and true, then options exchange dividends are applicable.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getOptionsExchangeDividends() {
	    return this.optionsExchangeDividends;
	}
	
	/**
	 * public setter
	 *
     * If present and true, then options exchange dividends are applicable.
     *
     * @param java.lang.Boolean
	 */
	public void setOptionsExchangeDividends(Boolean optionsExchangeDividends) {
	    this.optionsExchangeDividends = optionsExchangeDividends;
	}
	/**
     * public getter
     *
     * If present and true, then additional dividends are applicable.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAdditionalDividends() {
	    return this.additionalDividends;
	}
	
	/**
	 * public setter
	 *
     * If present and true, then additional dividends are applicable.
     *
     * @param java.lang.Boolean
	 */
	public void setAdditionalDividends(Boolean additionalDividends) {
	    this.additionalDividends = additionalDividends;
	}
	/**
     * public getter
     *
     * Represents the European Master Confirmation value of 'All Dividends' which, when applicable, signifies that, for a given Ex-Date, the daily observed Share Price for that day is adjusted (reduced) by the cash dividend and/or the cash value of any non cash dividend per Share (including Extraordinary Dividends) declared by the Issuer.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAllDividends() {
	    return this.allDividends;
	}
	
	/**
	 * public setter
	 *
     * Represents the European Master Confirmation value of 'All Dividends' which, when applicable, signifies that, for a given Ex-Date, the daily observed Share Price for that day is adjusted (reduced) by the cash dividend and/or the cash value of any non cash dividend per Share (including Extraordinary Dividends) declared by the Issuer.
     *
     * @param java.lang.Boolean
	 */
	public void setAllDividends(Boolean allDividends) {
	    this.allDividends = allDividends;
	}

}