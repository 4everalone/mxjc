// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * A type describing return swaps including equity swaps (long form), total return swaps, and variance swaps.
 */
@RootElement(name = "returnSwap", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class ReturnSwap extends ReturnSwapBase implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private List<ReturnSwapAdditionalPayment> additionalPayment;
	
	@Element
	private List<ReturnSwapEarlyTermination> earlyTermination;
	
	@Element
	private ExtraordinaryEvents extraordinaryEvents;
	
    
	/**
     * public getter
     *
     * Specifies additional payment(s) between the principal parties to the trade. This component extends some of the features of the additionalPayment component developed by the FpML industry group. Appropriate discussions will determine whether it would be appropriate to extend the shared component in order to meet the further requirements of equity swaps.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.ReturnSwapAdditionalPayment>
	 */
	public List<ReturnSwapAdditionalPayment> getAdditionalPayment() {
	    return this.additionalPayment;
	}
	
	/**
	 * public setter
	 *
     * Specifies additional payment(s) between the principal parties to the trade. This component extends some of the features of the additionalPayment component developed by the FpML industry group. Appropriate discussions will determine whether it would be appropriate to extend the shared component in order to meet the further requirements of equity swaps.
     *
     * @param java.util.List<com.leansoft.fpml.nano.ReturnSwapAdditionalPayment>
	 */
	public void setAdditionalPayment(List<ReturnSwapAdditionalPayment> additionalPayment) {
	    this.additionalPayment = additionalPayment;
	}
	/**
     * public getter
     *
     * Specifies, for one or for both the parties to the trade, the date from which it can early terminate it.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.ReturnSwapEarlyTermination>
	 */
	public List<ReturnSwapEarlyTermination> getEarlyTermination() {
	    return this.earlyTermination;
	}
	
	/**
	 * public setter
	 *
     * Specifies, for one or for both the parties to the trade, the date from which it can early terminate it.
     *
     * @param java.util.List<com.leansoft.fpml.nano.ReturnSwapEarlyTermination>
	 */
	public void setEarlyTermination(List<ReturnSwapEarlyTermination> earlyTermination) {
	    this.earlyTermination = earlyTermination;
	}
	/**
     * public getter
     *
     * Where the underlying is shares, specifies events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.
     *
     * @returns com.leansoft.fpml.nano.ExtraordinaryEvents
	 */
	public ExtraordinaryEvents getExtraordinaryEvents() {
	    return this.extraordinaryEvents;
	}
	
	/**
	 * public setter
	 *
     * Where the underlying is shares, specifies events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.
     *
     * @param com.leansoft.fpml.nano.ExtraordinaryEvents
	 */
	public void setExtraordinaryEvents(ExtraordinaryEvents extraordinaryEvents) {
	    this.extraordinaryEvents = extraordinaryEvents;
	}

}