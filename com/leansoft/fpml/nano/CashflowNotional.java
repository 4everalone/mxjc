// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * The notional/principal value/quantity/volume used to compute the cashflow.
 */
public class CashflowNotional implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Currency currency;
	
	@Element
	private String units;
	
	@Element
	private BigDecimal amount;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * The currency in which an amount is denominated.
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getCurrency() {
	    return this.currency;
	}
	
	/**
	 * public setter
	 *
     * The currency in which an amount is denominated.
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setCurrency(Currency currency) {
	    this.currency = currency;
	}
	/**
     * public getter
     *
     * The units in which an amount (not monetary) is denominated.
     *
     * @returns java.lang.String
	 */
	public String getUnits() {
	    return this.units;
	}
	
	/**
	 * public setter
	 *
     * The units in which an amount (not monetary) is denominated.
     *
     * @param java.lang.String
	 */
	public void setUnits(String units) {
	    this.units = units;
	}
	/**
     * public getter
     *
     * The quantity of notional (in currency or other units).
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getAmount() {
	    return this.amount;
	}
	
	/**
	 * public setter
	 *
     * The quantity of notional (in currency or other units).
     *
     * @param java.math.BigDecimal
	 */
	public void setAmount(BigDecimal amount) {
	    this.amount = amount;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}