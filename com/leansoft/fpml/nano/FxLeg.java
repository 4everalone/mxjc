// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * A type that represents a single exchange of one currency for another. This is used for representing FX spot, forward, and swap transactions.
 */
@RootElement(name = "fxSingleLeg", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class FxLeg extends Product implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Payment exchangedCurrency1;
	
	@Element
	private Payment exchangedCurrency2;
	
	@Element
	private Date valueDate;
	
	@Element
	private Date currency1ValueDate;
	
	@Element
	private Date currency2ValueDate;
	
	@Element
	private ExchangeRate exchangeRate;
	
	@Element
	private FxCashSettlement nonDeliverableForward;
	
	@Element
	private PartyReference confirmationSenderPartyReference;
	
    
	/**
     * public getter
     *
     * This is the first of the two currency flows that define a single leg of a standard foreign exchange transaction.
     *
     * @returns com.leansoft.fpml.nano.Payment
	 */
	public Payment getExchangedCurrency1() {
	    return this.exchangedCurrency1;
	}
	
	/**
	 * public setter
	 *
     * This is the first of the two currency flows that define a single leg of a standard foreign exchange transaction.
     *
     * @param com.leansoft.fpml.nano.Payment
	 */
	public void setExchangedCurrency1(Payment exchangedCurrency1) {
	    this.exchangedCurrency1 = exchangedCurrency1;
	}
	/**
     * public getter
     *
     * This is the second of the two currency flows that define a single leg of a standard foreign exchange transaction.
     *
     * @returns com.leansoft.fpml.nano.Payment
	 */
	public Payment getExchangedCurrency2() {
	    return this.exchangedCurrency2;
	}
	
	/**
	 * public setter
	 *
     * This is the second of the two currency flows that define a single leg of a standard foreign exchange transaction.
     *
     * @param com.leansoft.fpml.nano.Payment
	 */
	public void setExchangedCurrency2(Payment exchangedCurrency2) {
	    this.exchangedCurrency2 = exchangedCurrency2;
	}
	/**
     * public getter
     *
     * The date on which both currencies traded will settle.
     *
     * @returns java.util.Date
	 */
	public Date getValueDate() {
	    return this.valueDate;
	}
	
	/**
	 * public setter
	 *
     * The date on which both currencies traded will settle.
     *
     * @param java.util.Date
	 */
	public void setValueDate(Date valueDate) {
	    this.valueDate = valueDate;
	}
	/**
     * public getter
     *
     * The date on which the currency1 amount will be settled. To be used in a split value date scenario.
     *
     * @returns java.util.Date
	 */
	public Date getCurrency1ValueDate() {
	    return this.currency1ValueDate;
	}
	
	/**
	 * public setter
	 *
     * The date on which the currency1 amount will be settled. To be used in a split value date scenario.
     *
     * @param java.util.Date
	 */
	public void setCurrency1ValueDate(Date currency1ValueDate) {
	    this.currency1ValueDate = currency1ValueDate;
	}
	/**
     * public getter
     *
     * The date on which the currency2 amount will be settled. To be used in a split value date scenario.
     *
     * @returns java.util.Date
	 */
	public Date getCurrency2ValueDate() {
	    return this.currency2ValueDate;
	}
	
	/**
	 * public setter
	 *
     * The date on which the currency2 amount will be settled. To be used in a split value date scenario.
     *
     * @param java.util.Date
	 */
	public void setCurrency2ValueDate(Date currency2ValueDate) {
	    this.currency2ValueDate = currency2ValueDate;
	}
	/**
     * public getter
     *
     * The rate of exchange between the two currencies.
     *
     * @returns com.leansoft.fpml.nano.ExchangeRate
	 */
	public ExchangeRate getExchangeRate() {
	    return this.exchangeRate;
	}
	
	/**
	 * public setter
	 *
     * The rate of exchange between the two currencies.
     *
     * @param com.leansoft.fpml.nano.ExchangeRate
	 */
	public void setExchangeRate(ExchangeRate exchangeRate) {
	    this.exchangeRate = exchangeRate;
	}
	/**
     * public getter
     *
     * Used to describe a particular type of FX forward transaction that is settled in a single currency.
     *
     * @returns com.leansoft.fpml.nano.FxCashSettlement
	 */
	public FxCashSettlement getNonDeliverableForward() {
	    return this.nonDeliverableForward;
	}
	
	/**
	 * public setter
	 *
     * Used to describe a particular type of FX forward transaction that is settled in a single currency.
     *
     * @param com.leansoft.fpml.nano.FxCashSettlement
	 */
	public void setNonDeliverableForward(FxCashSettlement nonDeliverableForward) {
	    this.nonDeliverableForward = nonDeliverableForward;
	}
	/**
     * public getter
     *
     * A reference to the party that is sending the current document as a confirmation of the trade.
     *
     * @returns com.leansoft.fpml.nano.PartyReference
	 */
	public PartyReference getConfirmationSenderPartyReference() {
	    return this.confirmationSenderPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that is sending the current document as a confirmation of the trade.
     *
     * @param com.leansoft.fpml.nano.PartyReference
	 */
	public void setConfirmationSenderPartyReference(PartyReference confirmationSenderPartyReference) {
	    this.confirmationSenderPartyReference = confirmationSenderPartyReference;
	}

}