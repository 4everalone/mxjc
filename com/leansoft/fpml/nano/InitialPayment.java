// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

public class InitialPayment implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrAccountReference payerPartyReference;
	
	@Element
	private PartyOrAccountReference receiverPartyReference;
	
	@Element
	private Date adjustablePaymentDate;
	
	@Element
	private Date adjustedPaymentDate;
	
	@Element
	private Money paymentAmount;
	
    
	/**
     * public getter
     *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getPayerPartyReference() {
	    return this.payerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setPayerPartyReference(PartyOrAccountReference payerPartyReference) {
	    this.payerPartyReference = payerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getReceiverPartyReference() {
	    return this.receiverPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setReceiverPartyReference(PartyOrAccountReference receiverPartyReference) {
	    this.receiverPartyReference = receiverPartyReference;
	}
	/**
     * public getter
     *
     * A fixed payment date that shall be subject to adjustment in accordance with the applicable business day convention if it would otherwise fall on a day that is not a business day. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component.
     *
     * @returns java.util.Date
	 */
	public Date getAdjustablePaymentDate() {
	    return this.adjustablePaymentDate;
	}
	
	/**
	 * public setter
	 *
     * A fixed payment date that shall be subject to adjustment in accordance with the applicable business day convention if it would otherwise fall on a day that is not a business day. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component.
     *
     * @param java.util.Date
	 */
	public void setAdjustablePaymentDate(Date adjustablePaymentDate) {
	    this.adjustablePaymentDate = adjustablePaymentDate;
	}
	/**
     * public getter
     *
     * The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component.
     *
     * @returns java.util.Date
	 */
	public Date getAdjustedPaymentDate() {
	    return this.adjustedPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component.
     *
     * @param java.util.Date
	 */
	public void setAdjustedPaymentDate(Date adjustedPaymentDate) {
	    this.adjustedPaymentDate = adjustedPaymentDate;
	}
	/**
     * public getter
     *
     * A fixed payment amount.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPaymentAmount() {
	    return this.paymentAmount;
	}
	
	/**
	 * public setter
	 *
     * A fixed payment amount.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPaymentAmount(Money paymentAmount) {
	    this.paymentAmount = paymentAmount;
	}

}