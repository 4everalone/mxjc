// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * This type represents a CDS Tranche.
 */
@RootElement(name = "tranche", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class Tranche implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BigDecimal attachmentPoint;
	
	@Element
	private BigDecimal exhaustionPoint;
	
	@Element
	private Boolean incurredRecoveryApplicable;
	
    
	/**
     * public getter
     *
     * Lower bound percentage of the loss that the Tranche can endure, expressed as a decimal. An attachment point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche. A schema facet to constraint the value between 0 to 1 will be introduced in FpML 4.3.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getAttachmentPoint() {
	    return this.attachmentPoint;
	}
	
	/**
	 * public setter
	 *
     * Lower bound percentage of the loss that the Tranche can endure, expressed as a decimal. An attachment point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche. A schema facet to constraint the value between 0 to 1 will be introduced in FpML 4.3.
     *
     * @param java.math.BigDecimal
	 */
	public void setAttachmentPoint(BigDecimal attachmentPoint) {
	    this.attachmentPoint = attachmentPoint;
	}
	/**
     * public getter
     *
     * Upper bound percentage of the loss that the Tranche can endure, expressed as a decimal. An exhaustion point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche. A schema facet to constraint the value between 0 to 1 will be introduced in FpML 4.3.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getExhaustionPoint() {
	    return this.exhaustionPoint;
	}
	
	/**
	 * public setter
	 *
     * Upper bound percentage of the loss that the Tranche can endure, expressed as a decimal. An exhaustion point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche. A schema facet to constraint the value between 0 to 1 will be introduced in FpML 4.3.
     *
     * @param java.math.BigDecimal
	 */
	public void setExhaustionPoint(BigDecimal exhaustionPoint) {
	    this.exhaustionPoint = exhaustionPoint;
	}
	/**
     * public getter
     *
     * Outstanding Swap Notional Amount is defined at any time on any day, as the greater of: (a) Zero; If Incurred Recovery Amount Applicable: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts and all Incurred Recovery Amounts (if any) determined under this Confirmation at or prior to such time.Incurred Recovery Amount not populated: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts determined under this Confirmation at or prior to such time.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIncurredRecoveryApplicable() {
	    return this.incurredRecoveryApplicable;
	}
	
	/**
	 * public setter
	 *
     * Outstanding Swap Notional Amount is defined at any time on any day, as the greater of: (a) Zero; If Incurred Recovery Amount Applicable: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts and all Incurred Recovery Amounts (if any) determined under this Confirmation at or prior to such time.Incurred Recovery Amount not populated: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts determined under this Confirmation at or prior to such time.
     *
     * @param java.lang.Boolean
	 */
	public void setIncurredRecoveryApplicable(Boolean incurredRecoveryApplicable) {
	    this.incurredRecoveryApplicable = incurredRecoveryApplicable;
	}

}