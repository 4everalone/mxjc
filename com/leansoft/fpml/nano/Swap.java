// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * A type defining swap streams and additional payments between the principal parties involved in the swap.
 */
@RootElement(name = "swap", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class Swap extends Product implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private List<InterestRateStream> swapStream;
	
	@Element
	private EarlyTerminationProvision earlyTerminationProvision;
	
	@Element
	private CancelableProvision cancelableProvision;
	
	@Element
	private ExtendibleProvision extendibleProvision;
	
	@Element
	private List<Payment> additionalPayment;
	
	@Element
	private SwapAdditionalTerms additionalTerms;
	
    
	/**
     * public getter
     *
     * The swap streams.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.InterestRateStream>
	 */
	public List<InterestRateStream> getSwapStream() {
	    return this.swapStream;
	}
	
	/**
	 * public setter
	 *
     * The swap streams.
     *
     * @param java.util.List<com.leansoft.fpml.nano.InterestRateStream>
	 */
	public void setSwapStream(List<InterestRateStream> swapStream) {
	    this.swapStream = swapStream;
	}
	/**
     * public getter
     *
     * Parameters specifying provisions relating to the optional and mandatory early terminarion of a swap transaction.
     *
     * @returns com.leansoft.fpml.nano.EarlyTerminationProvision
	 */
	public EarlyTerminationProvision getEarlyTerminationProvision() {
	    return this.earlyTerminationProvision;
	}
	
	/**
	 * public setter
	 *
     * Parameters specifying provisions relating to the optional and mandatory early terminarion of a swap transaction.
     *
     * @param com.leansoft.fpml.nano.EarlyTerminationProvision
	 */
	public void setEarlyTerminationProvision(EarlyTerminationProvision earlyTerminationProvision) {
	    this.earlyTerminationProvision = earlyTerminationProvision;
	}
	/**
     * public getter
     *
     * A provision that allows the specification of an embedded option within a swap giving the buyer of the option the right to terminate the swap, in whole or in part, on the early termination date.
     *
     * @returns com.leansoft.fpml.nano.CancelableProvision
	 */
	public CancelableProvision getCancelableProvision() {
	    return this.cancelableProvision;
	}
	
	/**
	 * public setter
	 *
     * A provision that allows the specification of an embedded option within a swap giving the buyer of the option the right to terminate the swap, in whole or in part, on the early termination date.
     *
     * @param com.leansoft.fpml.nano.CancelableProvision
	 */
	public void setCancelableProvision(CancelableProvision cancelableProvision) {
	    this.cancelableProvision = cancelableProvision;
	}
	/**
     * public getter
     *
     * A provision that allows the specification of an embedded option with a swap giving the buyer of the option the right to extend the swap, in whole or in part, to the extended termination date.
     *
     * @returns com.leansoft.fpml.nano.ExtendibleProvision
	 */
	public ExtendibleProvision getExtendibleProvision() {
	    return this.extendibleProvision;
	}
	
	/**
	 * public setter
	 *
     * A provision that allows the specification of an embedded option with a swap giving the buyer of the option the right to extend the swap, in whole or in part, to the extended termination date.
     *
     * @param com.leansoft.fpml.nano.ExtendibleProvision
	 */
	public void setExtendibleProvision(ExtendibleProvision extendibleProvision) {
	    this.extendibleProvision = extendibleProvision;
	}
	/**
     * public getter
     *
     * Additional payments between the principal parties.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Payment>
	 */
	public List<Payment> getAdditionalPayment() {
	    return this.additionalPayment;
	}
	
	/**
	 * public setter
	 *
     * Additional payments between the principal parties.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Payment>
	 */
	public void setAdditionalPayment(List<Payment> additionalPayment) {
	    this.additionalPayment = additionalPayment;
	}
	/**
     * public getter
     *
     * Contains any additional terms to the swap contract.
     *
     * @returns com.leansoft.fpml.nano.SwapAdditionalTerms
	 */
	public SwapAdditionalTerms getAdditionalTerms() {
	    return this.additionalTerms;
	}
	
	/**
	 * public setter
	 *
     * Contains any additional terms to the swap contract.
     *
     * @param com.leansoft.fpml.nano.SwapAdditionalTerms
	 */
	public void setAdditionalTerms(SwapAdditionalTerms additionalTerms) {
	    this.additionalTerms = additionalTerms;
	}

}