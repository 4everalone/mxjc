// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type for defining a premium.
 */
public class Premium extends SimplePayment implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PremiumTypeEnum premiumType;
	
	@Element
	private Money pricePerOption;
	
	@Element
	private BigDecimal percentageOfNotional;
	
	@Element
	private BigDecimal discountFactor;
	
	@Element
	private Money presentValueAmount;
	
    
	/**
     * public getter
     *
     * Forward start Premium type
     *
     * @returns com.leansoft.fpml.nano.PremiumTypeEnum
	 */
	public PremiumTypeEnum getPremiumType() {
	    return this.premiumType;
	}
	
	/**
	 * public setter
	 *
     * Forward start Premium type
     *
     * @param com.leansoft.fpml.nano.PremiumTypeEnum
	 */
	public void setPremiumType(PremiumTypeEnum premiumType) {
	    this.premiumType = premiumType;
	}
	/**
     * public getter
     *
     * The amount of premium to be paid expressed as a function of the number of options.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPricePerOption() {
	    return this.pricePerOption;
	}
	
	/**
	 * public setter
	 *
     * The amount of premium to be paid expressed as a function of the number of options.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPricePerOption(Money pricePerOption) {
	    this.pricePerOption = pricePerOption;
	}
	/**
     * public getter
     *
     * The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getPercentageOfNotional() {
	    return this.percentageOfNotional;
	}
	
	/**
	 * public setter
	 *
     * The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setPercentageOfNotional(BigDecimal percentageOfNotional) {
	    this.percentageOfNotional = percentageOfNotional;
	}
	/**
     * public getter
     *
     * The value representing the discount factor used to calculate the present value of the cash flow.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getDiscountFactor() {
	    return this.discountFactor;
	}
	
	/**
	 * public setter
	 *
     * The value representing the discount factor used to calculate the present value of the cash flow.
     *
     * @param java.math.BigDecimal
	 */
	public void setDiscountFactor(BigDecimal discountFactor) {
	    this.discountFactor = discountFactor;
	}
	/**
     * public getter
     *
     * The amount representing the present value of the forecast payment.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPresentValueAmount() {
	    return this.presentValueAmount;
	}
	
	/**
	 * public setter
	 *
     * The amount representing the present value of the forecast payment.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPresentValueAmount(Money presentValueAmount) {
	    this.presentValueAmount = presentValueAmount;
	}

}