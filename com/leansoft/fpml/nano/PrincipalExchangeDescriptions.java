// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * Specifies each of the characteristics of the principal exchange cashflows, in terms of paying/receiving counterparties, amounts and dates.
 */
public class PrincipalExchangeDescriptions implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrAccountReference payerPartyReference;
	
	@Element
	private PartyOrAccountReference receiverPartyReference;
	
	@Element
	private PrincipalExchangeAmount principalExchangeAmount;
	
	@Element
	private AdjustableOrRelativeDate principalExchangeDate;
	
    
	/**
     * public getter
     *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getPayerPartyReference() {
	    return this.payerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setPayerPartyReference(PartyOrAccountReference payerPartyReference) {
	    this.payerPartyReference = payerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getReceiverPartyReference() {
	    return this.receiverPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setReceiverPartyReference(PartyOrAccountReference receiverPartyReference) {
	    this.receiverPartyReference = receiverPartyReference;
	}
	/**
     * public getter
     *
     * Specifies the principal echange amount, either by explicitly defining it, or by point to an amount defined somewhere else in the swap document.
     *
     * @returns com.leansoft.fpml.nano.PrincipalExchangeAmount
	 */
	public PrincipalExchangeAmount getPrincipalExchangeAmount() {
	    return this.principalExchangeAmount;
	}
	
	/**
	 * public setter
	 *
     * Specifies the principal echange amount, either by explicitly defining it, or by point to an amount defined somewhere else in the swap document.
     *
     * @param com.leansoft.fpml.nano.PrincipalExchangeAmount
	 */
	public void setPrincipalExchangeAmount(PrincipalExchangeAmount principalExchangeAmount) {
	    this.principalExchangeAmount = principalExchangeAmount;
	}
	/**
     * public getter
     *
     * Date on which each of the principal exchanges will take place. This date is either explictly stated, or is defined by reference to another date in the swap document. In this latter case, it will typically refer to one other date of the equity leg: either the effective date (initial exchange), or the last payment date (final exchange).
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getPrincipalExchangeDate() {
	    return this.principalExchangeDate;
	}
	
	/**
	 * public setter
	 *
     * Date on which each of the principal exchanges will take place. This date is either explictly stated, or is defined by reference to another date in the swap document. In this latter case, it will typically refer to one other date of the equity leg: either the effective date (initial exchange), or the last payment date (final exchange).
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setPrincipalExchangeDate(AdjustableOrRelativeDate principalExchangeDate) {
	    this.principalExchangeDate = principalExchangeDate;
	}

}