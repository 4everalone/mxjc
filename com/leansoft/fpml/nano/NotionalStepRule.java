// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A type defining a parametric representation of the notional step schedule, i.e. parameters used to generate the notional balance on each step date. The step change in notional can be expressed in terms of either a fixed amount or as a percentage of either the initial notional or previous notional amount. This parametric representation is intended to cover the more common amortizing/accreting.
 */
public class NotionalStepRule implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private CalculationPeriodDatesReference calculationPeriodDatesReference;
	
	@Element
	private Interval stepFrequency;
	
	@Element
	private Date firstNotionalStepDate;
	
	@Element
	private Date lastNotionalStepDate;
	
	@Element
	private BigDecimal notionalStepAmount;
	
	@Element
	private BigDecimal notionalStepRate;
	
	@Element
	private StepRelativeToEnum stepRelativeTo;
	
    
	/**
     * public getter
     *
     * A pointer style reference to the associated calculation period dates component defined elsewhere in the document.
     *
     * @returns com.leansoft.fpml.nano.CalculationPeriodDatesReference
	 */
	public CalculationPeriodDatesReference getCalculationPeriodDatesReference() {
	    return this.calculationPeriodDatesReference;
	}
	
	/**
	 * public setter
	 *
     * A pointer style reference to the associated calculation period dates component defined elsewhere in the document.
     *
     * @param com.leansoft.fpml.nano.CalculationPeriodDatesReference
	 */
	public void setCalculationPeriodDatesReference(CalculationPeriodDatesReference calculationPeriodDatesReference) {
	    this.calculationPeriodDatesReference = calculationPeriodDatesReference;
	}
	/**
     * public getter
     *
     * The frequency at which the step changes occur. This frequency must be a multiple of the stream calculation period frequency.
     *
     * @returns com.leansoft.fpml.nano.Interval
	 */
	public Interval getStepFrequency() {
	    return this.stepFrequency;
	}
	
	/**
	 * public setter
	 *
     * The frequency at which the step changes occur. This frequency must be a multiple of the stream calculation period frequency.
     *
     * @param com.leansoft.fpml.nano.Interval
	 */
	public void setStepFrequency(Interval stepFrequency) {
	    this.stepFrequency = stepFrequency;
	}
	/**
     * public getter
     *
     * Effective date of the first change in notional (i.e. a calculation period start date).
     *
     * @returns java.util.Date
	 */
	public Date getFirstNotionalStepDate() {
	    return this.firstNotionalStepDate;
	}
	
	/**
	 * public setter
	 *
     * Effective date of the first change in notional (i.e. a calculation period start date).
     *
     * @param java.util.Date
	 */
	public void setFirstNotionalStepDate(Date firstNotionalStepDate) {
	    this.firstNotionalStepDate = firstNotionalStepDate;
	}
	/**
     * public getter
     *
     * Effective date of the last change in notional (i.e. a calculation period start date).
     *
     * @returns java.util.Date
	 */
	public Date getLastNotionalStepDate() {
	    return this.lastNotionalStepDate;
	}
	
	/**
	 * public setter
	 *
     * Effective date of the last change in notional (i.e. a calculation period start date).
     *
     * @param java.util.Date
	 */
	public void setLastNotionalStepDate(Date lastNotionalStepDate) {
	    this.lastNotionalStepDate = lastNotionalStepDate;
	}
	/**
     * public getter
     *
     * The explicit amount that the notional changes on each step date. This can be a positive or negative amount.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getNotionalStepAmount() {
	    return this.notionalStepAmount;
	}
	
	/**
	 * public setter
	 *
     * The explicit amount that the notional changes on each step date. This can be a positive or negative amount.
     *
     * @param java.math.BigDecimal
	 */
	public void setNotionalStepAmount(BigDecimal notionalStepAmount) {
	    this.notionalStepAmount = notionalStepAmount;
	}
	/**
     * public getter
     *
     * The percentage amount by which the notional changes on each step date. The percentage is either a percentage applied to the initial notional amount or the previous outstanding notional, depending on the value of the element stepRelativeTo. The percentage can be either positive or negative. A percentage of 5% would be represented as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getNotionalStepRate() {
	    return this.notionalStepRate;
	}
	
	/**
	 * public setter
	 *
     * The percentage amount by which the notional changes on each step date. The percentage is either a percentage applied to the initial notional amount or the previous outstanding notional, depending on the value of the element stepRelativeTo. The percentage can be either positive or negative. A percentage of 5% would be represented as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setNotionalStepRate(BigDecimal notionalStepRate) {
	    this.notionalStepRate = notionalStepRate;
	}
	/**
     * public getter
     *
     * Specifies whether the notionalStepRate should be applied to the initial notional or the previous notional in order to calculate the notional step change amount.
     *
     * @returns com.leansoft.fpml.nano.StepRelativeToEnum
	 */
	public StepRelativeToEnum getStepRelativeTo() {
	    return this.stepRelativeTo;
	}
	
	/**
	 * public setter
	 *
     * Specifies whether the notionalStepRate should be applied to the initial notional or the previous notional in order to calculate the notional step change amount.
     *
     * @param com.leansoft.fpml.nano.StepRelativeToEnum
	 */
	public void setStepRelativeTo(StepRelativeToEnum stepRelativeTo) {
	    this.stepRelativeTo = stepRelativeTo;
	}

}