// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;

/**
 * The items (trades, trade references, holdings, other positions) that comprise this position. Currently a position may consist only of a single trade, a reference to a previously submitted position, or a reference to the trade. The choice structure is optional to allow extensions to be placed within this container.
 */
public class PositionConstituent implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Trade trade;
	
	@Element
	private BigInteger positionVersionReference;
	
	@Element
	private PartyTradeIdentifiers tradeReference;
	
    
	/**
     * public getter
     *
     * An element that allows the full details of the trade to be used as a mechanism for identifying the trade for which the post-trade event pertains.
     *
     * @returns com.leansoft.fpml.nano.Trade
	 */
	public Trade getTrade() {
	    return this.trade;
	}
	
	/**
	 * public setter
	 *
     * An element that allows the full details of the trade to be used as a mechanism for identifying the trade for which the post-trade event pertains.
     *
     * @param com.leansoft.fpml.nano.Trade
	 */
	public void setTrade(Trade trade) {
	    this.trade = trade;
	}
	/**
     * public getter
     *
     * A previously submitted version of the position.
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getPositionVersionReference() {
	    return this.positionVersionReference;
	}
	
	/**
	 * public setter
	 *
     * A previously submitted version of the position.
     *
     * @param java.math.BigInteger
	 */
	public void setPositionVersionReference(BigInteger positionVersionReference) {
	    this.positionVersionReference = positionVersionReference;
	}
	/**
     * public getter
     *
     * The trade reference identifier(s) allocated to the trade by the parties involved.
     *
     * @returns com.leansoft.fpml.nano.PartyTradeIdentifiers
	 */
	public PartyTradeIdentifiers getTradeReference() {
	    return this.tradeReference;
	}
	
	/**
	 * public setter
	 *
     * The trade reference identifier(s) allocated to the trade by the parties involved.
     *
     * @param com.leansoft.fpml.nano.PartyTradeIdentifiers
	 */
	public void setTradeReference(PartyTradeIdentifiers tradeReference) {
	    this.tradeReference = tradeReference;
	}

}