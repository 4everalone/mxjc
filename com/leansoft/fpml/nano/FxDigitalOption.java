// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A type that describes an option without a put/call component (and so no associated exercise), but with one or more trigger rates) Examples are "one-touch", "no-touch", and "double-no-touch" options. For a specified period the market rate is observed relative to the trigger rates, and on a trigger event a fixed payout may become due to the buyer of the option, or alternatively the option contract may be annulled.
 */
@RootElement(name = "fxDigitalOption", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class FxDigitalOption extends Product implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrTradeSideReference buyerPartyReference;
	
	@Element
	private PartyOrTradeSideReference sellerPartyReference;
	
	@Element
	private ExpiryDateTime expiryDateTime;
	
	@Element
	private List<FxOptionPremium> fxOptionPremium;
	
	@Element
	private Date valueDate;
	
	@Element
	private QuotedCurrencyPair quotedCurrencyPair;
	
	@Element
	private BigDecimal spotRate;
	
	@Element
	private List<FxEuropeanTrigger> fxEuropeanTrigger;
	
	@Element
	private List<FxAmericanTrigger> fxAmericanTrigger;
	
	@Element
	private FxOptionPayout triggerPayout;
	
    
	/**
     * public getter
     *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getBuyerPartyReference() {
	    return this.buyerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setBuyerPartyReference(PartyOrTradeSideReference buyerPartyReference) {
	    this.buyerPartyReference = buyerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getSellerPartyReference() {
	    return this.sellerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setSellerPartyReference(PartyOrTradeSideReference sellerPartyReference) {
	    this.sellerPartyReference = sellerPartyReference;
	}
	/**
     * public getter
     *
     * The date and time in a location of the option expiry. In the case of american options this is the latest possible expiry date and time.
     *
     * @returns com.leansoft.fpml.nano.ExpiryDateTime
	 */
	public ExpiryDateTime getExpiryDateTime() {
	    return this.expiryDateTime;
	}
	
	/**
	 * public setter
	 *
     * The date and time in a location of the option expiry. In the case of american options this is the latest possible expiry date and time.
     *
     * @param com.leansoft.fpml.nano.ExpiryDateTime
	 */
	public void setExpiryDateTime(ExpiryDateTime expiryDateTime) {
	    this.expiryDateTime = expiryDateTime;
	}
	/**
     * public getter
     *
     * Premium amount or premium installment amount for an option.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.FxOptionPremium>
	 */
	public List<FxOptionPremium> getFxOptionPremium() {
	    return this.fxOptionPremium;
	}
	
	/**
	 * public setter
	 *
     * Premium amount or premium installment amount for an option.
     *
     * @param java.util.List<com.leansoft.fpml.nano.FxOptionPremium>
	 */
	public void setFxOptionPremium(List<FxOptionPremium> fxOptionPremium) {
	    this.fxOptionPremium = fxOptionPremium;
	}
	/**
     * public getter
     *
     * The date on which both currencies traded will settle.
     *
     * @returns java.util.Date
	 */
	public Date getValueDate() {
	    return this.valueDate;
	}
	
	/**
	 * public setter
	 *
     * The date on which both currencies traded will settle.
     *
     * @param java.util.Date
	 */
	public void setValueDate(Date valueDate) {
	    this.valueDate = valueDate;
	}
	/**
     * public getter
     *
     * Defines the two currencies for an FX trade and the quotation relationship between the two currencies.
     *
     * @returns com.leansoft.fpml.nano.QuotedCurrencyPair
	 */
	public QuotedCurrencyPair getQuotedCurrencyPair() {
	    return this.quotedCurrencyPair;
	}
	
	/**
	 * public setter
	 *
     * Defines the two currencies for an FX trade and the quotation relationship between the two currencies.
     *
     * @param com.leansoft.fpml.nano.QuotedCurrencyPair
	 */
	public void setQuotedCurrencyPair(QuotedCurrencyPair quotedCurrencyPair) {
	    this.quotedCurrencyPair = quotedCurrencyPair;
	}
	/**
     * public getter
     *
     * An optional element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move "up" or "down" to be triggered.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getSpotRate() {
	    return this.spotRate;
	}
	
	/**
	 * public setter
	 *
     * An optional element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move "up" or "down" to be triggered.
     *
     * @param java.math.BigDecimal
	 */
	public void setSpotRate(BigDecimal spotRate) {
	    this.spotRate = spotRate;
	}
	/**
     * public getter
     *
     * A European trigger occurs if the trigger criteria are met, but these are valid (and an observation is made) only at the maturity of the option.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.FxEuropeanTrigger>
	 */
	public List<FxEuropeanTrigger> getFxEuropeanTrigger() {
	    return this.fxEuropeanTrigger;
	}
	
	/**
	 * public setter
	 *
     * A European trigger occurs if the trigger criteria are met, but these are valid (and an observation is made) only at the maturity of the option.
     *
     * @param java.util.List<com.leansoft.fpml.nano.FxEuropeanTrigger>
	 */
	public void setFxEuropeanTrigger(List<FxEuropeanTrigger> fxEuropeanTrigger) {
	    this.fxEuropeanTrigger = fxEuropeanTrigger;
	}
	/**
     * public getter
     *
     * An American trigger occurs if the trigger criteria are met at any time from the initiation to the maturity of the option.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.FxAmericanTrigger>
	 */
	public List<FxAmericanTrigger> getFxAmericanTrigger() {
	    return this.fxAmericanTrigger;
	}
	
	/**
	 * public setter
	 *
     * An American trigger occurs if the trigger criteria are met at any time from the initiation to the maturity of the option.
     *
     * @param java.util.List<com.leansoft.fpml.nano.FxAmericanTrigger>
	 */
	public void setFxAmericanTrigger(List<FxAmericanTrigger> fxAmericanTrigger) {
	    this.fxAmericanTrigger = fxAmericanTrigger;
	}
	/**
     * public getter
     *
     * The amount of currency which becomes payable if and when a trigger event occurs.
     *
     * @returns com.leansoft.fpml.nano.FxOptionPayout
	 */
	public FxOptionPayout getTriggerPayout() {
	    return this.triggerPayout;
	}
	
	/**
	 * public setter
	 *
     * The amount of currency which becomes payable if and when a trigger event occurs.
     *
     * @param com.leansoft.fpml.nano.FxOptionPayout
	 */
	public void setTriggerPayout(FxOptionPayout triggerPayout) {
	    this.triggerPayout = triggerPayout;
	}

}