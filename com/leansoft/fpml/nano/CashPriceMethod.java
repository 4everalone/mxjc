// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type defining the parameters necessary for each of the ISDA cash price methods for cash settlement.
 */
public class CashPriceMethod implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private CashSettlementReferenceBanks cashSettlementReferenceBanks;
	
	@Element
	private Currency cashSettlementCurrency;
	
	@Element
	private QuotationRateTypeEnum quotationRateType;
	
    
	/**
     * public getter
     *
     * A container for a set of reference institutions. These reference institutions may be called upon to provide rate quotations as part of the method to determine the applicable cash settlement amount. If institutions are not specified, it is assumed that reference institutions will be agreed between the parties on the exercise date, or in the case of swap transaction to which mandatory early termination is applicable, the cash settlement valuation date.
     *
     * @returns com.leansoft.fpml.nano.CashSettlementReferenceBanks
	 */
	public CashSettlementReferenceBanks getCashSettlementReferenceBanks() {
	    return this.cashSettlementReferenceBanks;
	}
	
	/**
	 * public setter
	 *
     * A container for a set of reference institutions. These reference institutions may be called upon to provide rate quotations as part of the method to determine the applicable cash settlement amount. If institutions are not specified, it is assumed that reference institutions will be agreed between the parties on the exercise date, or in the case of swap transaction to which mandatory early termination is applicable, the cash settlement valuation date.
     *
     * @param com.leansoft.fpml.nano.CashSettlementReferenceBanks
	 */
	public void setCashSettlementReferenceBanks(CashSettlementReferenceBanks cashSettlementReferenceBanks) {
	    this.cashSettlementReferenceBanks = cashSettlementReferenceBanks;
	}
	/**
     * public getter
     *
     * The currency in which the cash settlement amount will be calculated and settled.
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getCashSettlementCurrency() {
	    return this.cashSettlementCurrency;
	}
	
	/**
	 * public setter
	 *
     * The currency in which the cash settlement amount will be calculated and settled.
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setCashSettlementCurrency(Currency cashSettlementCurrency) {
	    this.cashSettlementCurrency = cashSettlementCurrency;
	}
	/**
     * public getter
     *
     * Which rate quote is to be observed, either Bid, Mid, Offer or Exercising Party Pays. The meaning of Exercising Party Pays is defined in the 2000 ISDA Definitions, Section 17.2. Certain Definitions Relating to Cash Settlement, paragraph (j)
     *
     * @returns com.leansoft.fpml.nano.QuotationRateTypeEnum
	 */
	public QuotationRateTypeEnum getQuotationRateType() {
	    return this.quotationRateType;
	}
	
	/**
	 * public setter
	 *
     * Which rate quote is to be observed, either Bid, Mid, Offer or Exercising Party Pays. The meaning of Exercising Party Pays is defined in the 2000 ISDA Definitions, Section 17.2. Certain Definitions Relating to Cash Settlement, paragraph (j)
     *
     * @param com.leansoft.fpml.nano.QuotationRateTypeEnum
	 */
	public void setQuotationRateType(QuotationRateTypeEnum quotationRateType) {
	    this.quotationRateType = quotationRateType;
	}

}