// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type defining the floating rate and definitions relating to the calculation of floating rate amounts.
 */
@RootElement(name = "floatingRateCalculation", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class FloatingRateCalculation extends FloatingRate implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BigDecimal initialRate;
	
	@Element
	private Rounding finalRateRounding;
	
	@Element
	private AveragingMethodEnum averagingMethod;
	
	@Element
	private NegativeInterestRateTreatmentEnum negativeInterestRateTreatment;
	
    
	/**
     * public getter
     *
     * The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getInitialRate() {
	    return this.initialRate;
	}
	
	/**
	 * public setter
	 *
     * The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setInitialRate(BigDecimal initialRate) {
	    this.initialRate = initialRate;
	}
	/**
     * public getter
     *
     * The rounding convention to apply to the final rate used in determination of a calculation period amount.
     *
     * @returns com.leansoft.fpml.nano.Rounding
	 */
	public Rounding getFinalRateRounding() {
	    return this.finalRateRounding;
	}
	
	/**
	 * public setter
	 *
     * The rounding convention to apply to the final rate used in determination of a calculation period amount.
     *
     * @param com.leansoft.fpml.nano.Rounding
	 */
	public void setFinalRateRounding(Rounding finalRateRounding) {
	    this.finalRateRounding = finalRateRounding;
	}
	/**
     * public getter
     *
     * If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies.
     *
     * @returns com.leansoft.fpml.nano.AveragingMethodEnum
	 */
	public AveragingMethodEnum getAveragingMethod() {
	    return this.averagingMethod;
	}
	
	/**
	 * public setter
	 *
     * If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies.
     *
     * @param com.leansoft.fpml.nano.AveragingMethodEnum
	 */
	public void setAveragingMethod(AveragingMethodEnum averagingMethod) {
	    this.averagingMethod = averagingMethod;
	}
	/**
     * public getter
     *
     * The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).
     *
     * @returns com.leansoft.fpml.nano.NegativeInterestRateTreatmentEnum
	 */
	public NegativeInterestRateTreatmentEnum getNegativeInterestRateTreatment() {
	    return this.negativeInterestRateTreatment;
	}
	
	/**
	 * public setter
	 *
     * The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).
     *
     * @param com.leansoft.fpml.nano.NegativeInterestRateTreatmentEnum
	 */
	public void setNegativeInterestRateTreatment(NegativeInterestRateTreatmentEnum negativeInterestRateTreatment) {
	    this.negativeInterestRateTreatment = negativeInterestRateTreatment;
	}

}