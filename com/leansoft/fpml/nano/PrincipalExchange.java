// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A type defining a principal exchange amount and adjusted exchange date. The type forms part of the cashflow representation of a swap stream.
 */
public class PrincipalExchange implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Date unadjustedPrincipalExchangeDate;
	
	@Element
	private Date adjustedPrincipalExchangeDate;
	
	@Element
	private BigDecimal principalExchangeAmount;
	
	@Element
	private BigDecimal discountFactor;
	
	@Element
	private Money presentValuePrincipalExchangeAmount;
	
	@Attribute  
	private String id;
	
    
	/**
	 * public getter
	 *
     * @returns java.util.Date
	 */
	public Date getUnadjustedPrincipalExchangeDate() {
	    return this.unadjustedPrincipalExchangeDate;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.Date
	 */
	public void setUnadjustedPrincipalExchangeDate(Date unadjustedPrincipalExchangeDate) {
	    this.unadjustedPrincipalExchangeDate = unadjustedPrincipalExchangeDate;
	}
	/**
     * public getter
     *
     * The principal exchange date. This date should already be adjusted for any applicable business day convention.
     *
     * @returns java.util.Date
	 */
	public Date getAdjustedPrincipalExchangeDate() {
	    return this.adjustedPrincipalExchangeDate;
	}
	
	/**
	 * public setter
	 *
     * The principal exchange date. This date should already be adjusted for any applicable business day convention.
     *
     * @param java.util.Date
	 */
	public void setAdjustedPrincipalExchangeDate(Date adjustedPrincipalExchangeDate) {
	    this.adjustedPrincipalExchangeDate = adjustedPrincipalExchangeDate;
	}
	/**
     * public getter
     *
     * The principal exchange amount. This amount should be positive if the stream payer is paying the exchange amount and signed negative if they are receiving it.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getPrincipalExchangeAmount() {
	    return this.principalExchangeAmount;
	}
	
	/**
	 * public setter
	 *
     * The principal exchange amount. This amount should be positive if the stream payer is paying the exchange amount and signed negative if they are receiving it.
     *
     * @param java.math.BigDecimal
	 */
	public void setPrincipalExchangeAmount(BigDecimal principalExchangeAmount) {
	    this.principalExchangeAmount = principalExchangeAmount;
	}
	/**
     * public getter
     *
     * The value representing the discount factor used to calculate the present value of the principal exchange amount.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getDiscountFactor() {
	    return this.discountFactor;
	}
	
	/**
	 * public setter
	 *
     * The value representing the discount factor used to calculate the present value of the principal exchange amount.
     *
     * @param java.math.BigDecimal
	 */
	public void setDiscountFactor(BigDecimal discountFactor) {
	    this.discountFactor = discountFactor;
	}
	/**
     * public getter
     *
     * The amount representing the present value of the principal exchange.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPresentValuePrincipalExchangeAmount() {
	    return this.presentValuePrincipalExchangeAmount;
	}
	
	/**
	 * public setter
	 *
     * The amount representing the present value of the principal exchange.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPresentValuePrincipalExchangeAmount(Money presentValuePrincipalExchangeAmount) {
	    this.presentValuePrincipalExchangeAmount = presentValuePrincipalExchangeAmount;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}