// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A type defining the parameters used in the calculation of a fixed or floating rate calculation period amount. This type forms part of cashflows representation of a swap stream.
 */
public class CalculationPeriod implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Date unadjustedStartDate;
	
	@Element
	private Date unadjustedEndDate;
	
	@Element
	private Date adjustedStartDate;
	
	@Element
	private Date adjustedEndDate;
	
	@Element
	private BigInteger calculationPeriodNumberOfDays;
	
	@Element
	private BigDecimal notionalAmount;
	
	@Element
	private FxLinkedNotionalAmount fxLinkedNotionalAmount;
	
	@Element
	private FloatingRateDefinition floatingRateDefinition;
	
	@Element
	private BigDecimal fixedRate;
	
	@Element
	private BigDecimal dayCountYearFraction;
	
	@Element
	private Money forecastAmount;
	
	@Element
	private BigDecimal forecastRate;
	
	@Attribute  
	private String id;
	
    
	/**
	 * public getter
	 *
     * @returns java.util.Date
	 */
	public Date getUnadjustedStartDate() {
	    return this.unadjustedStartDate;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.Date
	 */
	public void setUnadjustedStartDate(Date unadjustedStartDate) {
	    this.unadjustedStartDate = unadjustedStartDate;
	}
	/**
	 * public getter
	 *
     * @returns java.util.Date
	 */
	public Date getUnadjustedEndDate() {
	    return this.unadjustedEndDate;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.Date
	 */
	public void setUnadjustedEndDate(Date unadjustedEndDate) {
	    this.unadjustedEndDate = unadjustedEndDate;
	}
	/**
     * public getter
     *
     * The calculation period start date, adjusted according to any relevant business day convention.
     *
     * @returns java.util.Date
	 */
	public Date getAdjustedStartDate() {
	    return this.adjustedStartDate;
	}
	
	/**
	 * public setter
	 *
     * The calculation period start date, adjusted according to any relevant business day convention.
     *
     * @param java.util.Date
	 */
	public void setAdjustedStartDate(Date adjustedStartDate) {
	    this.adjustedStartDate = adjustedStartDate;
	}
	/**
     * public getter
     *
     * The calculation period end date, adjusted according to any relevant business day convention.
     *
     * @returns java.util.Date
	 */
	public Date getAdjustedEndDate() {
	    return this.adjustedEndDate;
	}
	
	/**
	 * public setter
	 *
     * The calculation period end date, adjusted according to any relevant business day convention.
     *
     * @param java.util.Date
	 */
	public void setAdjustedEndDate(Date adjustedEndDate) {
	    this.adjustedEndDate = adjustedEndDate;
	}
	/**
     * public getter
     *
     * The number of days from the adjusted effective / start date to the adjusted termination / end date calculated in accordance with the applicable day count fraction.
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getCalculationPeriodNumberOfDays() {
	    return this.calculationPeriodNumberOfDays;
	}
	
	/**
	 * public setter
	 *
     * The number of days from the adjusted effective / start date to the adjusted termination / end date calculated in accordance with the applicable day count fraction.
     *
     * @param java.math.BigInteger
	 */
	public void setCalculationPeriodNumberOfDays(BigInteger calculationPeriodNumberOfDays) {
	    this.calculationPeriodNumberOfDays = calculationPeriodNumberOfDays;
	}
	/**
     * public getter
     *
     * The amount that a cashflow will accrue interest on.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getNotionalAmount() {
	    return this.notionalAmount;
	}
	
	/**
	 * public setter
	 *
     * The amount that a cashflow will accrue interest on.
     *
     * @param java.math.BigDecimal
	 */
	public void setNotionalAmount(BigDecimal notionalAmount) {
	    this.notionalAmount = notionalAmount;
	}
	/**
     * public getter
     *
     * The amount that a cashflow will accrue interest on. This is the calculated amount of the fx linked - ie the other currency notional amount multiplied by the appropriate fx spot rate.
     *
     * @returns com.leansoft.fpml.nano.FxLinkedNotionalAmount
	 */
	public FxLinkedNotionalAmount getFxLinkedNotionalAmount() {
	    return this.fxLinkedNotionalAmount;
	}
	
	/**
	 * public setter
	 *
     * The amount that a cashflow will accrue interest on. This is the calculated amount of the fx linked - ie the other currency notional amount multiplied by the appropriate fx spot rate.
     *
     * @param com.leansoft.fpml.nano.FxLinkedNotionalAmount
	 */
	public void setFxLinkedNotionalAmount(FxLinkedNotionalAmount fxLinkedNotionalAmount) {
	    this.fxLinkedNotionalAmount = fxLinkedNotionalAmount;
	}
	/**
     * public getter
     *
     * The floating rate reset information for the calculation period.
     *
     * @returns com.leansoft.fpml.nano.FloatingRateDefinition
	 */
	public FloatingRateDefinition getFloatingRateDefinition() {
	    return this.floatingRateDefinition;
	}
	
	/**
	 * public setter
	 *
     * The floating rate reset information for the calculation period.
     *
     * @param com.leansoft.fpml.nano.FloatingRateDefinition
	 */
	public void setFloatingRateDefinition(FloatingRateDefinition floatingRateDefinition) {
	    this.floatingRateDefinition = floatingRateDefinition;
	}
	/**
     * public getter
     *
     * The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getFixedRate() {
	    return this.fixedRate;
	}
	
	/**
	 * public setter
	 *
     * The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setFixedRate(BigDecimal fixedRate) {
	    this.fixedRate = fixedRate;
	}
	/**
     * public getter
     *
     * The year fraction value of the calculation period, result of applying the ISDA rules for day count fraction defined in the ISDA Annex.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getDayCountYearFraction() {
	    return this.dayCountYearFraction;
	}
	
	/**
	 * public setter
	 *
     * The year fraction value of the calculation period, result of applying the ISDA rules for day count fraction defined in the ISDA Annex.
     *
     * @param java.math.BigDecimal
	 */
	public void setDayCountYearFraction(BigDecimal dayCountYearFraction) {
	    this.dayCountYearFraction = dayCountYearFraction;
	}
	/**
     * public getter
     *
     * The amount representing the forecast of the accrued value of the calculation period. An intermediate value used to generate the forecastPaymentAmount in the PaymentCalculationPeriod.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getForecastAmount() {
	    return this.forecastAmount;
	}
	
	/**
	 * public setter
	 *
     * The amount representing the forecast of the accrued value of the calculation period. An intermediate value used to generate the forecastPaymentAmount in the PaymentCalculationPeriod.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setForecastAmount(Money forecastAmount) {
	    this.forecastAmount = forecastAmount;
	}
	/**
     * public getter
     *
     * A value representing the forecast rate used to calculate the forecast future value of the accrual period. This is a calculated rate determined based on averaging the rates in the rateObservation elements, and incorporates all of the rate treatment and averaging rules. A value of 1% should be represented as 0.01
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getForecastRate() {
	    return this.forecastRate;
	}
	
	/**
	 * public setter
	 *
     * A value representing the forecast rate used to calculate the forecast future value of the accrual period. This is a calculated rate determined based on averaging the rates in the rateObservation elements, and incorporates all of the rate treatment and averaging rules. A value of 1% should be represented as 0.01
     *
     * @param java.math.BigDecimal
	 */
	public void setForecastRate(BigDecimal forecastRate) {
	    this.forecastRate = forecastRate;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}