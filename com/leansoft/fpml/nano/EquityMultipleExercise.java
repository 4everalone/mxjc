// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type for defining the multiple exercise provisions of an American or Bermuda style equity option.
 */
public class EquityMultipleExercise implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BigDecimal integralMultipleExercise;
	
	@Element
	private BigDecimal minimumNumberOfOptions;
	
	@Element
	private BigDecimal maximumNumberOfOptions;
	
    
	/**
     * public getter
     *
     * When multiple exercise is applicable and this element is present it specifies that the number of options that can be exercised on a given exercise date must either be equal to the value of this element or be an integral multiple of it.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getIntegralMultipleExercise() {
	    return this.integralMultipleExercise;
	}
	
	/**
	 * public setter
	 *
     * When multiple exercise is applicable and this element is present it specifies that the number of options that can be exercised on a given exercise date must either be equal to the value of this element or be an integral multiple of it.
     *
     * @param java.math.BigDecimal
	 */
	public void setIntegralMultipleExercise(BigDecimal integralMultipleExercise) {
	    this.integralMultipleExercise = integralMultipleExercise;
	}
	/**
     * public getter
     *
     * When multiple exercise is applicable this element specifies the minimum number of options that can be exercised on a given exercise date. If this element is not present then the minimum number is deemed to be 1. Its value can be a fractional number as a result of corporate actions.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getMinimumNumberOfOptions() {
	    return this.minimumNumberOfOptions;
	}
	
	/**
	 * public setter
	 *
     * When multiple exercise is applicable this element specifies the minimum number of options that can be exercised on a given exercise date. If this element is not present then the minimum number is deemed to be 1. Its value can be a fractional number as a result of corporate actions.
     *
     * @param java.math.BigDecimal
	 */
	public void setMinimumNumberOfOptions(BigDecimal minimumNumberOfOptions) {
	    this.minimumNumberOfOptions = minimumNumberOfOptions;
	}
	/**
     * public getter
     *
     * When multiple exercise is applicable this element specifies the maximum number of options that can be exercised on a given exercise date. If this element is not present then the maximum number is deemed to be the same as the number of options. Its value can be a fractional number as a result of corporate actions.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getMaximumNumberOfOptions() {
	    return this.maximumNumberOfOptions;
	}
	
	/**
	 * public setter
	 *
     * When multiple exercise is applicable this element specifies the maximum number of options that can be exercised on a given exercise date. If this element is not present then the maximum number is deemed to be the same as the number of options. Its value can be a fractional number as a result of corporate actions.
     *
     * @param java.math.BigDecimal
	 */
	public void setMaximumNumberOfOptions(BigDecimal maximumNumberOfOptions) {
	    this.maximumNumberOfOptions = maximumNumberOfOptions;
	}

}