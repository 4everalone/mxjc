// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * A type refining the generic message header content to make it specific to request messages.
 */
public class RequestMessageHeader extends MessageHeader implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private MessageAddress sentBy;
	
	@Element
	private List<MessageAddress> sendTo;
	
	@Element
	private List<MessageAddress> copyTo;
	
	@Element
	private Date creationTimestamp;
	
	@Element
	private Date expiryTimestamp;
	
	@Element
	private List<PartyMessageInformation> partyMessageInformation;
	
	@Element(name = "Signature")
	private List<SignatureType> signature;
	
    
	/**
     * public getter
     *
     * The unique identifier (within its coding scheme) for the originator of a message instance.
     *
     * @returns com.leansoft.fpml.nano.MessageAddress
	 */
	public MessageAddress getSentBy() {
	    return this.sentBy;
	}
	
	/**
	 * public setter
	 *
     * The unique identifier (within its coding scheme) for the originator of a message instance.
     *
     * @param com.leansoft.fpml.nano.MessageAddress
	 */
	public void setSentBy(MessageAddress sentBy) {
	    this.sentBy = sentBy;
	}
	/**
     * public getter
     *
     * A unique identifier (within its coding scheme) indicating an intended recipent of a message.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.MessageAddress>
	 */
	public List<MessageAddress> getSendTo() {
	    return this.sendTo;
	}
	
	/**
	 * public setter
	 *
     * A unique identifier (within its coding scheme) indicating an intended recipent of a message.
     *
     * @param java.util.List<com.leansoft.fpml.nano.MessageAddress>
	 */
	public void setSendTo(List<MessageAddress> sendTo) {
	    this.sendTo = sendTo;
	}
	/**
     * public getter
     *
     * A unique identifier (within the specified coding scheme) giving the details of some party to whom a copy of this message will be sent for reference.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.MessageAddress>
	 */
	public List<MessageAddress> getCopyTo() {
	    return this.copyTo;
	}
	
	/**
	 * public setter
	 *
     * A unique identifier (within the specified coding scheme) giving the details of some party to whom a copy of this message will be sent for reference.
     *
     * @param java.util.List<com.leansoft.fpml.nano.MessageAddress>
	 */
	public void setCopyTo(List<MessageAddress> copyTo) {
	    this.copyTo = copyTo;
	}
	/**
     * public getter
     *
     * The date and time (on the source system) when this message instance was created.
     *
     * @returns java.util.Date
	 */
	public Date getCreationTimestamp() {
	    return this.creationTimestamp;
	}
	
	/**
	 * public setter
	 *
     * The date and time (on the source system) when this message instance was created.
     *
     * @param java.util.Date
	 */
	public void setCreationTimestamp(Date creationTimestamp) {
	    this.creationTimestamp = creationTimestamp;
	}
	/**
     * public getter
     *
     * The date and time (on the source system) when this message instance will be considered expired.
     *
     * @returns java.util.Date
	 */
	public Date getExpiryTimestamp() {
	    return this.expiryTimestamp;
	}
	
	/**
	 * public setter
	 *
     * The date and time (on the source system) when this message instance will be considered expired.
     *
     * @param java.util.Date
	 */
	public void setExpiryTimestamp(Date expiryTimestamp) {
	    this.expiryTimestamp = expiryTimestamp;
	}
	/**
     * public getter
     *
     * Additional message information that may be provided by each involved party.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.PartyMessageInformation>
	 */
	public List<PartyMessageInformation> getPartyMessageInformation() {
	    return this.partyMessageInformation;
	}
	
	/**
	 * public setter
	 *
     * Additional message information that may be provided by each involved party.
     *
     * @param java.util.List<com.leansoft.fpml.nano.PartyMessageInformation>
	 */
	public void setPartyMessageInformation(List<PartyMessageInformation> partyMessageInformation) {
	    this.partyMessageInformation = partyMessageInformation;
	}
	/**
	 * public getter
	 *
     * @returns java.util.List<com.leansoft.fpml.nano.SignatureType>
	 */
	public List<SignatureType> getSignature() {
	    return this.signature;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.List<com.leansoft.fpml.nano.SignatureType>
	 */
	public void setSignature(List<SignatureType> signature) {
	    this.signature = signature;
	}

}