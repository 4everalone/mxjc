// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A payment component owed from one party to the other for the cash flow date. This payment component should by of only a single type, e.g. a fee or a cashflow from a cashflow stream.
 */
public class GrossCashflow implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private CashflowId cashflowId;
	
	@Element
	private PartyOrAccountReference payerPartyReference;
	
	@Element
	private PartyOrAccountReference receiverPartyReference;
	
	@Element
	private Money cashflowAmount;
	
	@Element
	private CashflowType cashflowType;
	
    
	/**
     * public getter
     *
     * Unique identifier for a cash flow.
     *
     * @returns com.leansoft.fpml.nano.CashflowId
	 */
	public CashflowId getCashflowId() {
	    return this.cashflowId;
	}
	
	/**
	 * public setter
	 *
     * Unique identifier for a cash flow.
     *
     * @param com.leansoft.fpml.nano.CashflowId
	 */
	public void setCashflowId(CashflowId cashflowId) {
	    this.cashflowId = cashflowId;
	}
	/**
     * public getter
     *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getPayerPartyReference() {
	    return this.payerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setPayerPartyReference(PartyOrAccountReference payerPartyReference) {
	    this.payerPartyReference = payerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getReceiverPartyReference() {
	    return this.receiverPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setReceiverPartyReference(PartyOrAccountReference receiverPartyReference) {
	    this.receiverPartyReference = receiverPartyReference;
	}
	/**
     * public getter
     *
     * Cash flow amount in a given currency to be paid/received.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getCashflowAmount() {
	    return this.cashflowAmount;
	}
	
	/**
	 * public setter
	 *
     * Cash flow amount in a given currency to be paid/received.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setCashflowAmount(Money cashflowAmount) {
	    this.cashflowAmount = cashflowAmount;
	}
	/**
     * public getter
     *
     * Defines the type of cash flow. For instance, a type of fee, premium, principal exchange, leg fee.
     *
     * @returns com.leansoft.fpml.nano.CashflowType
	 */
	public CashflowType getCashflowType() {
	    return this.cashflowType;
	}
	
	/**
	 * public setter
	 *
     * Defines the type of cash flow. For instance, a type of fee, premium, principal exchange, leg fee.
     *
     * @param com.leansoft.fpml.nano.CashflowType
	 */
	public void setCashflowType(CashflowType cashflowType) {
	    this.cashflowType = cashflowType;
	}

}