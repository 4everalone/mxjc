// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type to describe a notional schedule where each notional that applies to a calculation period is calculated with reference to a notional amount or notional amount schedule in a different currency by means of a spot currency exchange rate which is normally observed at the beginning of each period.
 */
public class FxLinkedNotionalSchedule implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private ScheduleReference constantNotionalScheduleReference;
	
	@Element
	private BigDecimal initialValue;
	
	@Element
	private Currency varyingNotionalCurrency;
	
	@Element
	private RelativeDateOffset varyingNotionalFixingDates;
	
	@Element
	private FxSpotRateSource fxSpotRateSource;
	
	@Element
	private RelativeDateOffset varyingNotionalInterimExchangePaymentDates;
	
    
	/**
     * public getter
     *
     * A pointer style reference to the associated constant notional schedule defined elsewhere in the document which contains the currency amounts which will be converted into the varying notional currency amounts using the spot currency exchange rate.
     *
     * @returns com.leansoft.fpml.nano.ScheduleReference
	 */
	public ScheduleReference getConstantNotionalScheduleReference() {
	    return this.constantNotionalScheduleReference;
	}
	
	/**
	 * public setter
	 *
     * A pointer style reference to the associated constant notional schedule defined elsewhere in the document which contains the currency amounts which will be converted into the varying notional currency amounts using the spot currency exchange rate.
     *
     * @param com.leansoft.fpml.nano.ScheduleReference
	 */
	public void setConstantNotionalScheduleReference(ScheduleReference constantNotionalScheduleReference) {
	    this.constantNotionalScheduleReference = constantNotionalScheduleReference;
	}
	/**
     * public getter
     *
     * The initial currency amount for the varying notional.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getInitialValue() {
	    return this.initialValue;
	}
	
	/**
	 * public setter
	 *
     * The initial currency amount for the varying notional.
     *
     * @param java.math.BigDecimal
	 */
	public void setInitialValue(BigDecimal initialValue) {
	    this.initialValue = initialValue;
	}
	/**
     * public getter
     *
     * The currency of the varying notional amount, i.e. the notional amount being determined periodically based on observation of a spot currency exchange rate.
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getVaryingNotionalCurrency() {
	    return this.varyingNotionalCurrency;
	}
	
	/**
	 * public setter
	 *
     * The currency of the varying notional amount, i.e. the notional amount being determined periodically based on observation of a spot currency exchange rate.
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setVaryingNotionalCurrency(Currency varyingNotionalCurrency) {
	    this.varyingNotionalCurrency = varyingNotionalCurrency;
	}
	/**
     * public getter
     *
     * The dates on which spot currency exchange rates are observed for purposes of determining the varying notional currency amount that will apply to a calculation period.
     *
     * @returns com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public RelativeDateOffset getVaryingNotionalFixingDates() {
	    return this.varyingNotionalFixingDates;
	}
	
	/**
	 * public setter
	 *
     * The dates on which spot currency exchange rates are observed for purposes of determining the varying notional currency amount that will apply to a calculation period.
     *
     * @param com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public void setVaryingNotionalFixingDates(RelativeDateOffset varyingNotionalFixingDates) {
	    this.varyingNotionalFixingDates = varyingNotionalFixingDates;
	}
	/**
     * public getter
     *
     * The information source and time at which the spot currency exchange rate will be observed.
     *
     * @returns com.leansoft.fpml.nano.FxSpotRateSource
	 */
	public FxSpotRateSource getFxSpotRateSource() {
	    return this.fxSpotRateSource;
	}
	
	/**
	 * public setter
	 *
     * The information source and time at which the spot currency exchange rate will be observed.
     *
     * @param com.leansoft.fpml.nano.FxSpotRateSource
	 */
	public void setFxSpotRateSource(FxSpotRateSource fxSpotRateSource) {
	    this.fxSpotRateSource = fxSpotRateSource;
	}
	/**
     * public getter
     *
     * The dates on which interim exchanges of notional are paid. Interim exchanges will arise as a result of changes in the spot currency exchange amount or changes in the constant notional schedule (e.g. amortization).
     *
     * @returns com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public RelativeDateOffset getVaryingNotionalInterimExchangePaymentDates() {
	    return this.varyingNotionalInterimExchangePaymentDates;
	}
	
	/**
	 * public setter
	 *
     * The dates on which interim exchanges of notional are paid. Interim exchanges will arise as a result of changes in the spot currency exchange amount or changes in the constant notional schedule (e.g. amortization).
     *
     * @param com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public void setVaryingNotionalInterimExchangePaymentDates(RelativeDateOffset varyingNotionalInterimExchangePaymentDates) {
	    this.varyingNotionalInterimExchangePaymentDates = varyingNotionalInterimExchangePaymentDates;
	}

}