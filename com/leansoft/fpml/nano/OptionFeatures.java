// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type for defining option features.
 */
public class OptionFeatures implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Asian asian;
	
	@Element
	private Barrier barrier;
	
	@Element
	private Knock knock;
	
	@Element
	private PassThrough passThrough;
	
	@Element
	private DividendAdjustment dividendAdjustment;
	
    
	/**
     * public getter
     *
     * An option where and average price is taken on valuation.
     *
     * @returns com.leansoft.fpml.nano.Asian
	 */
	public Asian getAsian() {
	    return this.asian;
	}
	
	/**
	 * public setter
	 *
     * An option where and average price is taken on valuation.
     *
     * @param com.leansoft.fpml.nano.Asian
	 */
	public void setAsian(Asian asian) {
	    this.asian = asian;
	}
	/**
     * public getter
     *
     * An option with a barrier feature.
     *
     * @returns com.leansoft.fpml.nano.Barrier
	 */
	public Barrier getBarrier() {
	    return this.barrier;
	}
	
	/**
	 * public setter
	 *
     * An option with a barrier feature.
     *
     * @param com.leansoft.fpml.nano.Barrier
	 */
	public void setBarrier(Barrier barrier) {
	    this.barrier = barrier;
	}
	/**
     * public getter
     *
     * A knock feature.
     *
     * @returns com.leansoft.fpml.nano.Knock
	 */
	public Knock getKnock() {
	    return this.knock;
	}
	
	/**
	 * public setter
	 *
     * A knock feature.
     *
     * @param com.leansoft.fpml.nano.Knock
	 */
	public void setKnock(Knock knock) {
	    this.knock = knock;
	}
	/**
     * public getter
     *
     * Pass through payments from the underlyer, such as dividends.
     *
     * @returns com.leansoft.fpml.nano.PassThrough
	 */
	public PassThrough getPassThrough() {
	    return this.passThrough;
	}
	
	/**
	 * public setter
	 *
     * Pass through payments from the underlyer, such as dividends.
     *
     * @param com.leansoft.fpml.nano.PassThrough
	 */
	public void setPassThrough(PassThrough passThrough) {
	    this.passThrough = passThrough;
	}
	/**
     * public getter
     *
     * Dividend adjustment of the contract is driven by the difference between the Expected Dividend, and the Actual Dividend, which is multiplied by an agreed Factor to produce a Deviation, which is used as the basis for adjusting the contract. The parties acknowledge that in determining the Call Strike Price of the Transaction the parties have assumed that the Dividend scheduled to be paid by the Issuer to holders of record of the Shares, in the period set out in Column headed Relevant Period will equal per Share the amount stated in respect of such Relevant Period.
     *
     * @returns com.leansoft.fpml.nano.DividendAdjustment
	 */
	public DividendAdjustment getDividendAdjustment() {
	    return this.dividendAdjustment;
	}
	
	/**
	 * public setter
	 *
     * Dividend adjustment of the contract is driven by the difference between the Expected Dividend, and the Actual Dividend, which is multiplied by an agreed Factor to produce a Deviation, which is used as the basis for adjusting the contract. The parties acknowledge that in determining the Call Strike Price of the Transaction the parties have assumed that the Dividend scheduled to be paid by the Issuer to holders of record of the Shares, in the period set out in Column headed Relevant Period will equal per Share the amount stated in respect of such Relevant Period.
     *
     * @param com.leansoft.fpml.nano.DividendAdjustment
	 */
	public void setDividendAdjustment(DividendAdjustment dividendAdjustment) {
	    this.dividendAdjustment = dividendAdjustment;
	}

}