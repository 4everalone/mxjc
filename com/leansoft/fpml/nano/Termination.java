// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * An event type that defines the content of a Termination transaction.
 */
public class Termination extends Event implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Trade trade;
	
	@Element
	private PartyTradeIdentifiers tradeReference;
	
	@Element
	private Date terminationTradeDate;
	
	@Element
	private Date terminationEffectiveDate;
	
	@Element
	private Empty full;
	
	@Element
	private PartialTerminationAmount partial;
	
	@Element
	private Payment payment;
	
    
	/**
     * public getter
     *
     * An element that allows the full details of the trade to be used as a mechanism for identifying the trade for which the post-trade event pertains
     *
     * @returns com.leansoft.fpml.nano.Trade
	 */
	public Trade getTrade() {
	    return this.trade;
	}
	
	/**
	 * public setter
	 *
     * An element that allows the full details of the trade to be used as a mechanism for identifying the trade for which the post-trade event pertains
     *
     * @param com.leansoft.fpml.nano.Trade
	 */
	public void setTrade(Trade trade) {
	    this.trade = trade;
	}
	/**
     * public getter
     *
     * A container since an individual trade can be referenced by two or more different partyTradeIdentifier elements - each allocated by a different party.
     *
     * @returns com.leansoft.fpml.nano.PartyTradeIdentifiers
	 */
	public PartyTradeIdentifiers getTradeReference() {
	    return this.tradeReference;
	}
	
	/**
	 * public setter
	 *
     * A container since an individual trade can be referenced by two or more different partyTradeIdentifier elements - each allocated by a different party.
     *
     * @param com.leansoft.fpml.nano.PartyTradeIdentifiers
	 */
	public void setTradeReference(PartyTradeIdentifiers tradeReference) {
	    this.tradeReference = tradeReference;
	}
	/**
     * public getter
     *
     * The date on which the the parties enter into the Termination transaction.
     *
     * @returns java.util.Date
	 */
	public Date getTerminationTradeDate() {
	    return this.terminationTradeDate;
	}
	
	/**
	 * public setter
	 *
     * The date on which the the parties enter into the Termination transaction.
     *
     * @param java.util.Date
	 */
	public void setTerminationTradeDate(Date terminationTradeDate) {
	    this.terminationTradeDate = terminationTradeDate;
	}
	/**
     * public getter
     *
     * The date on which the Termination becomes effective.
     *
     * @returns java.util.Date
	 */
	public Date getTerminationEffectiveDate() {
	    return this.terminationEffectiveDate;
	}
	
	/**
	 * public setter
	 *
     * The date on which the Termination becomes effective.
     *
     * @param java.util.Date
	 */
	public void setTerminationEffectiveDate(Date terminationEffectiveDate) {
	    this.terminationEffectiveDate = terminationEffectiveDate;
	}
	/**
     * public getter
     *
     * The use of the Full element indicates that this is a Full Termination.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getFull() {
	    return this.full;
	}
	
	/**
	 * public setter
	 *
     * The use of the Full element indicates that this is a Full Termination.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setFull(Empty full) {
	    this.full = full;
	}
	/**
     * public getter
     *
     * The use of the Partial element indicates that this is a Partial Termination.
     *
     * @returns com.leansoft.fpml.nano.PartialTerminationAmount
	 */
	public PartialTerminationAmount getPartial() {
	    return this.partial;
	}
	
	/**
	 * public setter
	 *
     * The use of the Partial element indicates that this is a Partial Termination.
     *
     * @param com.leansoft.fpml.nano.PartialTerminationAmount
	 */
	public void setPartial(PartialTerminationAmount partial) {
	    this.partial = partial;
	}
	/**
     * public getter
     *
     * A payment for the right to terminate the trade.
     *
     * @returns com.leansoft.fpml.nano.Payment
	 */
	public Payment getPayment() {
	    return this.payment;
	}
	
	/**
	 * public setter
	 *
     * A payment for the right to terminate the trade.
     *
     * @param com.leansoft.fpml.nano.Payment
	 */
	public void setPayment(Payment payment) {
	    this.payment = payment;
	}

}