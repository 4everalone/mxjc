// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type that contains full details of a predefined fixed payout which may occur (or not) in a Barrier Option or Digital Option when a trigger event occurs (or not).
 */
public class FxOptionPayout extends Money implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PayoutEnum payoutStyle;
	
	@Element
	private SettlementInformation settlementInformation;
	
    
	/**
     * public getter
     *
     * The trigger event and payout may be asynchonous. A payout may become due on the trigger event, or the payout may (by agreeement at initiation) be deferred (for example) to the maturity date.
     *
     * @returns com.leansoft.fpml.nano.PayoutEnum
	 */
	public PayoutEnum getPayoutStyle() {
	    return this.payoutStyle;
	}
	
	/**
	 * public setter
	 *
     * The trigger event and payout may be asynchonous. A payout may become due on the trigger event, or the payout may (by agreeement at initiation) be deferred (for example) to the maturity date.
     *
     * @param com.leansoft.fpml.nano.PayoutEnum
	 */
	public void setPayoutStyle(PayoutEnum payoutStyle) {
	    this.payoutStyle = payoutStyle;
	}
	/**
     * public getter
     *
     * The information required to settle a currency payment that results from a trade.
     *
     * @returns com.leansoft.fpml.nano.SettlementInformation
	 */
	public SettlementInformation getSettlementInformation() {
	    return this.settlementInformation;
	}
	
	/**
	 * public setter
	 *
     * The information required to settle a currency payment that results from a trade.
     *
     * @param com.leansoft.fpml.nano.SettlementInformation
	 */
	public void setSettlementInformation(SettlementInformation settlementInformation) {
	    this.settlementInformation = settlementInformation;
	}

}