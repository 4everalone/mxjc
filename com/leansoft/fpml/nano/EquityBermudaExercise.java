// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type for defining exercise procedures associated with a Bermuda style exercise of an equity option. The term Bermuda is adopted in FpML for consistency with the ISDA Definitions.
 */
public class EquityBermudaExercise extends SharedAmericanExercise implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private DateList bermudaExerciseDates;
	
	@Element
	private TimeTypeEnum latestExerciseTimeType;
	
	@Element
	private TimeTypeEnum equityExpirationTimeType;
	
	@Element
	private BusinessCenterTime equityExpirationTime;
	
	@Element
	private EquityMultipleExercise equityMultipleExercise;
	
    
	/**
     * public getter
     *
     * List of Exercise Dates for a Bermuda option
     *
     * @returns com.leansoft.fpml.nano.DateList
	 */
	public DateList getBermudaExerciseDates() {
	    return this.bermudaExerciseDates;
	}
	
	/**
	 * public setter
	 *
     * List of Exercise Dates for a Bermuda option
     *
     * @param com.leansoft.fpml.nano.DateList
	 */
	public void setBermudaExerciseDates(DateList bermudaExerciseDates) {
	    this.bermudaExerciseDates = bermudaExerciseDates;
	}
	/**
     * public getter
     *
     * The latest time of day at which the equity option can be exercised, for example the official closing time of the exchange.
     *
     * @returns com.leansoft.fpml.nano.TimeTypeEnum
	 */
	public TimeTypeEnum getLatestExerciseTimeType() {
	    return this.latestExerciseTimeType;
	}
	
	/**
	 * public setter
	 *
     * The latest time of day at which the equity option can be exercised, for example the official closing time of the exchange.
     *
     * @param com.leansoft.fpml.nano.TimeTypeEnum
	 */
	public void setLatestExerciseTimeType(TimeTypeEnum latestExerciseTimeType) {
	    this.latestExerciseTimeType = latestExerciseTimeType;
	}
	/**
     * public getter
     *
     * The time of day at which the equity option expires, for example the official closing time of the exchange.
     *
     * @returns com.leansoft.fpml.nano.TimeTypeEnum
	 */
	public TimeTypeEnum getEquityExpirationTimeType() {
	    return this.equityExpirationTimeType;
	}
	
	/**
	 * public setter
	 *
     * The time of day at which the equity option expires, for example the official closing time of the exchange.
     *
     * @param com.leansoft.fpml.nano.TimeTypeEnum
	 */
	public void setEquityExpirationTimeType(TimeTypeEnum equityExpirationTimeType) {
	    this.equityExpirationTimeType = equityExpirationTimeType;
	}
	/**
     * public getter
     *
     * The specific time of day at which the equity option expires.
     *
     * @returns com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public BusinessCenterTime getEquityExpirationTime() {
	    return this.equityExpirationTime;
	}
	
	/**
	 * public setter
	 *
     * The specific time of day at which the equity option expires.
     *
     * @param com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public void setEquityExpirationTime(BusinessCenterTime equityExpirationTime) {
	    this.equityExpirationTime = equityExpirationTime;
	}
	/**
     * public getter
     *
     * The presence of this element indicates that the option may be exercised on different days. It is not applicable to European options.
     *
     * @returns com.leansoft.fpml.nano.EquityMultipleExercise
	 */
	public EquityMultipleExercise getEquityMultipleExercise() {
	    return this.equityMultipleExercise;
	}
	
	/**
	 * public setter
	 *
     * The presence of this element indicates that the option may be exercised on different days. It is not applicable to European options.
     *
     * @param com.leansoft.fpml.nano.EquityMultipleExercise
	 */
	public void setEquityMultipleExercise(EquityMultipleExercise equityMultipleExercise) {
	    this.equityMultipleExercise = equityMultipleExercise;
	}

}