// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

public class GeneralTerms implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private AdjustableDate2 effectiveDate;
	
	@Element
	private AdjustableDate2 scheduledTerminationDate;
	
	@Element
	private PartyOrTradeSideReference sellerPartyReference;
	
	@Element
	private PartyOrTradeSideReference buyerPartyReference;
	
	@Element
	private BusinessDayAdjustments dateAdjustments;
	
	@Element
	private ReferenceInformation referenceInformation;
	
	@Element
	private IndexReferenceInformation indexReferenceInformation;
	
	@Element
	private BasketReferenceInformation basketReferenceInformation;
	
	@Element
	private List<AdditionalTerm> additionalTerm;
	
	@Element
	private Empty substitution;
	
	@Element
	private Empty modifiedEquityDelivery;
	
    
	/**
     * public getter
     *
     * The first day of the term of the trade. This day may be subject to adjustment in accordance with a business day convention. ISDA 2003 Term: Effective Date.
     *
     * @returns com.leansoft.fpml.nano.AdjustableDate2
	 */
	public AdjustableDate2 getEffectiveDate() {
	    return this.effectiveDate;
	}
	
	/**
	 * public setter
	 *
     * The first day of the term of the trade. This day may be subject to adjustment in accordance with a business day convention. ISDA 2003 Term: Effective Date.
     *
     * @param com.leansoft.fpml.nano.AdjustableDate2
	 */
	public void setEffectiveDate(AdjustableDate2 effectiveDate) {
	    this.effectiveDate = effectiveDate;
	}
	/**
     * public getter
     *
     * The scheduled date on which the credit protection will lapse. May be specified as an adjusting or non-adjusting date or alternatively as a period offset from the effective date. ISDA 2003 Term: Scheduled Termination Date.
     *
     * @returns com.leansoft.fpml.nano.AdjustableDate2
	 */
	public AdjustableDate2 getScheduledTerminationDate() {
	    return this.scheduledTerminationDate;
	}
	
	/**
	 * public setter
	 *
     * The scheduled date on which the credit protection will lapse. May be specified as an adjusting or non-adjusting date or alternatively as a period offset from the effective date. ISDA 2003 Term: Scheduled Termination Date.
     *
     * @param com.leansoft.fpml.nano.AdjustableDate2
	 */
	public void setScheduledTerminationDate(AdjustableDate2 scheduledTerminationDate) {
	    this.scheduledTerminationDate = scheduledTerminationDate;
	}
	/**
     * public getter
     *
     * The seller of the credit protection. ISDA 2003 Term: Floating Rate Payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getSellerPartyReference() {
	    return this.sellerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * The seller of the credit protection. ISDA 2003 Term: Floating Rate Payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setSellerPartyReference(PartyOrTradeSideReference sellerPartyReference) {
	    this.sellerPartyReference = sellerPartyReference;
	}
	/**
     * public getter
     *
     * The buyer of the credit protection. ISDA 2003 Term: Fixed Rate Payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getBuyerPartyReference() {
	    return this.buyerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * The buyer of the credit protection. ISDA 2003 Term: Fixed Rate Payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setBuyerPartyReference(PartyOrTradeSideReference buyerPartyReference) {
	    this.buyerPartyReference = buyerPartyReference;
	}
	/**
     * public getter
     *
     * ISDA 2003 Terms: Business Day and Business Day Convention.
     *
     * @returns com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public BusinessDayAdjustments getDateAdjustments() {
	    return this.dateAdjustments;
	}
	
	/**
	 * public setter
	 *
     * ISDA 2003 Terms: Business Day and Business Day Convention.
     *
     * @param com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public void setDateAdjustments(BusinessDayAdjustments dateAdjustments) {
	    this.dateAdjustments = dateAdjustments;
	}
	/**
     * public getter
     *
     * This element contains all the terms relevant to defining the reference entity and reference obligation(s).
     *
     * @returns com.leansoft.fpml.nano.ReferenceInformation
	 */
	public ReferenceInformation getReferenceInformation() {
	    return this.referenceInformation;
	}
	
	/**
	 * public setter
	 *
     * This element contains all the terms relevant to defining the reference entity and reference obligation(s).
     *
     * @param com.leansoft.fpml.nano.ReferenceInformation
	 */
	public void setReferenceInformation(ReferenceInformation referenceInformation) {
	    this.referenceInformation = referenceInformation;
	}
	/**
     * public getter
     *
     * This element contains all the terms relevant to defining the Credit DefaultSwap Index.
     *
     * @returns com.leansoft.fpml.nano.IndexReferenceInformation
	 */
	public IndexReferenceInformation getIndexReferenceInformation() {
	    return this.indexReferenceInformation;
	}
	
	/**
	 * public setter
	 *
     * This element contains all the terms relevant to defining the Credit DefaultSwap Index.
     *
     * @param com.leansoft.fpml.nano.IndexReferenceInformation
	 */
	public void setIndexReferenceInformation(IndexReferenceInformation indexReferenceInformation) {
	    this.indexReferenceInformation = indexReferenceInformation;
	}
	/**
     * public getter
     *
     * This element contains all the terms relevant to defining the Credit Default Swap Basket.
     *
     * @returns com.leansoft.fpml.nano.BasketReferenceInformation
	 */
	public BasketReferenceInformation getBasketReferenceInformation() {
	    return this.basketReferenceInformation;
	}
	
	/**
	 * public setter
	 *
     * This element contains all the terms relevant to defining the Credit Default Swap Basket.
     *
     * @param com.leansoft.fpml.nano.BasketReferenceInformation
	 */
	public void setBasketReferenceInformation(BasketReferenceInformation basketReferenceInformation) {
	    this.basketReferenceInformation = basketReferenceInformation;
	}
	/**
     * public getter
     *
     * This element is used for representing information contained in the Additional Terms field of the 2003 Master Credit Derivatives confirm.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.AdditionalTerm>
	 */
	public List<AdditionalTerm> getAdditionalTerm() {
	    return this.additionalTerm;
	}
	
	/**
	 * public setter
	 *
     * This element is used for representing information contained in the Additional Terms field of the 2003 Master Credit Derivatives confirm.
     *
     * @param java.util.List<com.leansoft.fpml.nano.AdditionalTerm>
	 */
	public void setAdditionalTerm(List<AdditionalTerm> additionalTerm) {
	    this.additionalTerm = additionalTerm;
	}
	/**
     * public getter
     *
     * Presence of this element indicates that substitution is applicable.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getSubstitution() {
	    return this.substitution;
	}
	
	/**
	 * public setter
	 *
     * Presence of this element indicates that substitution is applicable.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setSubstitution(Empty substitution) {
	    this.substitution = substitution;
	}
	/**
     * public getter
     *
     * Presence of this element indicates that modified equity delivery is applicable.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getModifiedEquityDelivery() {
	    return this.modifiedEquityDelivery;
	}
	
	/**
	 * public setter
	 *
     * Presence of this element indicates that modified equity delivery is applicable.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setModifiedEquityDelivery(Empty modifiedEquityDelivery) {
	    this.modifiedEquityDelivery = modifiedEquityDelivery;
	}

}