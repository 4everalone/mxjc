// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;

public class FeeLeg extends Leg implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private InitialPayment initialPayment;
	
	@Element
	private List<SinglePayment> singlePayment;
	
	@Element
	private PeriodicPayment periodicPayment;
	
	@Element
	private BigDecimal marketFixedRate;
	
	@Element
	private Boolean paymentDelay;
	
    
	/**
     * public getter
     *
     * Specifies a single fixed payment that is payable by the payer to the receiver on the initial payment date. The fixed payment to be paid is specified in terms of a known currency amount. This element should be used for CDS Index trades and can be used for CDS trades where it is necessary to represent a payment from Seller to Buyer. For CDS trades where a payment is to be made from Buyer to Seller the feeLeg/singlePayment structure must be used.
     *
     * @returns com.leansoft.fpml.nano.InitialPayment
	 */
	public InitialPayment getInitialPayment() {
	    return this.initialPayment;
	}
	
	/**
	 * public setter
	 *
     * Specifies a single fixed payment that is payable by the payer to the receiver on the initial payment date. The fixed payment to be paid is specified in terms of a known currency amount. This element should be used for CDS Index trades and can be used for CDS trades where it is necessary to represent a payment from Seller to Buyer. For CDS trades where a payment is to be made from Buyer to Seller the feeLeg/singlePayment structure must be used.
     *
     * @param com.leansoft.fpml.nano.InitialPayment
	 */
	public void setInitialPayment(InitialPayment initialPayment) {
	    this.initialPayment = initialPayment;
	}
	/**
     * public getter
     *
     * Specifies a single fixed amount that is payable by the buyer to the seller on the fixed rate payer payment date. The fixed amount to be paid is specified in terms of a known currency amount.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.SinglePayment>
	 */
	public List<SinglePayment> getSinglePayment() {
	    return this.singlePayment;
	}
	
	/**
	 * public setter
	 *
     * Specifies a single fixed amount that is payable by the buyer to the seller on the fixed rate payer payment date. The fixed amount to be paid is specified in terms of a known currency amount.
     *
     * @param java.util.List<com.leansoft.fpml.nano.SinglePayment>
	 */
	public void setSinglePayment(List<SinglePayment> singlePayment) {
	    this.singlePayment = singlePayment;
	}
	/**
     * public getter
     *
     * Specifies a periodic schedule of fixed amounts that are payable by the buyer to the seller on the fixed rate payer payment dates. The fixed amount to be paid on each payment date can be specified in terms of a known currency amount or as an amount calculated on a formula basis by reference to a per annum fixed rate. The applicable business day convention and business day for adjusting any fixed rate payer payment date if it would otherwise fall on a day that is not a business day are those specified in the dateAdjustments element within the generalTerms component. ISDA 2003 Term:
     *
     * @returns com.leansoft.fpml.nano.PeriodicPayment
	 */
	public PeriodicPayment getPeriodicPayment() {
	    return this.periodicPayment;
	}
	
	/**
	 * public setter
	 *
     * Specifies a periodic schedule of fixed amounts that are payable by the buyer to the seller on the fixed rate payer payment dates. The fixed amount to be paid on each payment date can be specified in terms of a known currency amount or as an amount calculated on a formula basis by reference to a per annum fixed rate. The applicable business day convention and business day for adjusting any fixed rate payer payment date if it would otherwise fall on a day that is not a business day are those specified in the dateAdjustments element within the generalTerms component. ISDA 2003 Term:
     *
     * @param com.leansoft.fpml.nano.PeriodicPayment
	 */
	public void setPeriodicPayment(PeriodicPayment periodicPayment) {
	    this.periodicPayment = periodicPayment;
	}
	/**
     * public getter
     *
     * An optional element that only has meaning in a credit index trade. This element contains the credit spread ("fair value") at which the trade was executed. Unlike the fixedRate of an index, the marketFixedRate varies over the life of the index depending on market conditions. The marketFixedRate is the price of the index as quoted by trading desks.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getMarketFixedRate() {
	    return this.marketFixedRate;
	}
	
	/**
	 * public setter
	 *
     * An optional element that only has meaning in a credit index trade. This element contains the credit spread ("fair value") at which the trade was executed. Unlike the fixedRate of an index, the marketFixedRate varies over the life of the index depending on market conditions. The marketFixedRate is the price of the index as quoted by trading desks.
     *
     * @param java.math.BigDecimal
	 */
	public void setMarketFixedRate(BigDecimal marketFixedRate) {
	    this.marketFixedRate = marketFixedRate;
	}
	/**
     * public getter
     *
     * Applicable to CDS on MBS to specify whether payment delays are applicable to the fixed Amount. RMBS typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap. CMBS do not, on the other hand, with both payment dates being on the 25th of each month.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getPaymentDelay() {
	    return this.paymentDelay;
	}
	
	/**
	 * public setter
	 *
     * Applicable to CDS on MBS to specify whether payment delays are applicable to the fixed Amount. RMBS typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap. CMBS do not, on the other hand, with both payment dates being on the 25th of each month.
     *
     * @param java.lang.Boolean
	 */
	public void setPaymentDelay(Boolean paymentDelay) {
	    this.paymentDelay = paymentDelay;
	}

}