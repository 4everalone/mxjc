// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A class defining the content model for a term deposit product.
 */
@RootElement(name = "termDeposit", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class TermDeposit extends Product implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyReference initialPayerReference;
	
	@Element
	private PartyReference initialReceiverReference;
	
	@Element
	private Date startDate;
	
	@Element
	private Date maturityDate;
	
	@Element
	private DayCountFraction dayCountFraction;
	
	@Element
	private Money principal;
	
	@Element
	private BigDecimal fixedRate;
	
	@Element
	private Money interest;
	
	@Element
	private List<Payment> payment;
	
    
	/**
     * public getter
     *
     * A pointer style reference to a party identifier defined elsewhere in the document. The party referenced is the payer of the initial principal of the deposit on the start date.
     *
     * @returns com.leansoft.fpml.nano.PartyReference
	 */
	public PartyReference getInitialPayerReference() {
	    return this.initialPayerReference;
	}
	
	/**
	 * public setter
	 *
     * A pointer style reference to a party identifier defined elsewhere in the document. The party referenced is the payer of the initial principal of the deposit on the start date.
     *
     * @param com.leansoft.fpml.nano.PartyReference
	 */
	public void setInitialPayerReference(PartyReference initialPayerReference) {
	    this.initialPayerReference = initialPayerReference;
	}
	/**
     * public getter
     *
     * A pointer style reference to a party identifier defined elsewhere in the document. The party is the receiver of the initial principal of the deposit on the start date.
     *
     * @returns com.leansoft.fpml.nano.PartyReference
	 */
	public PartyReference getInitialReceiverReference() {
	    return this.initialReceiverReference;
	}
	
	/**
	 * public setter
	 *
     * A pointer style reference to a party identifier defined elsewhere in the document. The party is the receiver of the initial principal of the deposit on the start date.
     *
     * @param com.leansoft.fpml.nano.PartyReference
	 */
	public void setInitialReceiverReference(PartyReference initialReceiverReference) {
	    this.initialReceiverReference = initialReceiverReference;
	}
	/**
     * public getter
     *
     * The averaging period start date.
     *
     * @returns java.util.Date
	 */
	public Date getStartDate() {
	    return this.startDate;
	}
	
	/**
	 * public setter
	 *
     * The averaging period start date.
     *
     * @param java.util.Date
	 */
	public void setStartDate(Date startDate) {
	    this.startDate = startDate;
	}
	/**
     * public getter
     *
     * The end date of the calculation period. This date should already be adjusted for any applicable business day convention.
     *
     * @returns java.util.Date
	 */
	public Date getMaturityDate() {
	    return this.maturityDate;
	}
	
	/**
	 * public setter
	 *
     * The end date of the calculation period. This date should already be adjusted for any applicable business day convention.
     *
     * @param java.util.Date
	 */
	public void setMaturityDate(Date maturityDate) {
	    this.maturityDate = maturityDate;
	}
	/**
     * public getter
     *
     * The day count fraction.
     *
     * @returns com.leansoft.fpml.nano.DayCountFraction
	 */
	public DayCountFraction getDayCountFraction() {
	    return this.dayCountFraction;
	}
	
	/**
	 * public setter
	 *
     * The day count fraction.
     *
     * @param com.leansoft.fpml.nano.DayCountFraction
	 */
	public void setDayCountFraction(DayCountFraction dayCountFraction) {
	    this.dayCountFraction = dayCountFraction;
	}
	/**
     * public getter
     *
     * The principal amount of the trade.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPrincipal() {
	    return this.principal;
	}
	
	/**
	 * public setter
	 *
     * The principal amount of the trade.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPrincipal(Money principal) {
	    this.principal = principal;
	}
	/**
     * public getter
     *
     * The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getFixedRate() {
	    return this.fixedRate;
	}
	
	/**
	 * public setter
	 *
     * The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setFixedRate(BigDecimal fixedRate) {
	    this.fixedRate = fixedRate;
	}
	/**
     * public getter
     *
     * The total interest of at maturity of the trade.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getInterest() {
	    return this.interest;
	}
	
	/**
	 * public setter
	 *
     * The total interest of at maturity of the trade.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setInterest(Money interest) {
	    this.interest = interest;
	}
	/**
     * public getter
     *
     * A known payment between two parties.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Payment>
	 */
	public List<Payment> getPayment() {
	    return this.payment;
	}
	
	/**
	 * public setter
	 *
     * A known payment between two parties.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Payment>
	 */
	public void setPayment(List<Payment> payment) {
	    this.payment = payment;
	}

}