// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;

/**
 * A type that defines a particular type of payout in an FX OTC exotic option. A European trigger occurs if the trigger criteria are met, but these are valid (and an observation is made) only at the maturity of the option.
 */
public class FxEuropeanTrigger implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private TriggerConditionEnum triggerCondition;
	
	@Element
	private QuotedCurrencyPair quotedCurrencyPair;
	
	@Element
	private BigDecimal triggerRate;
	
	@Element
	private List<InformationSource> informationSource;
	
    
	/**
     * public getter
     *
     * The condition that applies to a European-style trigger. It determines where the rate at expiry date and time at must be relative to the triggerRate for the option to be exercisable. The allowed values are "Above" and "Below".
     *
     * @returns com.leansoft.fpml.nano.TriggerConditionEnum
	 */
	public TriggerConditionEnum getTriggerCondition() {
	    return this.triggerCondition;
	}
	
	/**
	 * public setter
	 *
     * The condition that applies to a European-style trigger. It determines where the rate at expiry date and time at must be relative to the triggerRate for the option to be exercisable. The allowed values are "Above" and "Below".
     *
     * @param com.leansoft.fpml.nano.TriggerConditionEnum
	 */
	public void setTriggerCondition(TriggerConditionEnum triggerCondition) {
	    this.triggerCondition = triggerCondition;
	}
	/**
     * public getter
     *
     * Defines the two currencies for an FX trade and the quotation relationship between the two currencies.
     *
     * @returns com.leansoft.fpml.nano.QuotedCurrencyPair
	 */
	public QuotedCurrencyPair getQuotedCurrencyPair() {
	    return this.quotedCurrencyPair;
	}
	
	/**
	 * public setter
	 *
     * Defines the two currencies for an FX trade and the quotation relationship between the two currencies.
     *
     * @param com.leansoft.fpml.nano.QuotedCurrencyPair
	 */
	public void setQuotedCurrencyPair(QuotedCurrencyPair quotedCurrencyPair) {
	    this.quotedCurrencyPair = quotedCurrencyPair;
	}
	/**
     * public getter
     *
     * The market rate is observed relative to the trigger rate, and if it is found to be on the predefined side of (above or below) the trigger rate, a trigger event is deemed to have occurred.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getTriggerRate() {
	    return this.triggerRate;
	}
	
	/**
	 * public setter
	 *
     * The market rate is observed relative to the trigger rate, and if it is found to be on the predefined side of (above or below) the trigger rate, a trigger event is deemed to have occurred.
     *
     * @param java.math.BigDecimal
	 */
	public void setTriggerRate(BigDecimal triggerRate) {
	    this.triggerRate = triggerRate;
	}
	/**
     * public getter
     *
     * The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.InformationSource>
	 */
	public List<InformationSource> getInformationSource() {
	    return this.informationSource;
	}
	
	/**
	 * public setter
	 *
     * The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.
     *
     * @param java.util.List<com.leansoft.fpml.nano.InformationSource>
	 */
	public void setInformationSource(List<InformationSource> informationSource) {
	    this.informationSource = informationSource;
	}

}