// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A type defining the adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. This type forms part of the cashflow representation of a swap stream.
 */
public class PaymentCalculationPeriod implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Date unadjustedPaymentDate;
	
	@Element
	private Date adjustedPaymentDate;
	
	@Element
	private List<CalculationPeriod> calculationPeriod;
	
	@Element
	private BigDecimal fixedPaymentAmount;
	
	@Element
	private BigDecimal discountFactor;
	
	@Element
	private Money forecastPaymentAmount;
	
	@Element
	private Money presentValueAmount;
	
	@Attribute  
	private String id;
	
	@Attribute  
	private Object href;
	
    
	/**
	 * public getter
	 *
     * @returns java.util.Date
	 */
	public Date getUnadjustedPaymentDate() {
	    return this.unadjustedPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.Date
	 */
	public void setUnadjustedPaymentDate(Date unadjustedPaymentDate) {
	    this.unadjustedPaymentDate = unadjustedPaymentDate;
	}
	/**
     * public getter
     *
     * The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component (all dates the Cashflows type are adjusted payment dates).
     *
     * @returns java.util.Date
	 */
	public Date getAdjustedPaymentDate() {
	    return this.adjustedPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component (all dates the Cashflows type are adjusted payment dates).
     *
     * @param java.util.Date
	 */
	public void setAdjustedPaymentDate(Date adjustedPaymentDate) {
	    this.adjustedPaymentDate = adjustedPaymentDate;
	}
	/**
     * public getter
     *
     * The parameters used in the calculation of a fixed or floating rate calculation period amount. A list of calculation period elements may be ordered in the document by ascending start date. An FpML document which contains an unordered list of calcularion periods is still regarded as a conformant document.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.CalculationPeriod>
	 */
	public List<CalculationPeriod> getCalculationPeriod() {
	    return this.calculationPeriod;
	}
	
	/**
	 * public setter
	 *
     * The parameters used in the calculation of a fixed or floating rate calculation period amount. A list of calculation period elements may be ordered in the document by ascending start date. An FpML document which contains an unordered list of calcularion periods is still regarded as a conformant document.
     *
     * @param java.util.List<com.leansoft.fpml.nano.CalculationPeriod>
	 */
	public void setCalculationPeriod(List<CalculationPeriod> calculationPeriod) {
	    this.calculationPeriod = calculationPeriod;
	}
	/**
     * public getter
     *
     * A known fixed payment amount.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getFixedPaymentAmount() {
	    return this.fixedPaymentAmount;
	}
	
	/**
	 * public setter
	 *
     * A known fixed payment amount.
     *
     * @param java.math.BigDecimal
	 */
	public void setFixedPaymentAmount(BigDecimal fixedPaymentAmount) {
	    this.fixedPaymentAmount = fixedPaymentAmount;
	}
	/**
     * public getter
     *
     * A decimal value representing the discount factor used to calculate the present value of cash flow.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getDiscountFactor() {
	    return this.discountFactor;
	}
	
	/**
	 * public setter
	 *
     * A decimal value representing the discount factor used to calculate the present value of cash flow.
     *
     * @param java.math.BigDecimal
	 */
	public void setDiscountFactor(BigDecimal discountFactor) {
	    this.discountFactor = discountFactor;
	}
	/**
     * public getter
     *
     * A monetary amount representing the forecast of the future value of the payment.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getForecastPaymentAmount() {
	    return this.forecastPaymentAmount;
	}
	
	/**
	 * public setter
	 *
     * A monetary amount representing the forecast of the future value of the payment.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setForecastPaymentAmount(Money forecastPaymentAmount) {
	    this.forecastPaymentAmount = forecastPaymentAmount;
	}
	/**
     * public getter
     *
     * A monetary amount representing the present value of the forecast payment.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPresentValueAmount() {
	    return this.presentValueAmount;
	}
	
	/**
	 * public setter
	 *
     * A monetary amount representing the present value of the forecast payment.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPresentValueAmount(Money presentValueAmount) {
	    this.presentValueAmount = presentValueAmount;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.Object
	 */
	public Object getHref() {
	    return this.href;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.Object
	 */
	public void setHref(Object href) {
	    this.href = href;
	}

}