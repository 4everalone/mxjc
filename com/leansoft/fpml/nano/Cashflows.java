// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * A type defining the cashflow representation of a swap trade.
 */
public class Cashflows implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private boolean cashflowsMatchParameters;
	
	@Element
	private List<PrincipalExchange> principalExchange;
	
	@Element
	private List<PaymentCalculationPeriod> paymentCalculationPeriod;
	
    
	/**
     * public getter
     *
     * A true/false flag to indicate whether the cashflows match the parametric definition of the stream, i.e. whether the cashflows could be regenerated from the parameters without loss of information.
     *
     * @returns .boolean
	 */
	public boolean getCashflowsMatchParameters() {
	    return this.cashflowsMatchParameters;
	}
	
	/**
	 * public setter
	 *
     * A true/false flag to indicate whether the cashflows match the parametric definition of the stream, i.e. whether the cashflows could be regenerated from the parameters without loss of information.
     *
     * @param .boolean
	 */
	public void setCashflowsMatchParameters(boolean cashflowsMatchParameters) {
	    this.cashflowsMatchParameters = cashflowsMatchParameters;
	}
	/**
     * public getter
     *
     * The initial, intermediate and final principal exchange amounts. Typically required on cross currency interest rate swaps where actual exchanges of principal occur. A list of principal exchange elements may be ordered in the document by ascending adjusted principal exchange date. An FpML document containing an unordered principal exchange list is still regarded as a conformant document.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.PrincipalExchange>
	 */
	public List<PrincipalExchange> getPrincipalExchange() {
	    return this.principalExchange;
	}
	
	/**
	 * public setter
	 *
     * The initial, intermediate and final principal exchange amounts. Typically required on cross currency interest rate swaps where actual exchanges of principal occur. A list of principal exchange elements may be ordered in the document by ascending adjusted principal exchange date. An FpML document containing an unordered principal exchange list is still regarded as a conformant document.
     *
     * @param java.util.List<com.leansoft.fpml.nano.PrincipalExchange>
	 */
	public void setPrincipalExchange(List<PrincipalExchange> principalExchange) {
	    this.principalExchange = principalExchange;
	}
	/**
     * public getter
     *
     * The adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. A list of payment calculation period elements may be ordered in the document by ascending adjusted payment date. An FpML document containing an unordered list of payment calculation periods is still regarded as a conformant document.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.PaymentCalculationPeriod>
	 */
	public List<PaymentCalculationPeriod> getPaymentCalculationPeriod() {
	    return this.paymentCalculationPeriod;
	}
	
	/**
	 * public setter
	 *
     * The adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. A list of payment calculation period elements may be ordered in the document by ascending adjusted payment date. An FpML document containing an unordered list of payment calculation periods is still regarded as a conformant document.
     *
     * @param java.util.List<com.leansoft.fpml.nano.PaymentCalculationPeriod>
	 */
	public void setPaymentCalculationPeriod(List<PaymentCalculationPeriod> paymentCalculationPeriod) {
	    this.paymentCalculationPeriod = paymentCalculationPeriod;
	}

}