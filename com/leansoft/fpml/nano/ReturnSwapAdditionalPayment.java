// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type describing the additional payment(s) between the principal parties to the trade. This component extends some of the features of the additionalPayment component previously developed in FpML. Appropriate discussions will determine whether it would be appropriate to extend the shared component in order to meet the further requirements of equity swaps.
 */
public class ReturnSwapAdditionalPayment implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrAccountReference payerPartyReference;
	
	@Element
	private PartyOrAccountReference receiverPartyReference;
	
	@Element
	private AdditionalPaymentAmount additionalPaymentAmount;
	
	@Element
	private AdjustableOrRelativeDate additionalPaymentDate;
	
	@Element
	private PaymentType paymentType;
	
    
	/**
     * public getter
     *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getPayerPartyReference() {
	    return this.payerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setPayerPartyReference(PartyOrAccountReference payerPartyReference) {
	    this.payerPartyReference = payerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getReceiverPartyReference() {
	    return this.receiverPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setReceiverPartyReference(PartyOrAccountReference receiverPartyReference) {
	    this.receiverPartyReference = receiverPartyReference;
	}
	/**
     * public getter
     *
     * Specifies the amount of the fee along with, when applicable, the formula that supports its determination.
     *
     * @returns com.leansoft.fpml.nano.AdditionalPaymentAmount
	 */
	public AdditionalPaymentAmount getAdditionalPaymentAmount() {
	    return this.additionalPaymentAmount;
	}
	
	/**
	 * public setter
	 *
     * Specifies the amount of the fee along with, when applicable, the formula that supports its determination.
     *
     * @param com.leansoft.fpml.nano.AdditionalPaymentAmount
	 */
	public void setAdditionalPaymentAmount(AdditionalPaymentAmount additionalPaymentAmount) {
	    this.additionalPaymentAmount = additionalPaymentAmount;
	}
	/**
     * public getter
     *
     * Specifies the value date of the fee payment/receipt.
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getAdditionalPaymentDate() {
	    return this.additionalPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * Specifies the value date of the fee payment/receipt.
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setAdditionalPaymentDate(AdjustableOrRelativeDate additionalPaymentDate) {
	    this.additionalPaymentDate = additionalPaymentDate;
	}
	/**
     * public getter
     *
     * Classification of the payment
     *
     * @returns com.leansoft.fpml.nano.PaymentType
	 */
	public PaymentType getPaymentType() {
	    return this.paymentType;
	}
	
	/**
	 * public setter
	 *
     * Classification of the payment
     *
     * @param com.leansoft.fpml.nano.PaymentType
	 */
	public void setPaymentType(PaymentType paymentType) {
	    this.paymentType = paymentType;
	}

}