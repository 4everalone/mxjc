// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * Base type for options starting with the 5-0 release, until we refactor the schema as part of the 5-0 release series
 */
public abstract class OptionBaseExtended extends OptionBase implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Premium premium;
	
	@Element
	private ExerciseProcedure exerciseProcedure;
	
	@Element
	private OptionFeature feature;
	
	@Element
	private NotionalAmountReference notionalReference;
	
	@Element
	private Money notionalAmount;
	
	@Element
	private BigDecimal optionEntitlement;
	
	@Element
	private Currency entitlementCurrency;
	
	@Element
	private BigDecimal numberOfOptions;
	
	@Element
	private SettlementTypeEnum settlementType;
	
	@Element
	private AdjustableOrRelativeDate settlementDate;
	
	@Element
	private Money settlementAmount;
	
	@Element
	private Currency settlementCurrency;
	
    
	/**
     * public getter
     *
     * The option premium payable by the buyer to the seller
     *
     * @returns com.leansoft.fpml.nano.Premium
	 */
	public Premium getPremium() {
	    return this.premium;
	}
	
	/**
	 * public setter
	 *
     * The option premium payable by the buyer to the seller
     *
     * @param com.leansoft.fpml.nano.Premium
	 */
	public void setPremium(Premium premium) {
	    this.premium = premium;
	}
	/**
     * public getter
     *
     * A set of parameters defining procedures associated with the exercise.
     *
     * @returns com.leansoft.fpml.nano.ExerciseProcedure
	 */
	public ExerciseProcedure getExerciseProcedure() {
	    return this.exerciseProcedure;
	}
	
	/**
	 * public setter
	 *
     * A set of parameters defining procedures associated with the exercise.
     *
     * @param com.leansoft.fpml.nano.ExerciseProcedure
	 */
	public void setExerciseProcedure(ExerciseProcedure exerciseProcedure) {
	    this.exerciseProcedure = exerciseProcedure;
	}
	/**
     * public getter
     *
     * An Option feature such as quanto, asian, barrier, knock
     *
     * @returns com.leansoft.fpml.nano.OptionFeature
	 */
	public OptionFeature getFeature() {
	    return this.feature;
	}
	
	/**
	 * public setter
	 *
     * An Option feature such as quanto, asian, barrier, knock
     *
     * @param com.leansoft.fpml.nano.OptionFeature
	 */
	public void setFeature(OptionFeature feature) {
	    this.feature = feature;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.NotionalAmountReference
	 */
	public NotionalAmountReference getNotionalReference() {
	    return this.notionalReference;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.NotionalAmountReference
	 */
	public void setNotionalReference(NotionalAmountReference notionalReference) {
	    this.notionalReference = notionalReference;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getNotionalAmount() {
	    return this.notionalAmount;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setNotionalAmount(Money notionalAmount) {
	    this.notionalAmount = notionalAmount;
	}
	/**
     * public getter
     *
     * The number of units of underlyer per option comprised in the option transaction.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getOptionEntitlement() {
	    return this.optionEntitlement;
	}
	
	/**
	 * public setter
	 *
     * The number of units of underlyer per option comprised in the option transaction.
     *
     * @param java.math.BigDecimal
	 */
	public void setOptionEntitlement(BigDecimal optionEntitlement) {
	    this.optionEntitlement = optionEntitlement;
	}
	/**
     * public getter
     *
     * TODO
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getEntitlementCurrency() {
	    return this.entitlementCurrency;
	}
	
	/**
	 * public setter
	 *
     * TODO
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setEntitlementCurrency(Currency entitlementCurrency) {
	    this.entitlementCurrency = entitlementCurrency;
	}
	/**
     * public getter
     *
     * The number of options comprised in the option transaction.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getNumberOfOptions() {
	    return this.numberOfOptions;
	}
	
	/**
	 * public setter
	 *
     * The number of options comprised in the option transaction.
     *
     * @param java.math.BigDecimal
	 */
	public void setNumberOfOptions(BigDecimal numberOfOptions) {
	    this.numberOfOptions = numberOfOptions;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.SettlementTypeEnum
	 */
	public SettlementTypeEnum getSettlementType() {
	    return this.settlementType;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.SettlementTypeEnum
	 */
	public void setSettlementType(SettlementTypeEnum settlementType) {
	    this.settlementType = settlementType;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getSettlementDate() {
	    return this.settlementDate;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setSettlementDate(AdjustableOrRelativeDate settlementDate) {
	    this.settlementDate = settlementDate;
	}
	/**
     * public getter
     *
     * Settlement Amount
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getSettlementAmount() {
	    return this.settlementAmount;
	}
	
	/**
	 * public setter
	 *
     * Settlement Amount
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setSettlementAmount(Money settlementAmount) {
	    this.settlementAmount = settlementAmount;
	}
	/**
     * public getter
     *
     * Settlement Currency for use where the Settlement Amount cannot be known in advance
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getSettlementCurrency() {
	    return this.settlementCurrency;
	}
	
	/**
	 * public setter
	 *
     * Settlement Currency for use where the Settlement Amount cannot be known in advance
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setSettlementCurrency(Currency settlementCurrency) {
	    this.settlementCurrency = settlementCurrency;
	}

}