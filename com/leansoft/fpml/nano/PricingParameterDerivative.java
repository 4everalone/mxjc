// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * A definition of the mathematical derivative with respect to a specific pricing parameter.
 */
public class PricingParameterDerivative implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private String description;
	
	@Element
	private AssetOrTermPointOrPricingStructureReference parameterReference;
	
	@Element
	private List<ValuationReference> inputDateReference;
	
	@Element
	private DerivativeCalculationProcedure calculationProcedure;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * A description, if needed, of how the derivative is computed.
     *
     * @returns java.lang.String
	 */
	public String getDescription() {
	    return this.description;
	}
	
	/**
	 * public setter
	 *
     * A description, if needed, of how the derivative is computed.
     *
     * @param java.lang.String
	 */
	public void setDescription(String description) {
	    this.description = description;
	}
	/**
     * public getter
     *
     * A reference to the pricing input parameter to which the sensitivity is computed. If it is omitted, the derivative definition is generic, and applies to any input point in the valuation set.
     *
     * @returns com.leansoft.fpml.nano.AssetOrTermPointOrPricingStructureReference
	 */
	public AssetOrTermPointOrPricingStructureReference getParameterReference() {
	    return this.parameterReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the pricing input parameter to which the sensitivity is computed. If it is omitted, the derivative definition is generic, and applies to any input point in the valuation set.
     *
     * @param com.leansoft.fpml.nano.AssetOrTermPointOrPricingStructureReference
	 */
	public void setParameterReference(AssetOrTermPointOrPricingStructureReference parameterReference) {
	    this.parameterReference = parameterReference;
	}
	/**
     * public getter
     *
     * Reference(s) to the pricing input dates that are shifted when the sensitivity is computed. Depending on the time advance method used, this list could vary. Used for describing time-advance derivatives (theta, carry, etc.)
     *
     * @returns java.util.List<com.leansoft.fpml.nano.ValuationReference>
	 */
	public List<ValuationReference> getInputDateReference() {
	    return this.inputDateReference;
	}
	
	/**
	 * public setter
	 *
     * Reference(s) to the pricing input dates that are shifted when the sensitivity is computed. Depending on the time advance method used, this list could vary. Used for describing time-advance derivatives (theta, carry, etc.)
     *
     * @param java.util.List<com.leansoft.fpml.nano.ValuationReference>
	 */
	public void setInputDateReference(List<ValuationReference> inputDateReference) {
	    this.inputDateReference = inputDateReference;
	}
	/**
     * public getter
     *
     * The method by which a derivative is computed, e.g. analytic, numerical model, perturbation, etc., and the corresponding parameters
     *
     * @returns com.leansoft.fpml.nano.DerivativeCalculationProcedure
	 */
	public DerivativeCalculationProcedure getCalculationProcedure() {
	    return this.calculationProcedure;
	}
	
	/**
	 * public setter
	 *
     * The method by which a derivative is computed, e.g. analytic, numerical model, perturbation, etc., and the corresponding parameters
     *
     * @param com.leansoft.fpml.nano.DerivativeCalculationProcedure
	 */
	public void setCalculationProcedure(DerivativeCalculationProcedure calculationProcedure) {
	    this.calculationProcedure = calculationProcedure;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}