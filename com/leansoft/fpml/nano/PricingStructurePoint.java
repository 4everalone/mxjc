// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A single valued point with a set of coordinates that define an arbitrary number of indentifying indexes (0 or more). Note that the collection of coordinates/coordinate references for a PricingStructurePoint must not define a given dimension (other than "generic") more than once. This is to avoid ambiguity.
 */
public class PricingStructurePoint implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private List<Object> pricingCoordinateOrReferenceModel;
	
	@Element
	private AssetReference underlyingAssetReference;
	
	@Element
	private BigDecimal value;
	
	@Element
	private AssetMeasureType measureType;
	
	@Element
	private PriceQuoteUnits quoteUnits;
	
	@Element
	private QuotationSideEnum side;
	
	@Element
	private Currency currency;
	
	@Element
	private QuoteTiming timing;
	
	@Element
	private BusinessCenter businessCenter;
	
	@Element
	private ExchangeId exchangeId;
	
	@Element
	private List<InformationSource> informationSource;
	
	@Element
	private Date time;
	
	@Element
	private Date valuationDate;
	
	@Element
	private Date expiryTime;
	
	@Element
	private CashflowType cashflowType;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * A pricing structure coordinate, or a reference to one. This can be used to either directly define a coordinate or reference an existing coordinate.
     *
     * @returns java.util.List<java.lang.Object>
	 */
	public List<Object> getPricingCoordinateOrReferenceModel() {
	    return this.pricingCoordinateOrReferenceModel;
	}
	
	/**
	 * public setter
	 *
     * A pricing structure coordinate, or a reference to one. This can be used to either directly define a coordinate or reference an existing coordinate.
     *
     * @param java.util.List<java.lang.Object>
	 */
	public void setPricingCoordinateOrReferenceModel(List<Object> pricingCoordinateOrReferenceModel) {
	    this.pricingCoordinateOrReferenceModel = pricingCoordinateOrReferenceModel;
	}
	/**
     * public getter
     *
     * A reference to an underlying asset that defines the meaning of the value, i.e. the product that the value corresponds to. For example, this could be a caplet or simple european swaption.
     *
     * @returns com.leansoft.fpml.nano.AssetReference
	 */
	public AssetReference getUnderlyingAssetReference() {
	    return this.underlyingAssetReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to an underlying asset that defines the meaning of the value, i.e. the product that the value corresponds to. For example, this could be a caplet or simple european swaption.
     *
     * @param com.leansoft.fpml.nano.AssetReference
	 */
	public void setUnderlyingAssetReference(AssetReference underlyingAssetReference) {
	    this.underlyingAssetReference = underlyingAssetReference;
	}
	/**
     * public getter
     *
     * The value of the the quotation.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getValue() {
	    return this.value;
	}
	
	/**
	 * public setter
	 *
     * The value of the the quotation.
     *
     * @param java.math.BigDecimal
	 */
	public void setValue(BigDecimal value) {
	    this.value = value;
	}
	/**
     * public getter
     *
     * The type of the value that is measured. This could be an NPV, a cash flow, a clean price, etc.
     *
     * @returns com.leansoft.fpml.nano.AssetMeasureType
	 */
	public AssetMeasureType getMeasureType() {
	    return this.measureType;
	}
	
	/**
	 * public setter
	 *
     * The type of the value that is measured. This could be an NPV, a cash flow, a clean price, etc.
     *
     * @param com.leansoft.fpml.nano.AssetMeasureType
	 */
	public void setMeasureType(AssetMeasureType measureType) {
	    this.measureType = measureType;
	}
	/**
     * public getter
     *
     * The optional units that the measure is expressed in. If not supplied, this is assumed to be a price/value in currency units.
     *
     * @returns com.leansoft.fpml.nano.PriceQuoteUnits
	 */
	public PriceQuoteUnits getQuoteUnits() {
	    return this.quoteUnits;
	}
	
	/**
	 * public setter
	 *
     * The optional units that the measure is expressed in. If not supplied, this is assumed to be a price/value in currency units.
     *
     * @param com.leansoft.fpml.nano.PriceQuoteUnits
	 */
	public void setQuoteUnits(PriceQuoteUnits quoteUnits) {
	    this.quoteUnits = quoteUnits;
	}
	/**
     * public getter
     *
     * The side (bid/mid/ask) of the measure.
     *
     * @returns com.leansoft.fpml.nano.QuotationSideEnum
	 */
	public QuotationSideEnum getSide() {
	    return this.side;
	}
	
	/**
	 * public setter
	 *
     * The side (bid/mid/ask) of the measure.
     *
     * @param com.leansoft.fpml.nano.QuotationSideEnum
	 */
	public void setSide(QuotationSideEnum side) {
	    this.side = side;
	}
	/**
     * public getter
     *
     * The optional currency that the measure is expressed in. If not supplied, this is defaulted from the reportingCurrency in the valuationScenarioDefinition.
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getCurrency() {
	    return this.currency;
	}
	
	/**
	 * public setter
	 *
     * The optional currency that the measure is expressed in. If not supplied, this is defaulted from the reportingCurrency in the valuationScenarioDefinition.
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setCurrency(Currency currency) {
	    this.currency = currency;
	}
	/**
     * public getter
     *
     * When during a day the quote is for. Typically, if this element is supplied, the QuoteLocation needs also to be supplied.
     *
     * @returns com.leansoft.fpml.nano.QuoteTiming
	 */
	public QuoteTiming getTiming() {
	    return this.timing;
	}
	
	/**
	 * public setter
	 *
     * When during a day the quote is for. Typically, if this element is supplied, the QuoteLocation needs also to be supplied.
     *
     * @param com.leansoft.fpml.nano.QuoteTiming
	 */
	public void setTiming(QuoteTiming timing) {
	    this.timing = timing;
	}
	/**
     * public getter
     *
     * A city or other business center.
     *
     * @returns com.leansoft.fpml.nano.BusinessCenter
	 */
	public BusinessCenter getBusinessCenter() {
	    return this.businessCenter;
	}
	
	/**
	 * public setter
	 *
     * A city or other business center.
     *
     * @param com.leansoft.fpml.nano.BusinessCenter
	 */
	public void setBusinessCenter(BusinessCenter businessCenter) {
	    this.businessCenter = businessCenter;
	}
	/**
     * public getter
     *
     * The exchange (e.g. stock or futures exchange) from which the quote is obtained.
     *
     * @returns com.leansoft.fpml.nano.ExchangeId
	 */
	public ExchangeId getExchangeId() {
	    return this.exchangeId;
	}
	
	/**
	 * public setter
	 *
     * The exchange (e.g. stock or futures exchange) from which the quote is obtained.
     *
     * @param com.leansoft.fpml.nano.ExchangeId
	 */
	public void setExchangeId(ExchangeId exchangeId) {
	    this.exchangeId = exchangeId;
	}
	/**
     * public getter
     *
     * The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.InformationSource>
	 */
	public List<InformationSource> getInformationSource() {
	    return this.informationSource;
	}
	
	/**
	 * public setter
	 *
     * The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.
     *
     * @param java.util.List<com.leansoft.fpml.nano.InformationSource>
	 */
	public void setInformationSource(List<InformationSource> informationSource) {
	    this.informationSource = informationSource;
	}
	/**
     * public getter
     *
     * When the quote was observed or derived.
     *
     * @returns java.util.Date
	 */
	public Date getTime() {
	    return this.time;
	}
	
	/**
	 * public setter
	 *
     * When the quote was observed or derived.
     *
     * @param java.util.Date
	 */
	public void setTime(Date time) {
	    this.time = time;
	}
	/**
     * public getter
     *
     * When the quote was computed.
     *
     * @returns java.util.Date
	 */
	public Date getValuationDate() {
	    return this.valuationDate;
	}
	
	/**
	 * public setter
	 *
     * When the quote was computed.
     *
     * @param java.util.Date
	 */
	public void setValuationDate(Date valuationDate) {
	    this.valuationDate = valuationDate;
	}
	/**
     * public getter
     *
     * When does the quote cease to be valid.
     *
     * @returns java.util.Date
	 */
	public Date getExpiryTime() {
	    return this.expiryTime;
	}
	
	/**
	 * public setter
	 *
     * When does the quote cease to be valid.
     *
     * @param java.util.Date
	 */
	public void setExpiryTime(Date expiryTime) {
	    this.expiryTime = expiryTime;
	}
	/**
     * public getter
     *
     * For cash flows, the type of the cash flows. Examples include: Coupon payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.
     *
     * @returns com.leansoft.fpml.nano.CashflowType
	 */
	public CashflowType getCashflowType() {
	    return this.cashflowType;
	}
	
	/**
	 * public setter
	 *
     * For cash flows, the type of the cash flows. Examples include: Coupon payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.
     *
     * @param com.leansoft.fpml.nano.CashflowType
	 */
	public void setCashflowType(CashflowType cashflowType) {
	    this.cashflowType = cashflowType;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}