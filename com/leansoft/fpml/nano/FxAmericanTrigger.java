// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;
import java.util.Date;

/**
 * A tyoe that defines a particular type of payout in an FX OTC exotic option. An American trigger occurs if the trigger criteria are met at any time from the initiation to the maturity of the option.
 */
public class FxAmericanTrigger implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private TouchConditionEnum touchCondition;
	
	@Element
	private QuotedCurrencyPair quotedCurrencyPair;
	
	@Element
	private BigDecimal triggerRate;
	
	@Element
	private List<InformationSource> informationSource;
	
	@Element
	private Date observationStartDate;
	
	@Element
	private Date observationEndDate;
	
    
	/**
     * public getter
     *
     * The binary condition that applies to an American-style trigger. There can only be two domain values for this element: "touch" or "no touch".
     *
     * @returns com.leansoft.fpml.nano.TouchConditionEnum
	 */
	public TouchConditionEnum getTouchCondition() {
	    return this.touchCondition;
	}
	
	/**
	 * public setter
	 *
     * The binary condition that applies to an American-style trigger. There can only be two domain values for this element: "touch" or "no touch".
     *
     * @param com.leansoft.fpml.nano.TouchConditionEnum
	 */
	public void setTouchCondition(TouchConditionEnum touchCondition) {
	    this.touchCondition = touchCondition;
	}
	/**
     * public getter
     *
     * Defines the two currencies for an FX trade and the quotation relationship between the two currencies.
     *
     * @returns com.leansoft.fpml.nano.QuotedCurrencyPair
	 */
	public QuotedCurrencyPair getQuotedCurrencyPair() {
	    return this.quotedCurrencyPair;
	}
	
	/**
	 * public setter
	 *
     * Defines the two currencies for an FX trade and the quotation relationship between the two currencies.
     *
     * @param com.leansoft.fpml.nano.QuotedCurrencyPair
	 */
	public void setQuotedCurrencyPair(QuotedCurrencyPair quotedCurrencyPair) {
	    this.quotedCurrencyPair = quotedCurrencyPair;
	}
	/**
     * public getter
     *
     * The market rate is observed relative to the trigger rate, and if it is found to be on the predefined side of (above or below) the trigger rate, a trigger event is deemed to have occurred.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getTriggerRate() {
	    return this.triggerRate;
	}
	
	/**
	 * public setter
	 *
     * The market rate is observed relative to the trigger rate, and if it is found to be on the predefined side of (above or below) the trigger rate, a trigger event is deemed to have occurred.
     *
     * @param java.math.BigDecimal
	 */
	public void setTriggerRate(BigDecimal triggerRate) {
	    this.triggerRate = triggerRate;
	}
	/**
     * public getter
     *
     * The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.InformationSource>
	 */
	public List<InformationSource> getInformationSource() {
	    return this.informationSource;
	}
	
	/**
	 * public setter
	 *
     * The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.
     *
     * @param java.util.List<com.leansoft.fpml.nano.InformationSource>
	 */
	public void setInformationSource(List<InformationSource> informationSource) {
	    this.informationSource = informationSource;
	}
	/**
     * public getter
     *
     * The start of the period over which observations are made to determine whether a trigger has occurred.
     *
     * @returns java.util.Date
	 */
	public Date getObservationStartDate() {
	    return this.observationStartDate;
	}
	
	/**
	 * public setter
	 *
     * The start of the period over which observations are made to determine whether a trigger has occurred.
     *
     * @param java.util.Date
	 */
	public void setObservationStartDate(Date observationStartDate) {
	    this.observationStartDate = observationStartDate;
	}
	/**
     * public getter
     *
     * The end of the period over which observations are made to determine whether a trigger event has occurred.
     *
     * @returns java.util.Date
	 */
	public Date getObservationEndDate() {
	    return this.observationEndDate;
	}
	
	/**
	 * public setter
	 *
     * The end of the period over which observations are made to determine whether a trigger event has occurred.
     *
     * @param java.util.Date
	 */
	public void setObservationEndDate(Date observationEndDate) {
	    this.observationEndDate = observationEndDate;
	}

}