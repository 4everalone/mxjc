// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * This type is used to identify that a trade id is referring to a bock trade.
 */
public class BlockTradeIdentifier extends PartyTradeIdentifier implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private List<PartyTradeIdentifier> allocationTradeId;
	
	@Element
	private PartyTradeIdentifier blockTradeId;
	
    
	/**
     * public getter
     *
     * The trade id of the allocated trade. This is used by the block trade to reference the allocated trade.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.PartyTradeIdentifier>
	 */
	public List<PartyTradeIdentifier> getAllocationTradeId() {
	    return this.allocationTradeId;
	}
	
	/**
	 * public setter
	 *
     * The trade id of the allocated trade. This is used by the block trade to reference the allocated trade.
     *
     * @param java.util.List<com.leansoft.fpml.nano.PartyTradeIdentifier>
	 */
	public void setAllocationTradeId(List<PartyTradeIdentifier> allocationTradeId) {
	    this.allocationTradeId = allocationTradeId;
	}
	/**
     * public getter
     *
     * The trade id of the parent trade for N-level allocations. This element is only used to model N-level allocations in which the trade acts as block and allocated trade at the same time.This basically means the ability to allocate a block trade to multiple allocation trades, and then allocate these in turn to other allocation trades (and so on if desired).
     *
     * @returns com.leansoft.fpml.nano.PartyTradeIdentifier
	 */
	public PartyTradeIdentifier getBlockTradeId() {
	    return this.blockTradeId;
	}
	
	/**
	 * public setter
	 *
     * The trade id of the parent trade for N-level allocations. This element is only used to model N-level allocations in which the trade acts as block and allocated trade at the same time.This basically means the ability to allocate a block trade to multiple allocation trades, and then allocate these in turn to other allocation trades (and so on if desired).
     *
     * @param com.leansoft.fpml.nano.PartyTradeIdentifier
	 */
	public void setBlockTradeId(PartyTradeIdentifier blockTradeId) {
	    this.blockTradeId = blockTradeId;
	}

}