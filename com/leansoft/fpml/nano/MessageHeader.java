// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type defining the content model for a generic message header that is refined by its derived classes.
 */
public abstract class MessageHeader implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private ConversationId conversationId;
	
	@Element
	private MessageId messageId;
	
    
	/**
     * public getter
     *
     * The unique identifier (name) for the conversation (session), this message is within. A conversation identifier is usually assigned by the initiator of a conversation. Conversations may only be initiated and terminated. Joining conversations has the effect of initiating new conversations. Conversations cannot be split; this instead has the effect of parallel activities on the same conversation or the initiation of a new conversation. Each message belongs to only one conversation. Conversation scopes are defined in the business process definition.
     *
     * @returns com.leansoft.fpml.nano.ConversationId
	 */
	public ConversationId getConversationId() {
	    return this.conversationId;
	}
	
	/**
	 * public setter
	 *
     * The unique identifier (name) for the conversation (session), this message is within. A conversation identifier is usually assigned by the initiator of a conversation. Conversations may only be initiated and terminated. Joining conversations has the effect of initiating new conversations. Conversations cannot be split; this instead has the effect of parallel activities on the same conversation or the initiation of a new conversation. Each message belongs to only one conversation. Conversation scopes are defined in the business process definition.
     *
     * @param com.leansoft.fpml.nano.ConversationId
	 */
	public void setConversationId(ConversationId conversationId) {
	    this.conversationId = conversationId;
	}
	/**
     * public getter
     *
     * A unique identifier (within its coding scheme) assigned to the message by its creating party.
     *
     * @returns com.leansoft.fpml.nano.MessageId
	 */
	public MessageId getMessageId() {
	    return this.messageId;
	}
	
	/**
	 * public setter
	 *
     * A unique identifier (within its coding scheme) assigned to the message by its creating party.
     *
     * @param com.leansoft.fpml.nano.MessageId
	 */
	public void setMessageId(MessageId messageId) {
	    this.messageId = messageId;
	}

}