// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type for defining the merger events and their treatment.
 */
public class EquityCorporateEvents implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private ShareExtraordinaryEventEnum shareForShare;
	
	@Element
	private ShareExtraordinaryEventEnum shareForOther;
	
	@Element
	private ShareExtraordinaryEventEnum shareForCombined;
	
    
	/**
     * public getter
     *
     * The consideration paid for the original shares following the Merger Event consists wholly of new shares.
     *
     * @returns com.leansoft.fpml.nano.ShareExtraordinaryEventEnum
	 */
	public ShareExtraordinaryEventEnum getShareForShare() {
	    return this.shareForShare;
	}
	
	/**
	 * public setter
	 *
     * The consideration paid for the original shares following the Merger Event consists wholly of new shares.
     *
     * @param com.leansoft.fpml.nano.ShareExtraordinaryEventEnum
	 */
	public void setShareForShare(ShareExtraordinaryEventEnum shareForShare) {
	    this.shareForShare = shareForShare;
	}
	/**
     * public getter
     *
     * The consideration paid for the original shares following the Merger Event consists wholly of cash/securities other than new shares.
     *
     * @returns com.leansoft.fpml.nano.ShareExtraordinaryEventEnum
	 */
	public ShareExtraordinaryEventEnum getShareForOther() {
	    return this.shareForOther;
	}
	
	/**
	 * public setter
	 *
     * The consideration paid for the original shares following the Merger Event consists wholly of cash/securities other than new shares.
     *
     * @param com.leansoft.fpml.nano.ShareExtraordinaryEventEnum
	 */
	public void setShareForOther(ShareExtraordinaryEventEnum shareForOther) {
	    this.shareForOther = shareForOther;
	}
	/**
     * public getter
     *
     * The consideration paid for the original shares following the Merger Event consists of both cash/securities and new shares.
     *
     * @returns com.leansoft.fpml.nano.ShareExtraordinaryEventEnum
	 */
	public ShareExtraordinaryEventEnum getShareForCombined() {
	    return this.shareForCombined;
	}
	
	/**
	 * public setter
	 *
     * The consideration paid for the original shares following the Merger Event consists of both cash/securities and new shares.
     *
     * @param com.leansoft.fpml.nano.ShareExtraordinaryEventEnum
	 */
	public void setShareForCombined(ShareExtraordinaryEventEnum shareForCombined) {
	    this.shareForCombined = shareForCombined;
	}

}