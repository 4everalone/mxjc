// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

public class CashflowCalculationElements implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private UnderlyerReferenceUnits numberOfUnits;
	
	@Element
	private CashflowNotional notional;
	
	@Element
	private List<TradeUnderlyer> underlyer;
	
	@Element
	private List<CashflowFixing> calculatedRate;
	
	@Element
	private List<CashflowCalculationPeriod> calculationPeriod;
	
    
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.UnderlyerReferenceUnits
	 */
	public UnderlyerReferenceUnits getNumberOfUnits() {
	    return this.numberOfUnits;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.UnderlyerReferenceUnits
	 */
	public void setNumberOfUnits(UnderlyerReferenceUnits numberOfUnits) {
	    this.numberOfUnits = numberOfUnits;
	}
	/**
     * public getter
     *
     * Identifies the notional in effect for this calculation period.
     *
     * @returns com.leansoft.fpml.nano.CashflowNotional
	 */
	public CashflowNotional getNotional() {
	    return this.notional;
	}
	
	/**
	 * public setter
	 *
     * Identifies the notional in effect for this calculation period.
     *
     * @param com.leansoft.fpml.nano.CashflowNotional
	 */
	public void setNotional(CashflowNotional notional) {
	    this.notional = notional;
	}
	/**
     * public getter
     *
     * The underlyer(s) used to calculate the amount of this cashflow component. The underlyer(s) will remain unaltered from the values specified in the underlying transaction (i.e. the Fixed Rate on a Credit Default Swap).
     *
     * @returns java.util.List<com.leansoft.fpml.nano.TradeUnderlyer>
	 */
	public List<TradeUnderlyer> getUnderlyer() {
	    return this.underlyer;
	}
	
	/**
	 * public setter
	 *
     * The underlyer(s) used to calculate the amount of this cashflow component. The underlyer(s) will remain unaltered from the values specified in the underlying transaction (i.e. the Fixed Rate on a Credit Default Swap).
     *
     * @param java.util.List<com.leansoft.fpml.nano.TradeUnderlyer>
	 */
	public void setUnderlyer(List<TradeUnderlyer> underlyer) {
	    this.underlyer = underlyer;
	}
	/**
     * public getter
     *
     * The computed rate(s) or price(s) used to calculate the amount of this cashflow component. These computed rates or prices may include averaging and/or various types of rate treatment rules.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.CashflowFixing>
	 */
	public List<CashflowFixing> getCalculatedRate() {
	    return this.calculatedRate;
	}
	
	/**
	 * public setter
	 *
     * The computed rate(s) or price(s) used to calculate the amount of this cashflow component. These computed rates or prices may include averaging and/or various types of rate treatment rules.
     *
     * @param java.util.List<com.leansoft.fpml.nano.CashflowFixing>
	 */
	public void setCalculatedRate(List<CashflowFixing> calculatedRate) {
	    this.calculatedRate = calculatedRate;
	}
	/**
     * public getter
     *
     * The period details for calculation/accrual periods that comprise this cashflow component.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.CashflowCalculationPeriod>
	 */
	public List<CashflowCalculationPeriod> getCalculationPeriod() {
	    return this.calculationPeriod;
	}
	
	/**
	 * public setter
	 *
     * The period details for calculation/accrual periods that comprise this cashflow component.
     *
     * @param java.util.List<com.leansoft.fpml.nano.CashflowCalculationPeriod>
	 */
	public void setCalculationPeriod(List<CashflowCalculationPeriod> calculationPeriod) {
	    this.calculationPeriod = calculationPeriod;
	}

}