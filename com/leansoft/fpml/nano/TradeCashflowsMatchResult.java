// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * Message for sending match results. Response message that returns the status of the set of cashflows (more than one in the case of cross-currency swaps) that have been reconciled.
 */
@RootElement(name = "tradeCashflowsMatchResult", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class TradeCashflowsMatchResult extends ResponseMessage implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private TradeCashflowsStatus status;
	
	@Element
	private AssertedCashflow assertedCashflow;
	
	@Element
	private List<TradeCashflowsProposedMatch> proposedMatch;
	
	@Element
	private AllegedCashflow allegedCashflow;
	
	@Element
	private List<Party> party;
	
    
	/**
     * public getter
     *
     * Reconciliation status of the set of cashflows.
     *
     * @returns com.leansoft.fpml.nano.TradeCashflowsStatus
	 */
	public TradeCashflowsStatus getStatus() {
	    return this.status;
	}
	
	/**
	 * public setter
	 *
     * Reconciliation status of the set of cashflows.
     *
     * @param com.leansoft.fpml.nano.TradeCashflowsStatus
	 */
	public void setStatus(TradeCashflowsStatus status) {
	    this.status = status;
	}
	/**
     * public getter
     *
     * Cashflow (or set of cashflows for cross-currency swap) asserted by one of the parties.
     *
     * @returns com.leansoft.fpml.nano.AssertedCashflow
	 */
	public AssertedCashflow getAssertedCashflow() {
	    return this.assertedCashflow;
	}
	
	/**
	 * public setter
	 *
     * Cashflow (or set of cashflows for cross-currency swap) asserted by one of the parties.
     *
     * @param com.leansoft.fpml.nano.AssertedCashflow
	 */
	public void setAssertedCashflow(AssertedCashflow assertedCashflow) {
	    this.assertedCashflow = assertedCashflow;
	}
	/**
     * public getter
     *
     * "Other side's" cashflow that meets the minimimum matching criteria and is proposed as match to the cashflow that is being asserted.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.TradeCashflowsProposedMatch>
	 */
	public List<TradeCashflowsProposedMatch> getProposedMatch() {
	    return this.proposedMatch;
	}
	
	/**
	 * public setter
	 *
     * "Other side's" cashflow that meets the minimimum matching criteria and is proposed as match to the cashflow that is being asserted.
     *
     * @param java.util.List<com.leansoft.fpml.nano.TradeCashflowsProposedMatch>
	 */
	public void setProposedMatch(List<TradeCashflowsProposedMatch> proposedMatch) {
	    this.proposedMatch = proposedMatch;
	}
	/**
     * public getter
     *
     * Cashflow (or set of cashflows for cross-currency swap) asserted by the "other side's" party.
     *
     * @returns com.leansoft.fpml.nano.AllegedCashflow
	 */
	public AllegedCashflow getAllegedCashflow() {
	    return this.allegedCashflow;
	}
	
	/**
	 * public setter
	 *
     * Cashflow (or set of cashflows for cross-currency swap) asserted by the "other side's" party.
     *
     * @param com.leansoft.fpml.nano.AllegedCashflow
	 */
	public void setAllegedCashflow(AllegedCashflow allegedCashflow) {
	    this.allegedCashflow = allegedCashflow;
	}
	/**
     * public getter
     *
     * One party element for each of the principal parties and any other party that is referenced.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Party>
	 */
	public List<Party> getParty() {
	    return this.party;
	}
	
	/**
	 * public setter
	 *
     * One party element for each of the principal parties and any other party that is referenced.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Party>
	 */
	public void setParty(List<Party> party) {
	    this.party = party;
	}

}