// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;

/**
 * Details of the computation of a computed rate or price used to calculate the amount of a cashflow component. This computed rate or price may include averaging and/or various types of rate treatment rules. The details include all of the observations, the calculation parameters, and the resulting value.
 */
public class CashflowFixing implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private List<CashflowObservationReference> observationReference;
	
	@Element
	private BigDecimal calculatedValue;
	
	@Element
	private BigDecimal multiplier;
	
	@Element
	private BigDecimal spread;
	
	@Element
	private List<Strike> capValue;
	
	@Element
	private List<Strike> floorValue;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * Reference to the observation details of a particular rate observation.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.CashflowObservationReference>
	 */
	public List<CashflowObservationReference> getObservationReference() {
	    return this.observationReference;
	}
	
	/**
	 * public setter
	 *
     * Reference to the observation details of a particular rate observation.
     *
     * @param java.util.List<com.leansoft.fpml.nano.CashflowObservationReference>
	 */
	public void setObservationReference(List<CashflowObservationReference> observationReference) {
	    this.observationReference = observationReference;
	}
	/**
     * public getter
     *
     * The value computed based on averaging the underlying observation and applying any spreads, multipliers, and cap and floors values. average or treated value computed based on the underlyer observations, following the calculation rules.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getCalculatedValue() {
	    return this.calculatedValue;
	}
	
	/**
	 * public setter
	 *
     * The value computed based on averaging the underlying observation and applying any spreads, multipliers, and cap and floors values. average or treated value computed based on the underlyer observations, following the calculation rules.
     *
     * @param java.math.BigDecimal
	 */
	public void setCalculatedValue(BigDecimal calculatedValue) {
	    this.calculatedValue = calculatedValue;
	}
	/**
     * public getter
     *
     * A rate multiplier to apply to the floating rate. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one).
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getMultiplier() {
	    return this.multiplier;
	}
	
	/**
	 * public setter
	 *
     * A rate multiplier to apply to the floating rate. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one).
     *
     * @param java.math.BigDecimal
	 */
	public void setMultiplier(BigDecimal multiplier) {
	    this.multiplier = multiplier;
	}
	/**
     * public getter
     *
     * The ISDA Spread, if any, which applies for the calculation period. It also defines spread as price. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getSpread() {
	    return this.spread;
	}
	
	/**
	 * public setter
	 *
     * The ISDA Spread, if any, which applies for the calculation period. It also defines spread as price. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.
     *
     * @param java.math.BigDecimal
	 */
	public void setSpread(BigDecimal spread) {
	    this.spread = spread;
	}
	/**
     * public getter
     *
     * The cap rate or price, if any, which applies to the floating rate for the calculation period. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain strike level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Strike>
	 */
	public List<Strike> getCapValue() {
	    return this.capValue;
	}
	
	/**
	 * public setter
	 *
     * The cap rate or price, if any, which applies to the floating rate for the calculation period. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain strike level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Strike>
	 */
	public void setCapValue(List<Strike> capValue) {
	    this.capValue = capValue;
	}
	/**
     * public getter
     *
     * The floor rate or price, if any, which applies to the floating rate for the calculation period. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. The floor rate of 5% would be represented as 0.05.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Strike>
	 */
	public List<Strike> getFloorValue() {
	    return this.floorValue;
	}
	
	/**
	 * public setter
	 *
     * The floor rate or price, if any, which applies to the floating rate for the calculation period. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. The floor rate of 5% would be represented as 0.05.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Strike>
	 */
	public void setFloorValue(List<Strike> floorValue) {
	    this.floorValue = floorValue;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}