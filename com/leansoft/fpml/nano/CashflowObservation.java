// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;
import java.util.Date;

/**
 * An observation of a rate or a price of an underlyer used in the computation of a cash flow amount.
 */
public class CashflowObservation implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private TradeUnderlyerReference underlyerReference;
	
	@Element
	private Date observationDate;
	
	@Element
	private BasicQuotation observedValue;
	
	@Element
	private BigDecimal weight;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * The underlyer whose rate or price is observed. Reference to an underlyer defined within the calculationElements structure.
     *
     * @returns com.leansoft.fpml.nano.TradeUnderlyerReference
	 */
	public TradeUnderlyerReference getUnderlyerReference() {
	    return this.underlyerReference;
	}
	
	/**
	 * public setter
	 *
     * The underlyer whose rate or price is observed. Reference to an underlyer defined within the calculationElements structure.
     *
     * @param com.leansoft.fpml.nano.TradeUnderlyerReference
	 */
	public void setUnderlyerReference(TradeUnderlyerReference underlyerReference) {
	    this.underlyerReference = underlyerReference;
	}
	/**
     * public getter
     *
     * The date when the rate is observed. Corresponds to adjustedFixingDate on the Interest Rate Derivatives subschema.
     *
     * @returns java.util.Date
	 */
	public Date getObservationDate() {
	    return this.observationDate;
	}
	
	/**
	 * public setter
	 *
     * The date when the rate is observed. Corresponds to adjustedFixingDate on the Interest Rate Derivatives subschema.
     *
     * @param java.util.Date
	 */
	public void setObservationDate(Date observationDate) {
	    this.observationDate = observationDate;
	}
	/**
     * public getter
     *
     * The observed rate or price, together with descriptive information such as units.
     *
     * @returns com.leansoft.fpml.nano.BasicQuotation
	 */
	public BasicQuotation getObservedValue() {
	    return this.observedValue;
	}
	
	/**
	 * public setter
	 *
     * The observed rate or price, together with descriptive information such as units.
     *
     * @param com.leansoft.fpml.nano.BasicQuotation
	 */
	public void setObservedValue(BasicQuotation observedValue) {
	    this.observedValue = observedValue;
	}
	/**
     * public getter
     *
     * The factor used to weight the observation in computing a weighted average. This is typically based on the number of days weighting to be associated with the rate observation, i.e. the number of days such rate is in effect. This is applicable in the case of a weighted average method of calculation where more than one observate date is established for a single calculation period. If omitted all observations are weighted equally. For Equity Derivatives Products it defines the basket percentage.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getWeight() {
	    return this.weight;
	}
	
	/**
	 * public setter
	 *
     * The factor used to weight the observation in computing a weighted average. This is typically based on the number of days weighting to be associated with the rate observation, i.e. the number of days such rate is in effect. This is applicable in the case of a weighted average method of calculation where more than one observate date is established for a single calculation period. If omitted all observations are weighted equally. For Equity Derivatives Products it defines the basket percentage.
     *
     * @param java.math.BigDecimal
	 */
	public void setWeight(BigDecimal weight) {
	    this.weight = weight;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}