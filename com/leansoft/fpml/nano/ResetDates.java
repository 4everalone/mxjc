// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type defining the parameters used to generate the reset dates schedule and associated fixing dates. The reset dates are determined relative to the calculation periods schedules dates.
 */
public class ResetDates implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private CalculationPeriodDatesReference calculationPeriodDatesReference;
	
	@Element
	private ResetRelativeToEnum resetRelativeTo;
	
	@Element
	private RelativeDateOffset initialFixingDate;
	
	@Element
	private RelativeDateOffset fixingDates;
	
	@Element
	private Offset rateCutOffDaysOffset;
	
	@Element
	private ResetFrequency resetFrequency;
	
	@Element
	private BusinessDayAdjustments resetDatesAdjustments;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * A pointer style reference to the associated calculation period dates component defined elsewhere in the document.
     *
     * @returns com.leansoft.fpml.nano.CalculationPeriodDatesReference
	 */
	public CalculationPeriodDatesReference getCalculationPeriodDatesReference() {
	    return this.calculationPeriodDatesReference;
	}
	
	/**
	 * public setter
	 *
     * A pointer style reference to the associated calculation period dates component defined elsewhere in the document.
     *
     * @param com.leansoft.fpml.nano.CalculationPeriodDatesReference
	 */
	public void setCalculationPeriodDatesReference(CalculationPeriodDatesReference calculationPeriodDatesReference) {
	    this.calculationPeriodDatesReference = calculationPeriodDatesReference;
	}
	/**
     * public getter
     *
     * Specifies whether the reset dates are determined with respect to each adjusted calculation period start date or adjusted calculation period end date. If the reset frequency is specified as daily this element must not be included.
     *
     * @returns com.leansoft.fpml.nano.ResetRelativeToEnum
	 */
	public ResetRelativeToEnum getResetRelativeTo() {
	    return this.resetRelativeTo;
	}
	
	/**
	 * public setter
	 *
     * Specifies whether the reset dates are determined with respect to each adjusted calculation period start date or adjusted calculation period end date. If the reset frequency is specified as daily this element must not be included.
     *
     * @param com.leansoft.fpml.nano.ResetRelativeToEnum
	 */
	public void setResetRelativeTo(ResetRelativeToEnum resetRelativeTo) {
	    this.resetRelativeTo = resetRelativeTo;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public RelativeDateOffset getInitialFixingDate() {
	    return this.initialFixingDate;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public void setInitialFixingDate(RelativeDateOffset initialFixingDate) {
	    this.initialFixingDate = initialFixingDate;
	}
	/**
     * public getter
     *
     * Specifies the fixing date relative to the reset date in terms of a business days offset and an associated set of financial business centers. Normally these offset calculation rules will be those specified in the ISDA definition for the relevant floating rate index (ISDA's Floating Rate Option). However, non-standard offset calculation rules may apply for a trade if mutually agreed by the principal parties to the transaction. The href attribute on the dateRelativeTo element should reference the id attribute on the resetDates element.
     *
     * @returns com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public RelativeDateOffset getFixingDates() {
	    return this.fixingDates;
	}
	
	/**
	 * public setter
	 *
     * Specifies the fixing date relative to the reset date in terms of a business days offset and an associated set of financial business centers. Normally these offset calculation rules will be those specified in the ISDA definition for the relevant floating rate index (ISDA's Floating Rate Option). However, non-standard offset calculation rules may apply for a trade if mutually agreed by the principal parties to the transaction. The href attribute on the dateRelativeTo element should reference the id attribute on the resetDates element.
     *
     * @param com.leansoft.fpml.nano.RelativeDateOffset
	 */
	public void setFixingDates(RelativeDateOffset fixingDates) {
	    this.fixingDates = fixingDates;
	}
	/**
     * public getter
     *
     * Specifies the number of business days before the period end date when the rate cut-off date is assumed to apply. The financial business centers associated with determining the rate cut-off date are those specified in the reset dates adjustments. The rate cut-off number of days must be a negative integer (a value of zero would imply no rate cut off applies in which case the rateCutOffDaysOffset element should not be included). The relevant rate for each reset date in the period from, and including, a rate cut-off date to, but excluding, the next applicable period end date (or, in the case of the last calculation period, the termination date) will (solely for purposes of calculating the floating amount payable on the next applicable payment date) be deemed to be the relevant rate in effect on that rate cut-off date. For example, if rate cut-off days for a daily averaging deal is -2 business days, then the refix rate applied on (period end date - 2 days) will also be applied as the reset on (period end date - 1 day), i.e. the actual number of reset dates remains the same but from the rate cut-off date until the period end date, the same refix rate is applied. Note that in the case of several calculation periods contributing to a single payment, the rate cut-off is assumed only to apply to the final calculation period contributing to that payment. The day type associated with the offset must imply a business days offset.
     *
     * @returns com.leansoft.fpml.nano.Offset
	 */
	public Offset getRateCutOffDaysOffset() {
	    return this.rateCutOffDaysOffset;
	}
	
	/**
	 * public setter
	 *
     * Specifies the number of business days before the period end date when the rate cut-off date is assumed to apply. The financial business centers associated with determining the rate cut-off date are those specified in the reset dates adjustments. The rate cut-off number of days must be a negative integer (a value of zero would imply no rate cut off applies in which case the rateCutOffDaysOffset element should not be included). The relevant rate for each reset date in the period from, and including, a rate cut-off date to, but excluding, the next applicable period end date (or, in the case of the last calculation period, the termination date) will (solely for purposes of calculating the floating amount payable on the next applicable payment date) be deemed to be the relevant rate in effect on that rate cut-off date. For example, if rate cut-off days for a daily averaging deal is -2 business days, then the refix rate applied on (period end date - 2 days) will also be applied as the reset on (period end date - 1 day), i.e. the actual number of reset dates remains the same but from the rate cut-off date until the period end date, the same refix rate is applied. Note that in the case of several calculation periods contributing to a single payment, the rate cut-off is assumed only to apply to the final calculation period contributing to that payment. The day type associated with the offset must imply a business days offset.
     *
     * @param com.leansoft.fpml.nano.Offset
	 */
	public void setRateCutOffDaysOffset(Offset rateCutOffDaysOffset) {
	    this.rateCutOffDaysOffset = rateCutOffDaysOffset;
	}
	/**
     * public getter
     *
     * The frequency at which reset dates occur. In the case of a weekly reset frequency, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency then this implies that more than one reset date is established for each calculation period and some form of rate averaging is applicable.
     *
     * @returns com.leansoft.fpml.nano.ResetFrequency
	 */
	public ResetFrequency getResetFrequency() {
	    return this.resetFrequency;
	}
	
	/**
	 * public setter
	 *
     * The frequency at which reset dates occur. In the case of a weekly reset frequency, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency then this implies that more than one reset date is established for each calculation period and some form of rate averaging is applicable.
     *
     * @param com.leansoft.fpml.nano.ResetFrequency
	 */
	public void setResetFrequency(ResetFrequency resetFrequency) {
	    this.resetFrequency = resetFrequency;
	}
	/**
     * public getter
     *
     * The business day convention to apply to each reset date if it would otherwise fall on a day that is not a business day in the specified financial business centers.
     *
     * @returns com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public BusinessDayAdjustments getResetDatesAdjustments() {
	    return this.resetDatesAdjustments;
	}
	
	/**
	 * public setter
	 *
     * The business day convention to apply to each reset date if it would otherwise fall on a day that is not a business day in the specified financial business centers.
     *
     * @param com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public void setResetDatesAdjustments(BusinessDayAdjustments resetDatesAdjustments) {
	    this.resetDatesAdjustments = resetDatesAdjustments;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}