// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A value point that can have a time dimension. Allows bid, mid, ask, and spread values to be represented.
 */
public class TermPoint implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private TimeDimension term;
	
	@Element
	private BigDecimal bid;
	
	@Element
	private BigDecimal mid;
	
	@Element
	private BigDecimal ask;
	
	@Element
	private BigDecimal spreadValue;
	
	@Element
	private AssetReference definition;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * The time dimension of the point (tenor and/or date)
     *
     * @returns com.leansoft.fpml.nano.TimeDimension
	 */
	public TimeDimension getTerm() {
	    return this.term;
	}
	
	/**
	 * public setter
	 *
     * The time dimension of the point (tenor and/or date)
     *
     * @param com.leansoft.fpml.nano.TimeDimension
	 */
	public void setTerm(TimeDimension term) {
	    this.term = term;
	}
	/**
     * public getter
     *
     * A price "bid" by a buyer for an asset, i.e. the price a buyer is willing to pay.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getBid() {
	    return this.bid;
	}
	
	/**
	 * public setter
	 *
     * A price "bid" by a buyer for an asset, i.e. the price a buyer is willing to pay.
     *
     * @param java.math.BigDecimal
	 */
	public void setBid(BigDecimal bid) {
	    this.bid = bid;
	}
	/**
     * public getter
     *
     * A price midway between the bid and the ask price.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getMid() {
	    return this.mid;
	}
	
	/**
	 * public setter
	 *
     * A price midway between the bid and the ask price.
     *
     * @param java.math.BigDecimal
	 */
	public void setMid(BigDecimal mid) {
	    this.mid = mid;
	}
	/**
     * public getter
     *
     * A price "asked" by a seller for an asset, i.e. the price at which a seller is willing to sell.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getAsk() {
	    return this.ask;
	}
	
	/**
	 * public setter
	 *
     * A price "asked" by a seller for an asset, i.e. the price at which a seller is willing to sell.
     *
     * @param java.math.BigDecimal
	 */
	public void setAsk(BigDecimal ask) {
	    this.ask = ask;
	}
	/**
     * public getter
     *
     * The spread value can be used in conjunction with the "mid" value to define the bid and the ask value.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getSpreadValue() {
	    return this.spreadValue;
	}
	
	/**
	 * public setter
	 *
     * The spread value can be used in conjunction with the "mid" value to define the bid and the ask value.
     *
     * @param java.math.BigDecimal
	 */
	public void setSpreadValue(BigDecimal spreadValue) {
	    this.spreadValue = spreadValue;
	}
	/**
     * public getter
     *
     * An optional reference to an underlying asset that defines the meaning of the value, i.e. the product that the value corresponds to. For example, this could be a discount instrument.
     *
     * @returns com.leansoft.fpml.nano.AssetReference
	 */
	public AssetReference getDefinition() {
	    return this.definition;
	}
	
	/**
	 * public setter
	 *
     * An optional reference to an underlying asset that defines the meaning of the value, i.e. the product that the value corresponds to. For example, this could be a discount instrument.
     *
     * @param com.leansoft.fpml.nano.AssetReference
	 */
	public void setDefinition(AssetReference definition) {
	    this.definition = definition;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}