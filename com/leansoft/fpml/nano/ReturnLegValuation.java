// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type describing the initial and final valuation of the underlyer.
 */
public class ReturnLegValuation implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private ReturnLegValuationPrice initialPrice;
	
	@Element
	private Boolean notionalReset;
	
	@Element
	private ReturnLegValuationPrice valuationPriceInterim;
	
	@Element
	private ReturnLegValuationPrice valuationPriceFinal;
	
	@Element
	private ReturnSwapPaymentDates paymentDates;
	
	@Element
	private ExchangeTradedContract exchangeTradedContractNearest;
	
    
	/**
     * public getter
     *
     * Specifies the initial reference price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.
     *
     * @returns com.leansoft.fpml.nano.ReturnLegValuationPrice
	 */
	public ReturnLegValuationPrice getInitialPrice() {
	    return this.initialPrice;
	}
	
	/**
	 * public setter
	 *
     * Specifies the initial reference price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.
     *
     * @param com.leansoft.fpml.nano.ReturnLegValuationPrice
	 */
	public void setInitialPrice(ReturnLegValuationPrice initialPrice) {
	    this.initialPrice = initialPrice;
	}
	/**
     * public getter
     *
     * Element named "equityNotionalReset" in versions prior to FpML 4.2 Second Working Draft. For equity swaps, this element is equivalent to the term "Equity Notional Reset" as defined in the ISDA 2002 Equity Derivatives Definitions. The reference to the ISDA definition is either "Applicable" or 'Inapplicable".
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getNotionalReset() {
	    return this.notionalReset;
	}
	
	/**
	 * public setter
	 *
     * Element named "equityNotionalReset" in versions prior to FpML 4.2 Second Working Draft. For equity swaps, this element is equivalent to the term "Equity Notional Reset" as defined in the ISDA 2002 Equity Derivatives Definitions. The reference to the ISDA definition is either "Applicable" or 'Inapplicable".
     *
     * @param java.lang.Boolean
	 */
	public void setNotionalReset(Boolean notionalReset) {
	    this.notionalReset = notionalReset;
	}
	/**
     * public getter
     *
     * Specifies the interim valuation price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.
     *
     * @returns com.leansoft.fpml.nano.ReturnLegValuationPrice
	 */
	public ReturnLegValuationPrice getValuationPriceInterim() {
	    return this.valuationPriceInterim;
	}
	
	/**
	 * public setter
	 *
     * Specifies the interim valuation price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.
     *
     * @param com.leansoft.fpml.nano.ReturnLegValuationPrice
	 */
	public void setValuationPriceInterim(ReturnLegValuationPrice valuationPriceInterim) {
	    this.valuationPriceInterim = valuationPriceInterim;
	}
	/**
     * public getter
     *
     * Specifies the final valuation price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.
     *
     * @returns com.leansoft.fpml.nano.ReturnLegValuationPrice
	 */
	public ReturnLegValuationPrice getValuationPriceFinal() {
	    return this.valuationPriceFinal;
	}
	
	/**
	 * public setter
	 *
     * Specifies the final valuation price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.
     *
     * @param com.leansoft.fpml.nano.ReturnLegValuationPrice
	 */
	public void setValuationPriceFinal(ReturnLegValuationPrice valuationPriceFinal) {
	    this.valuationPriceFinal = valuationPriceFinal;
	}
	/**
     * public getter
     *
     * Element named "equityPaymentDates" in versions prior to FpML 4.2 Second Working Draft. Specifies the payment dates of the swap.
     *
     * @returns com.leansoft.fpml.nano.ReturnSwapPaymentDates
	 */
	public ReturnSwapPaymentDates getPaymentDates() {
	    return this.paymentDates;
	}
	
	/**
	 * public setter
	 *
     * Element named "equityPaymentDates" in versions prior to FpML 4.2 Second Working Draft. Specifies the payment dates of the swap.
     *
     * @param com.leansoft.fpml.nano.ReturnSwapPaymentDates
	 */
	public void setPaymentDates(ReturnSwapPaymentDates paymentDates) {
	    this.paymentDates = paymentDates;
	}
	/**
     * public getter
     *
     * References a Contract on the Exchange.
     *
     * @returns com.leansoft.fpml.nano.ExchangeTradedContract
	 */
	public ExchangeTradedContract getExchangeTradedContractNearest() {
	    return this.exchangeTradedContractNearest;
	}
	
	/**
	 * public setter
	 *
     * References a Contract on the Exchange.
     *
     * @param com.leansoft.fpml.nano.ExchangeTradedContract
	 */
	public void setExchangeTradedContractNearest(ExchangeTradedContract exchangeTradedContractNearest) {
	    this.exchangeTradedContractNearest = exchangeTradedContractNearest;
	}

}