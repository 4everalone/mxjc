// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type describing a single underlyer
 */
public class SingleUnderlyer implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BigDecimal openUnits;
	
	@Element
	private DividendPayout dividendPayout;
	
	@Element
	private PendingPayment couponPayment;
	
    
	/**
     * public getter
     *
     * The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getOpenUnits() {
	    return this.openUnits;
	}
	
	/**
	 * public setter
	 *
     * The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.
     *
     * @param java.math.BigDecimal
	 */
	public void setOpenUnits(BigDecimal openUnits) {
	    this.openUnits = openUnits;
	}
	/**
     * public getter
     *
     * Specifies the dividend payout ratio associated with an equity underlyer. A basket swap can have different payout ratios across the various underlying constituents. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified. Users should note that FpML makes a distinction between the derivative contract and the underlyer of the contract. It would be better if the agreed dividend payout on a derivative contract was modelled at the level of the derivative contract, an approach which may be adopted in the next major version of FpML.
     *
     * @returns com.leansoft.fpml.nano.DividendPayout
	 */
	public DividendPayout getDividendPayout() {
	    return this.dividendPayout;
	}
	
	/**
	 * public setter
	 *
     * Specifies the dividend payout ratio associated with an equity underlyer. A basket swap can have different payout ratios across the various underlying constituents. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified. Users should note that FpML makes a distinction between the derivative contract and the underlyer of the contract. It would be better if the agreed dividend payout on a derivative contract was modelled at the level of the derivative contract, an approach which may be adopted in the next major version of FpML.
     *
     * @param com.leansoft.fpml.nano.DividendPayout
	 */
	public void setDividendPayout(DividendPayout dividendPayout) {
	    this.dividendPayout = dividendPayout;
	}
	/**
     * public getter
     *
     * The next upcoming coupon payment.
     *
     * @returns com.leansoft.fpml.nano.PendingPayment
	 */
	public PendingPayment getCouponPayment() {
	    return this.couponPayment;
	}
	
	/**
	 * public setter
	 *
     * The next upcoming coupon payment.
     *
     * @param com.leansoft.fpml.nano.PendingPayment
	 */
	public void setCouponPayment(PendingPayment couponPayment) {
	    this.couponPayment = couponPayment;
	}

}