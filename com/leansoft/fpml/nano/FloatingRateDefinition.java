// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;

/**
 * A type defining parameters associated with a floating rate reset. This type forms part of the cashflows representation of a stream.
 */
public class FloatingRateDefinition implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BigDecimal calculatedRate;
	
	@Element
	private List<RateObservation> rateObservation;
	
	@Element
	private BigDecimal floatingRateMultiplier;
	
	@Element
	private BigDecimal spread;
	
	@Element
	private List<Strike> capRate;
	
	@Element
	private List<Strike> floorRate;
	
    
	/**
     * public getter
     *
     * The final calculated rate for a calculation period after any required averaging of rates A calculated rate of 5% would be represented as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getCalculatedRate() {
	    return this.calculatedRate;
	}
	
	/**
	 * public setter
	 *
     * The final calculated rate for a calculation period after any required averaging of rates A calculated rate of 5% would be represented as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setCalculatedRate(BigDecimal calculatedRate) {
	    this.calculatedRate = calculatedRate;
	}
	/**
     * public getter
     *
     * The details of a particular rate observation, including the fixing date and observed rate. A list of rate observation elements may be ordered in the document by ascending adjusted fixing date. An FpML document containing an unordered list of rate observations is still regarded as a conformant document.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.RateObservation>
	 */
	public List<RateObservation> getRateObservation() {
	    return this.rateObservation;
	}
	
	/**
	 * public setter
	 *
     * The details of a particular rate observation, including the fixing date and observed rate. A list of rate observation elements may be ordered in the document by ascending adjusted fixing date. An FpML document containing an unordered list of rate observations is still regarded as a conformant document.
     *
     * @param java.util.List<com.leansoft.fpml.nano.RateObservation>
	 */
	public void setRateObservation(List<RateObservation> rateObservation) {
	    this.rateObservation = rateObservation;
	}
	/**
     * public getter
     *
     * A rate multiplier to apply to the floating rate. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one).
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getFloatingRateMultiplier() {
	    return this.floatingRateMultiplier;
	}
	
	/**
	 * public setter
	 *
     * A rate multiplier to apply to the floating rate. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one).
     *
     * @param java.math.BigDecimal
	 */
	public void setFloatingRateMultiplier(BigDecimal floatingRateMultiplier) {
	    this.floatingRateMultiplier = floatingRateMultiplier;
	}
	/**
     * public getter
     *
     * The ISDA Spread, if any, which applies for the calculation period. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getSpread() {
	    return this.spread;
	}
	
	/**
	 * public setter
	 *
     * The ISDA Spread, if any, which applies for the calculation period. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.
     *
     * @param java.math.BigDecimal
	 */
	public void setSpread(BigDecimal spread) {
	    this.spread = spread;
	}
	/**
     * public getter
     *
     * The cap rate, if any, which applies to the floating rate for the calculation period. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain strike level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Strike>
	 */
	public List<Strike> getCapRate() {
	    return this.capRate;
	}
	
	/**
	 * public setter
	 *
     * The cap rate, if any, which applies to the floating rate for the calculation period. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain strike level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Strike>
	 */
	public void setCapRate(List<Strike> capRate) {
	    this.capRate = capRate;
	}
	/**
     * public getter
     *
     * The floor rate, if any, which applies to the floating rate for the calculation period. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. The floor rate of 5% would be represented as 0.05.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Strike>
	 */
	public List<Strike> getFloorRate() {
	    return this.floorRate;
	}
	
	/**
	 * public setter
	 *
     * The floor rate, if any, which applies to the floating rate for the calculation period. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. The floor rate of 5% would be represented as 0.05.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Strike>
	 */
	public void setFloorRate(List<Strike> floorRate) {
	    this.floorRate = floorRate;
	}

}