// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

public class FloatingAmountEvents implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Empty failureToPayPrincipal;
	
	@Element
	private InterestShortFall interestShortfall;
	
	@Element
	private Empty writedown;
	
	@Element
	private FloatingAmountProvisions floatingAmountProvisions;
	
	@Element
	private AdditionalFixedPayments additionalFixedPayments;
	
    
	/**
     * public getter
     *
     * A floating rate payment event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getFailureToPayPrincipal() {
	    return this.failureToPayPrincipal;
	}
	
	/**
	 * public setter
	 *
     * A floating rate payment event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setFailureToPayPrincipal(Empty failureToPayPrincipal) {
	    this.failureToPayPrincipal = failureToPayPrincipal;
	}
	/**
     * public getter
     *
     * A floating rate payment event. With respect to any Reference Obligation Payment Date, either (a) the non-payment of an Expected Interest Amount or (b) the payment of an Actual Interest Amount that is less than the Expected Interest Amount. ISDA 2003 Term: Interest Shortfall.
     *
     * @returns com.leansoft.fpml.nano.InterestShortFall
	 */
	public InterestShortFall getInterestShortfall() {
	    return this.interestShortfall;
	}
	
	/**
	 * public setter
	 *
     * A floating rate payment event. With respect to any Reference Obligation Payment Date, either (a) the non-payment of an Expected Interest Amount or (b) the payment of an Actual Interest Amount that is less than the Expected Interest Amount. ISDA 2003 Term: Interest Shortfall.
     *
     * @param com.leansoft.fpml.nano.InterestShortFall
	 */
	public void setInterestShortfall(InterestShortFall interestShortfall) {
	    this.interestShortfall = interestShortfall;
	}
	/**
     * public getter
     *
     * A floating rate payment event. Results from the fact that the underlyer writes down its outstanding principal amount. ISDA 2003 Term: Writedown.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getWritedown() {
	    return this.writedown;
	}
	
	/**
	 * public setter
	 *
     * A floating rate payment event. Results from the fact that the underlyer writes down its outstanding principal amount. ISDA 2003 Term: Writedown.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setWritedown(Empty writedown) {
	    this.writedown = writedown;
	}
	/**
     * public getter
     *
     * Specifies the floating amount provisions associated with the floatingAmountEvents.
     *
     * @returns com.leansoft.fpml.nano.FloatingAmountProvisions
	 */
	public FloatingAmountProvisions getFloatingAmountProvisions() {
	    return this.floatingAmountProvisions;
	}
	
	/**
	 * public setter
	 *
     * Specifies the floating amount provisions associated with the floatingAmountEvents.
     *
     * @param com.leansoft.fpml.nano.FloatingAmountProvisions
	 */
	public void setFloatingAmountProvisions(FloatingAmountProvisions floatingAmountProvisions) {
	    this.floatingAmountProvisions = floatingAmountProvisions;
	}
	/**
     * public getter
     *
     * Specifies the events that will give rise to the payment a additional fixed payments.
     *
     * @returns com.leansoft.fpml.nano.AdditionalFixedPayments
	 */
	public AdditionalFixedPayments getAdditionalFixedPayments() {
	    return this.additionalFixedPayments;
	}
	
	/**
	 * public setter
	 *
     * Specifies the events that will give rise to the payment a additional fixed payments.
     *
     * @param com.leansoft.fpml.nano.AdditionalFixedPayments
	 */
	public void setAdditionalFixedPayments(AdditionalFixedPayments additionalFixedPayments) {
	    this.additionalFixedPayments = additionalFixedPayments;
	}

}