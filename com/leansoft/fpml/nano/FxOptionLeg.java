// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * A type that is used for describing a standard FX OTC option (European or American) which may be a complete trade in its own right or part of a trade strategy.
 */
@RootElement(name = "fxSimpleOption", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class FxOptionLeg extends Product implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrTradeSideReference buyerPartyReference;
	
	@Element
	private PartyOrTradeSideReference sellerPartyReference;
	
	@Element
	private ExpiryDateTime expiryDateTime;
	
	@Element
	private ExerciseStyleEnum exerciseStyle;
	
	@Element
	private List<FxOptionPremium> fxOptionPremium;
	
	@Element
	private Date valueDate;
	
	@Element
	private FxCashSettlement cashSettlementTerms;
	
	@Element
	private Money putCurrencyAmount;
	
	@Element
	private Money callCurrencyAmount;
	
	@Element
	private FxStrikePrice fxStrikePrice;
	
	@Element
	private QuotedAs quotedAs;
	
    
	/**
     * public getter
     *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getBuyerPartyReference() {
	    return this.buyerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setBuyerPartyReference(PartyOrTradeSideReference buyerPartyReference) {
	    this.buyerPartyReference = buyerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getSellerPartyReference() {
	    return this.sellerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setSellerPartyReference(PartyOrTradeSideReference sellerPartyReference) {
	    this.sellerPartyReference = sellerPartyReference;
	}
	/**
     * public getter
     *
     * The date and time in a location of the option expiry. In the case of american options this is the latest possible expiry date and time.
     *
     * @returns com.leansoft.fpml.nano.ExpiryDateTime
	 */
	public ExpiryDateTime getExpiryDateTime() {
	    return this.expiryDateTime;
	}
	
	/**
	 * public setter
	 *
     * The date and time in a location of the option expiry. In the case of american options this is the latest possible expiry date and time.
     *
     * @param com.leansoft.fpml.nano.ExpiryDateTime
	 */
	public void setExpiryDateTime(ExpiryDateTime expiryDateTime) {
	    this.expiryDateTime = expiryDateTime;
	}
	/**
     * public getter
     *
     * The manner in which the option can be exercised.
     *
     * @returns com.leansoft.fpml.nano.ExerciseStyleEnum
	 */
	public ExerciseStyleEnum getExerciseStyle() {
	    return this.exerciseStyle;
	}
	
	/**
	 * public setter
	 *
     * The manner in which the option can be exercised.
     *
     * @param com.leansoft.fpml.nano.ExerciseStyleEnum
	 */
	public void setExerciseStyle(ExerciseStyleEnum exerciseStyle) {
	    this.exerciseStyle = exerciseStyle;
	}
	/**
     * public getter
     *
     * Premium amount or premium installment amount for an option.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.FxOptionPremium>
	 */
	public List<FxOptionPremium> getFxOptionPremium() {
	    return this.fxOptionPremium;
	}
	
	/**
	 * public setter
	 *
     * Premium amount or premium installment amount for an option.
     *
     * @param java.util.List<com.leansoft.fpml.nano.FxOptionPremium>
	 */
	public void setFxOptionPremium(List<FxOptionPremium> fxOptionPremium) {
	    this.fxOptionPremium = fxOptionPremium;
	}
	/**
     * public getter
     *
     * The date on which both currencies traded will settle.
     *
     * @returns java.util.Date
	 */
	public Date getValueDate() {
	    return this.valueDate;
	}
	
	/**
	 * public setter
	 *
     * The date on which both currencies traded will settle.
     *
     * @param java.util.Date
	 */
	public void setValueDate(Date valueDate) {
	    this.valueDate = valueDate;
	}
	/**
     * public getter
     *
     * This optional element is only used if an option has been specified at execution time to be settled into a single cash payment. This would be used for a non-deliverable option.
     *
     * @returns com.leansoft.fpml.nano.FxCashSettlement
	 */
	public FxCashSettlement getCashSettlementTerms() {
	    return this.cashSettlementTerms;
	}
	
	/**
	 * public setter
	 *
     * This optional element is only used if an option has been specified at execution time to be settled into a single cash payment. This would be used for a non-deliverable option.
     *
     * @param com.leansoft.fpml.nano.FxCashSettlement
	 */
	public void setCashSettlementTerms(FxCashSettlement cashSettlementTerms) {
	    this.cashSettlementTerms = cashSettlementTerms;
	}
	/**
     * public getter
     *
     * The currency amount that the option gives the right to sell.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPutCurrencyAmount() {
	    return this.putCurrencyAmount;
	}
	
	/**
	 * public setter
	 *
     * The currency amount that the option gives the right to sell.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPutCurrencyAmount(Money putCurrencyAmount) {
	    this.putCurrencyAmount = putCurrencyAmount;
	}
	/**
     * public getter
     *
     * The currency amount that the option gives the right to buy.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getCallCurrencyAmount() {
	    return this.callCurrencyAmount;
	}
	
	/**
	 * public setter
	 *
     * The currency amount that the option gives the right to buy.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setCallCurrencyAmount(Money callCurrencyAmount) {
	    this.callCurrencyAmount = callCurrencyAmount;
	}
	/**
     * public getter
     *
     * TBA
     *
     * @returns com.leansoft.fpml.nano.FxStrikePrice
	 */
	public FxStrikePrice getFxStrikePrice() {
	    return this.fxStrikePrice;
	}
	
	/**
	 * public setter
	 *
     * TBA
     *
     * @param com.leansoft.fpml.nano.FxStrikePrice
	 */
	public void setFxStrikePrice(FxStrikePrice fxStrikePrice) {
	    this.fxStrikePrice = fxStrikePrice;
	}
	/**
     * public getter
     *
     * Describes how the option was quoted.
     *
     * @returns com.leansoft.fpml.nano.QuotedAs
	 */
	public QuotedAs getQuotedAs() {
	    return this.quotedAs;
	}
	
	/**
	 * public setter
	 *
     * Describes how the option was quoted.
     *
     * @param com.leansoft.fpml.nano.QuotedAs
	 */
	public void setQuotedAs(QuotedAs quotedAs) {
	    this.quotedAs = quotedAs;
	}

}