// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type defining an option to extend an existing swap transaction on the specified exercise dates for a term ending on the specified new termination date.
 */
public class ExtendibleProvision implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrTradeSideReference buyerPartyReference;
	
	@Element
	private PartyOrTradeSideReference sellerPartyReference;
	
	@Element
	private ExerciseNotice exerciseNotice;
	
	@Element
	private Boolean followUpConfirmation;
	
	@Element
	private ExtendibleProvisionAdjustedDates extendibleProvisionAdjustedDates;
	
    
	/**
     * public getter
     *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getBuyerPartyReference() {
	    return this.buyerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setBuyerPartyReference(PartyOrTradeSideReference buyerPartyReference) {
	    this.buyerPartyReference = buyerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getSellerPartyReference() {
	    return this.sellerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setSellerPartyReference(PartyOrTradeSideReference sellerPartyReference) {
	    this.sellerPartyReference = sellerPartyReference;
	}
	/**
     * public getter
     *
     * Definition of the party to whom notice of exercise should be given.
     *
     * @returns com.leansoft.fpml.nano.ExerciseNotice
	 */
	public ExerciseNotice getExerciseNotice() {
	    return this.exerciseNotice;
	}
	
	/**
	 * public setter
	 *
     * Definition of the party to whom notice of exercise should be given.
     *
     * @param com.leansoft.fpml.nano.ExerciseNotice
	 */
	public void setExerciseNotice(ExerciseNotice exerciseNotice) {
	    this.exerciseNotice = exerciseNotice;
	}
	/**
     * public getter
     *
     * A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getFollowUpConfirmation() {
	    return this.followUpConfirmation;
	}
	
	/**
	 * public setter
	 *
     * A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent.
     *
     * @param java.lang.Boolean
	 */
	public void setFollowUpConfirmation(Boolean followUpConfirmation) {
	    this.followUpConfirmation = followUpConfirmation;
	}
	/**
     * public getter
     *
     * The adjusted dates associated with an extendible provision. These dates have been adjusted for any applicable business day convention.
     *
     * @returns com.leansoft.fpml.nano.ExtendibleProvisionAdjustedDates
	 */
	public ExtendibleProvisionAdjustedDates getExtendibleProvisionAdjustedDates() {
	    return this.extendibleProvisionAdjustedDates;
	}
	
	/**
	 * public setter
	 *
     * The adjusted dates associated with an extendible provision. These dates have been adjusted for any applicable business day convention.
     *
     * @param com.leansoft.fpml.nano.ExtendibleProvisionAdjustedDates
	 */
	public void setExtendibleProvisionAdjustedDates(ExtendibleProvisionAdjustedDates extendibleProvisionAdjustedDates) {
	    this.extendibleProvisionAdjustedDates = extendibleProvisionAdjustedDates;
	}

}