// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * A type to define an option on a swap.
 */
@RootElement(name = "swaption", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class Swaption extends Product implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrTradeSideReference buyerPartyReference;
	
	@Element
	private PartyOrTradeSideReference sellerPartyReference;
	
	@Element
	private List<Payment> premium;
	
	@Element
	private ExerciseProcedure exerciseProcedure;
	
	@Element
	private CalculationAgent calculationAgent;
	
	@Element
	private CashSettlement cashSettlement;
	
	@Element
	private boolean swaptionStraddle;
	
	@Element
	private SwaptionAdjustedDates swaptionAdjustedDates;
	
	@Element
	private Swap swap;
	
    
	/**
     * public getter
     *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getBuyerPartyReference() {
	    return this.buyerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setBuyerPartyReference(PartyOrTradeSideReference buyerPartyReference) {
	    this.buyerPartyReference = buyerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @returns com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public PartyOrTradeSideReference getSellerPartyReference() {
	    return this.sellerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that sells ("writes") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.
     *
     * @param com.leansoft.fpml.nano.PartyOrTradeSideReference
	 */
	public void setSellerPartyReference(PartyOrTradeSideReference sellerPartyReference) {
	    this.sellerPartyReference = sellerPartyReference;
	}
	/**
     * public getter
     *
     * The option premium amount payable by buyer to seller on the specified payment date.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Payment>
	 */
	public List<Payment> getPremium() {
	    return this.premium;
	}
	
	/**
	 * public setter
	 *
     * The option premium amount payable by buyer to seller on the specified payment date.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Payment>
	 */
	public void setPremium(List<Payment> premium) {
	    this.premium = premium;
	}
	/**
     * public getter
     *
     * A set of parameters defining procedures associated with the exercise.
     *
     * @returns com.leansoft.fpml.nano.ExerciseProcedure
	 */
	public ExerciseProcedure getExerciseProcedure() {
	    return this.exerciseProcedure;
	}
	
	/**
	 * public setter
	 *
     * A set of parameters defining procedures associated with the exercise.
     *
     * @param com.leansoft.fpml.nano.ExerciseProcedure
	 */
	public void setExerciseProcedure(ExerciseProcedure exerciseProcedure) {
	    this.exerciseProcedure = exerciseProcedure;
	}
	/**
     * public getter
     *
     * The ISDA Calculation Agent responsible for performing duties associated with an optional early termination.
     *
     * @returns com.leansoft.fpml.nano.CalculationAgent
	 */
	public CalculationAgent getCalculationAgent() {
	    return this.calculationAgent;
	}
	
	/**
	 * public setter
	 *
     * The ISDA Calculation Agent responsible for performing duties associated with an optional early termination.
     *
     * @param com.leansoft.fpml.nano.CalculationAgent
	 */
	public void setCalculationAgent(CalculationAgent calculationAgent) {
	    this.calculationAgent = calculationAgent;
	}
	/**
     * public getter
     *
     * If specified, this means that cash settlement is applicable to the transaction and defines the parameters associated with the cash settlement prodcedure. If not specified, then physical settlement is applicable.
     *
     * @returns com.leansoft.fpml.nano.CashSettlement
	 */
	public CashSettlement getCashSettlement() {
	    return this.cashSettlement;
	}
	
	/**
	 * public setter
	 *
     * If specified, this means that cash settlement is applicable to the transaction and defines the parameters associated with the cash settlement prodcedure. If not specified, then physical settlement is applicable.
     *
     * @param com.leansoft.fpml.nano.CashSettlement
	 */
	public void setCashSettlement(CashSettlement cashSettlement) {
	    this.cashSettlement = cashSettlement;
	}
	/**
     * public getter
     *
     * Whether the option is a swaption or a swaption straddle.
     *
     * @returns .boolean
	 */
	public boolean getSwaptionStraddle() {
	    return this.swaptionStraddle;
	}
	
	/**
	 * public setter
	 *
     * Whether the option is a swaption or a swaption straddle.
     *
     * @param .boolean
	 */
	public void setSwaptionStraddle(boolean swaptionStraddle) {
	    this.swaptionStraddle = swaptionStraddle;
	}
	/**
     * public getter
     *
     * The adjusted dates associated with swaption exercise. These dates have been adjusted for any applicable business day convention.
     *
     * @returns com.leansoft.fpml.nano.SwaptionAdjustedDates
	 */
	public SwaptionAdjustedDates getSwaptionAdjustedDates() {
	    return this.swaptionAdjustedDates;
	}
	
	/**
	 * public setter
	 *
     * The adjusted dates associated with swaption exercise. These dates have been adjusted for any applicable business day convention.
     *
     * @param com.leansoft.fpml.nano.SwaptionAdjustedDates
	 */
	public void setSwaptionAdjustedDates(SwaptionAdjustedDates swaptionAdjustedDates) {
	    this.swaptionAdjustedDates = swaptionAdjustedDates;
	}
	/**
     * public getter
     *
     * A swap product definition.
     *
     * @returns com.leansoft.fpml.nano.Swap
	 */
	public Swap getSwap() {
	    return this.swap;
	}
	
	/**
	 * public setter
	 *
     * A swap product definition.
     *
     * @param com.leansoft.fpml.nano.Swap
	 */
	public void setSwap(Swap swap) {
	    this.swap = swap;
	}

}