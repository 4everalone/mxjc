// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * An abstract trade error response message containing a singe trade or trade reference.
 */
public abstract class TradeErrorResponse extends ResponseMessage implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Trade trade;
	
	@Element
	private PartyTradeIdentifiers tradeReference;
	
	@Element
	private List<Party> party;
	
    
	/**
     * public getter
     *
     * An element that allows the full details of the trade to be used as a mechanism for identifying the trade for which the post-trade event pertains
     *
     * @returns com.leansoft.fpml.nano.Trade
	 */
	public Trade getTrade() {
	    return this.trade;
	}
	
	/**
	 * public setter
	 *
     * An element that allows the full details of the trade to be used as a mechanism for identifying the trade for which the post-trade event pertains
     *
     * @param com.leansoft.fpml.nano.Trade
	 */
	public void setTrade(Trade trade) {
	    this.trade = trade;
	}
	/**
     * public getter
     *
     * A container since an individual trade can be referenced by two or more different partyTradeIdentifier elements - each allocated by a different party.
     *
     * @returns com.leansoft.fpml.nano.PartyTradeIdentifiers
	 */
	public PartyTradeIdentifiers getTradeReference() {
	    return this.tradeReference;
	}
	
	/**
	 * public setter
	 *
     * A container since an individual trade can be referenced by two or more different partyTradeIdentifier elements - each allocated by a different party.
     *
     * @param com.leansoft.fpml.nano.PartyTradeIdentifiers
	 */
	public void setTradeReference(PartyTradeIdentifiers tradeReference) {
	    this.tradeReference = tradeReference;
	}
	/**
     * public getter
     *
     * Parties can perform multiple roles in a trade lifecycle. For example, the principal parties obligated to make payments from time to time during the term of the trade, but may include other parties involved in, or incidental to, the trade, such as parties acting in the role of novation transferor/transferee, broker, calculation agent, etc. In FpML roles are defined in multiple places within a document.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Party>
	 */
	public List<Party> getParty() {
	    return this.party;
	}
	
	/**
	 * public setter
	 *
     * Parties can perform multiple roles in a trade lifecycle. For example, the principal parties obligated to make payments from time to time during the term of the trade, but may include other parties involved in, or incidental to, the trade, such as parties acting in the role of novation transferor/transferee, broker, calculation agent, etc. In FpML roles are defined in multiple places within a document.
     *
     * @param java.util.List<com.leansoft.fpml.nano.Party>
	 */
	public void setParty(List<Party> party) {
	    this.party = party;
	}

}