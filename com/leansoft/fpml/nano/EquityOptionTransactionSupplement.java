// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type for defining equity option transaction supplements
 */
@RootElement(name = "equityOptionTransactionSupplement", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class EquityOptionTransactionSupplement extends EquityDerivativeShortFormBase implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Boolean exchangeLookAlike;
	
	@Element
	private Boolean exchangeTradedContractNearest;
	
	@Element
	private Boolean multipleExchangeIndexAnnexFallback;
	
	@Element
	private MethodOfAdjustmentEnum methodOfAdjustment;
	
	@Element
	private Country localJurisdiction;
	
	@Element
	private BigDecimal optionEntitlement;
	
	@Element
	private BigDecimal multiplier;
	
    
	/**
     * public getter
     *
     * For a share option transaction, a flag used to indicate whether the transaction is to be treated as an 'exchange look-alike'. This designation has significance for how share adjustments (arising from corporate actions) will be determined for the transaction. For an 'exchange look-alike' transaction the relevant share adjustments will follow that for a corresponding designated contract listed on the related exchange (referred to as Options Exchange Adjustment (ISDA defined term), otherwise the share adjustments will be determined by the calculation agent (referred to as Calculation Agent Adjustment (ISDA defined term)).
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getExchangeLookAlike() {
	    return this.exchangeLookAlike;
	}
	
	/**
	 * public setter
	 *
     * For a share option transaction, a flag used to indicate whether the transaction is to be treated as an 'exchange look-alike'. This designation has significance for how share adjustments (arising from corporate actions) will be determined for the transaction. For an 'exchange look-alike' transaction the relevant share adjustments will follow that for a corresponding designated contract listed on the related exchange (referred to as Options Exchange Adjustment (ISDA defined term), otherwise the share adjustments will be determined by the calculation agent (referred to as Calculation Agent Adjustment (ISDA defined term)).
     *
     * @param java.lang.Boolean
	 */
	public void setExchangeLookAlike(Boolean exchangeLookAlike) {
	    this.exchangeLookAlike = exchangeLookAlike;
	}
	/**
     * public getter
     *
     * For an index option transaction, a flag used in conjuction with Futures Price Valuation (ISDA defined term) to indicate whether the Nearest Index Contract provision is applicable. The Nearest Index Contract provision is a rule for determining the Exchange-traded Contract (ISDA defined term) without having to explicitly state the actual contract, delivery month and exchange on which it is traded.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getExchangeTradedContractNearest() {
	    return this.exchangeTradedContractNearest;
	}
	
	/**
	 * public setter
	 *
     * For an index option transaction, a flag used in conjuction with Futures Price Valuation (ISDA defined term) to indicate whether the Nearest Index Contract provision is applicable. The Nearest Index Contract provision is a rule for determining the Exchange-traded Contract (ISDA defined term) without having to explicitly state the actual contract, delivery month and exchange on which it is traded.
     *
     * @param java.lang.Boolean
	 */
	public void setExchangeTradedContractNearest(Boolean exchangeTradedContractNearest) {
	    this.exchangeTradedContractNearest = exchangeTradedContractNearest;
	}
	/**
     * public getter
     *
     * For an index option transaction, a flag to indicate whether a relevant Multiple Exchange Index Annex is applicable to the transaction. This annex defines additional provisions which are applicable where an index is comprised of component securities that are traded on multiple exchanges.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getMultipleExchangeIndexAnnexFallback() {
	    return this.multipleExchangeIndexAnnexFallback;
	}
	
	/**
	 * public setter
	 *
     * For an index option transaction, a flag to indicate whether a relevant Multiple Exchange Index Annex is applicable to the transaction. This annex defines additional provisions which are applicable where an index is comprised of component securities that are traded on multiple exchanges.
     *
     * @param java.lang.Boolean
	 */
	public void setMultipleExchangeIndexAnnexFallback(Boolean multipleExchangeIndexAnnexFallback) {
	    this.multipleExchangeIndexAnnexFallback = multipleExchangeIndexAnnexFallback;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.MethodOfAdjustmentEnum
	 */
	public MethodOfAdjustmentEnum getMethodOfAdjustment() {
	    return this.methodOfAdjustment;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.MethodOfAdjustmentEnum
	 */
	public void setMethodOfAdjustment(MethodOfAdjustmentEnum methodOfAdjustment) {
	    this.methodOfAdjustment = methodOfAdjustment;
	}
	/**
     * public getter
     *
     * Local Jurisdiction is a term used in the AEJ Master Confirmation, which is used to determine local taxes, which shall mean taxes, duties, and similar charges imposed by the taxing authority of the Local Jurisdiction If this element is not present Local Jurisdiction is Not Applicable.
     *
     * @returns com.leansoft.fpml.nano.Country
	 */
	public Country getLocalJurisdiction() {
	    return this.localJurisdiction;
	}
	
	/**
	 * public setter
	 *
     * Local Jurisdiction is a term used in the AEJ Master Confirmation, which is used to determine local taxes, which shall mean taxes, duties, and similar charges imposed by the taxing authority of the Local Jurisdiction If this element is not present Local Jurisdiction is Not Applicable.
     *
     * @param com.leansoft.fpml.nano.Country
	 */
	public void setLocalJurisdiction(Country localJurisdiction) {
	    this.localJurisdiction = localJurisdiction;
	}
	/**
     * public getter
     *
     * The number of shares per option comprised in the option transaction supplement.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getOptionEntitlement() {
	    return this.optionEntitlement;
	}
	
	/**
	 * public setter
	 *
     * The number of shares per option comprised in the option transaction supplement.
     *
     * @param java.math.BigDecimal
	 */
	public void setOptionEntitlement(BigDecimal optionEntitlement) {
	    this.optionEntitlement = optionEntitlement;
	}
	/**
     * public getter
     *
     * Specifies the contract multiplier that can be associated with an index option.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getMultiplier() {
	    return this.multiplier;
	}
	
	/**
	 * public setter
	 *
     * Specifies the contract multiplier that can be associated with an index option.
     *
     * @param java.math.BigDecimal
	 */
	public void setMultiplier(BigDecimal multiplier) {
	    this.multiplier = multiplier;
	}

}