// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type describing each of the constituents of a basket.
 */
@RootElement(name = "basketConstituent", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class BasketConstituent implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private ConstituentWeight constituentWeight;
	
	@Element
	private DividendPayout dividendPayout;
	
	@Element
	private Price underlyerPrice;
	
	@Element
	private Money underlyerNotional;
	
	@Element
	private SpreadScheduleReference underlyerSpread;
	
	@Element
	private PendingPayment couponPayment;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * Specifies the weight of each of the underlyer constituent within the basket, either in absolute or relative terms. This is an optional component, as certain swaps do not specify a specific weight for each of their basket constituents.
     *
     * @returns com.leansoft.fpml.nano.ConstituentWeight
	 */
	public ConstituentWeight getConstituentWeight() {
	    return this.constituentWeight;
	}
	
	/**
	 * public setter
	 *
     * Specifies the weight of each of the underlyer constituent within the basket, either in absolute or relative terms. This is an optional component, as certain swaps do not specify a specific weight for each of their basket constituents.
     *
     * @param com.leansoft.fpml.nano.ConstituentWeight
	 */
	public void setConstituentWeight(ConstituentWeight constituentWeight) {
	    this.constituentWeight = constituentWeight;
	}
	/**
     * public getter
     *
     * Specifies the dividend payout ratio associated with an equity underlyer. A basket swap can have different payout ratios across the various underlying constituents. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified. Users should note that FpML makes a distinction between the derivative contract and the underlyer of the contract. It would be better if the agreed dividend payout on a derivative contract was modelled at the level of the derivative contract, an approach which may be adopted in the next major version of FpML.
     *
     * @returns com.leansoft.fpml.nano.DividendPayout
	 */
	public DividendPayout getDividendPayout() {
	    return this.dividendPayout;
	}
	
	/**
	 * public setter
	 *
     * Specifies the dividend payout ratio associated with an equity underlyer. A basket swap can have different payout ratios across the various underlying constituents. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified. Users should note that FpML makes a distinction between the derivative contract and the underlyer of the contract. It would be better if the agreed dividend payout on a derivative contract was modelled at the level of the derivative contract, an approach which may be adopted in the next major version of FpML.
     *
     * @param com.leansoft.fpml.nano.DividendPayout
	 */
	public void setDividendPayout(DividendPayout dividendPayout) {
	    this.dividendPayout = dividendPayout;
	}
	/**
     * public getter
     *
     * Specifies the price that is associated with each of the basket constituents. This component is optional, as it is not absolutely required to accurately describe the economics of the trade, considering the price that characterizes the equity swap is associated to the leg of the trade.
     *
     * @returns com.leansoft.fpml.nano.Price
	 */
	public Price getUnderlyerPrice() {
	    return this.underlyerPrice;
	}
	
	/**
	 * public setter
	 *
     * Specifies the price that is associated with each of the basket constituents. This component is optional, as it is not absolutely required to accurately describe the economics of the trade, considering the price that characterizes the equity swap is associated to the leg of the trade.
     *
     * @param com.leansoft.fpml.nano.Price
	 */
	public void setUnderlyerPrice(Price underlyerPrice) {
	    this.underlyerPrice = underlyerPrice;
	}
	/**
     * public getter
     *
     * Specifies the notional (i.e. price * quantity) that is associated with each of the basket constituents. This component is optional, as it is not absolutely required to accurately describe the economics of the trade, considering the notional that characterizes the equity swap is associated to the leg of the trade.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getUnderlyerNotional() {
	    return this.underlyerNotional;
	}
	
	/**
	 * public setter
	 *
     * Specifies the notional (i.e. price * quantity) that is associated with each of the basket constituents. This component is optional, as it is not absolutely required to accurately describe the economics of the trade, considering the notional that characterizes the equity swap is associated to the leg of the trade.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setUnderlyerNotional(Money underlyerNotional) {
	    this.underlyerNotional = underlyerNotional;
	}
	/**
     * public getter
     *
     * Provides a link to the spread schedule used for this underlyer.
     *
     * @returns com.leansoft.fpml.nano.SpreadScheduleReference
	 */
	public SpreadScheduleReference getUnderlyerSpread() {
	    return this.underlyerSpread;
	}
	
	/**
	 * public setter
	 *
     * Provides a link to the spread schedule used for this underlyer.
     *
     * @param com.leansoft.fpml.nano.SpreadScheduleReference
	 */
	public void setUnderlyerSpread(SpreadScheduleReference underlyerSpread) {
	    this.underlyerSpread = underlyerSpread;
	}
	/**
     * public getter
     *
     * The next upcoming coupon payment.
     *
     * @returns com.leansoft.fpml.nano.PendingPayment
	 */
	public PendingPayment getCouponPayment() {
	    return this.couponPayment;
	}
	
	/**
	 * public setter
	 *
     * The next upcoming coupon payment.
     *
     * @param com.leansoft.fpml.nano.PendingPayment
	 */
	public void setCouponPayment(PendingPayment couponPayment) {
	    this.couponPayment = couponPayment;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}