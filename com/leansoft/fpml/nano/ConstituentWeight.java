// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type describing the weight of each of the underlyer constituent within the basket, either in absolute or relative terms.
 */
public class ConstituentWeight implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private BigDecimal openUnits;
	
	@Element
	private BigDecimal basketPercentage;
	
	@Element
	private Money basketAmount;
	
    
	/**
     * public getter
     *
     * The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getOpenUnits() {
	    return this.openUnits;
	}
	
	/**
	 * public setter
	 *
     * The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.
     *
     * @param java.math.BigDecimal
	 */
	public void setOpenUnits(BigDecimal openUnits) {
	    this.openUnits = openUnits;
	}
	/**
     * public getter
     *
     * The relative weight of each respective basket constituent, expressed in percentage. A basket percentage of 5% would be represented as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getBasketPercentage() {
	    return this.basketPercentage;
	}
	
	/**
	 * public setter
	 *
     * The relative weight of each respective basket constituent, expressed in percentage. A basket percentage of 5% would be represented as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setBasketPercentage(BigDecimal basketPercentage) {
	    this.basketPercentage = basketPercentage;
	}
	/**
     * public getter
     *
     * The relative weight of each respective basket constituent, expressed as a monetary amount.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getBasketAmount() {
	    return this.basketAmount;
	}
	
	/**
	 * public setter
	 *
     * The relative weight of each respective basket constituent, expressed as a monetary amount.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setBasketAmount(Money basketAmount) {
	    this.basketAmount = basketAmount;
	}

}