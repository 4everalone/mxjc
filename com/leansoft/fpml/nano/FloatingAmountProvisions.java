// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

public class FloatingAmountProvisions implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "WACCapInterestProvision")
	private Empty wacCapInterestProvision;
	
	@Element
	private Empty stepUpProvision;
	
    
	/**
     * public getter
     *
     * As specified by the ISDA Supplement for use with trades on mortgage-backed securities, "WAC Cap" means a weighted average coupon or weighted average rate cap provision (however defined in the Underlying Instruments) of the Underlying Instruments that limits, increases or decreases the interest rate or interest entitlement, as set out in the Underlying Instruments on the Effective Date without regard to any subsequent amendment The presence of the element signifies that the provision is applicable. From a usage standpoint, this provision is typically applicable in the case of CMBS and not applicable in case of RMBS trades.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getWacCapInterestProvision() {
	    return this.wacCapInterestProvision;
	}
	
	/**
	 * public setter
	 *
     * As specified by the ISDA Supplement for use with trades on mortgage-backed securities, "WAC Cap" means a weighted average coupon or weighted average rate cap provision (however defined in the Underlying Instruments) of the Underlying Instruments that limits, increases or decreases the interest rate or interest entitlement, as set out in the Underlying Instruments on the Effective Date without regard to any subsequent amendment The presence of the element signifies that the provision is applicable. From a usage standpoint, this provision is typically applicable in the case of CMBS and not applicable in case of RMBS trades.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setWacCapInterestProvision(Empty wacCapInterestProvision) {
	    this.wacCapInterestProvision = wacCapInterestProvision;
	}
	/**
     * public getter
     *
     * As specified by the ISDA Standard Terms Supplement for use with trades on mortgage-backed securities. The presence of the element signifies that the provision is applicable. If applicable, the applicable step-up terms are specified as part of that ISDA Standard Terms Supplement. From a usage standpoint, this provision is typically applicable in the case of RMBS and not applicable in case of CMBS trades.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getStepUpProvision() {
	    return this.stepUpProvision;
	}
	
	/**
	 * public setter
	 *
     * As specified by the ISDA Standard Terms Supplement for use with trades on mortgage-backed securities. The presence of the element signifies that the provision is applicable. If applicable, the applicable step-up terms are specified as part of that ISDA Standard Terms Supplement. From a usage standpoint, this provision is typically applicable in the case of RMBS and not applicable in case of CMBS trades.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setStepUpProvision(Empty stepUpProvision) {
	    this.stepUpProvision = stepUpProvision;
	}

}