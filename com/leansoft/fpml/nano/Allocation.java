// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;
import java.util.Date;

public class Allocation implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyTradeIdentifier allocationTradeId;
	
	@Element
	private AccountReference accountReference;
	
	@Element
	private PartyReference partyReference;
	
	@Element
	private BigDecimal allocatedFraction;
	
	@Element
	private Money allocatedNotional;
	
	@Element
	private Collateral collateral;
	
	@Element
	private Money creditChargeAmount;
	
	@Element
	private Approvals approvals;
	
	@Element
	private Date masterConfirmationDate;
	
    
	/**
     * public getter
     *
     * Unique ID for the allocation.
     *
     * @returns com.leansoft.fpml.nano.PartyTradeIdentifier
	 */
	public PartyTradeIdentifier getAllocationTradeId() {
	    return this.allocationTradeId;
	}
	
	/**
	 * public setter
	 *
     * Unique ID for the allocation.
     *
     * @param com.leansoft.fpml.nano.PartyTradeIdentifier
	 */
	public void setAllocationTradeId(PartyTradeIdentifier allocationTradeId) {
	    this.allocationTradeId = allocationTradeId;
	}
	/**
     * public getter
     *
     * Reference to the subaccount definition in the Party list.
     *
     * @returns com.leansoft.fpml.nano.AccountReference
	 */
	public AccountReference getAccountReference() {
	    return this.accountReference;
	}
	
	/**
	 * public setter
	 *
     * Reference to the subaccount definition in the Party list.
     *
     * @param com.leansoft.fpml.nano.AccountReference
	 */
	public void setAccountReference(AccountReference accountReference) {
	    this.accountReference = accountReference;
	}
	/**
     * public getter
     *
     * Reference to the party definition.
     *
     * @returns com.leansoft.fpml.nano.PartyReference
	 */
	public PartyReference getPartyReference() {
	    return this.partyReference;
	}
	
	/**
	 * public setter
	 *
     * Reference to the party definition.
     *
     * @param com.leansoft.fpml.nano.PartyReference
	 */
	public void setPartyReference(PartyReference partyReference) {
	    this.partyReference = partyReference;
	}
	/**
     * public getter
     *
     * The fractional allocation (0.45 = 45%) of the notional and "block" fees to this particular client subaccount.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getAllocatedFraction() {
	    return this.allocatedFraction;
	}
	
	/**
	 * public setter
	 *
     * The fractional allocation (0.45 = 45%) of the notional and "block" fees to this particular client subaccount.
     *
     * @param java.math.BigDecimal
	 */
	public void setAllocatedFraction(BigDecimal allocatedFraction) {
	    this.allocatedFraction = allocatedFraction;
	}
	/**
     * public getter
     *
     * The notional allocation (amount and currency) to this particular client account.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getAllocatedNotional() {
	    return this.allocatedNotional;
	}
	
	/**
	 * public setter
	 *
     * The notional allocation (amount and currency) to this particular client account.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setAllocatedNotional(Money allocatedNotional) {
	    this.allocatedNotional = allocatedNotional;
	}
	/**
     * public getter
     *
     * The sum that must be posted upfront to collateralize against counterparty credit risk.
     *
     * @returns com.leansoft.fpml.nano.Collateral
	 */
	public Collateral getCollateral() {
	    return this.collateral;
	}
	
	/**
	 * public setter
	 *
     * The sum that must be posted upfront to collateralize against counterparty credit risk.
     *
     * @param com.leansoft.fpml.nano.Collateral
	 */
	public void setCollateral(Collateral collateral) {
	    this.collateral = collateral;
	}
	/**
     * public getter
     *
     * Special credit fee assessed to certain institutions.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getCreditChargeAmount() {
	    return this.creditChargeAmount;
	}
	
	/**
	 * public setter
	 *
     * Special credit fee assessed to certain institutions.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setCreditChargeAmount(Money creditChargeAmount) {
	    this.creditChargeAmount = creditChargeAmount;
	}
	/**
     * public getter
     *
     * A container for approval states in the workflow.
     *
     * @returns com.leansoft.fpml.nano.Approvals
	 */
	public Approvals getApprovals() {
	    return this.approvals;
	}
	
	/**
	 * public setter
	 *
     * A container for approval states in the workflow.
     *
     * @param com.leansoft.fpml.nano.Approvals
	 */
	public void setApprovals(Approvals approvals) {
	    this.approvals = approvals;
	}
	/**
     * public getter
     *
     * The date of the confirmation executed between the parties and intended to govern the allocated trade between those parties.
     *
     * @returns java.util.Date
	 */
	public Date getMasterConfirmationDate() {
	    return this.masterConfirmationDate;
	}
	
	/**
	 * public setter
	 *
     * The date of the confirmation executed between the parties and intended to govern the allocated trade between those parties.
     *
     * @param java.util.Date
	 */
	public void setMasterConfirmationDate(Date masterConfirmationDate) {
	    this.masterConfirmationDate = masterConfirmationDate;
	}

}