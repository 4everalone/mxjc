// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;
import java.util.List;
import java.math.BigDecimal;

public class CashSettlementTerms extends SettlementTerms implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private ValuationDate valuationDate;
	
	@Element
	private BusinessCenterTime valuationTime;
	
	@Element
	private QuotationRateTypeEnum quotationMethod;
	
	@Element
	private Money quotationAmount;
	
	@Element
	private Money minimumQuotationAmount;
	
	@Element
	private List<String> dealer;
	
	@Element
	private BigInteger cashSettlementBusinessDays;
	
	@Element
	private Money cashSettlementAmount;
	
	@Element
	private BigDecimal recoveryFactor;
	
	@Element
	private Boolean accruedInterest;
	
	@Element
	private ValuationMethodEnum valuationMethod;
	
    
	/**
     * public getter
     *
     * The number of business days after conditions to settlement have been satisfied when the calculation agent obtains a price quotation on the Reference Obligation for purposes of cash settlement. There may be one or more valuation dates. This is typically specified if the cash settlement amount is not a fixed amount. ISDA 2003 Term: Valuation Date
     *
     * @returns com.leansoft.fpml.nano.ValuationDate
	 */
	public ValuationDate getValuationDate() {
	    return this.valuationDate;
	}
	
	/**
	 * public setter
	 *
     * The number of business days after conditions to settlement have been satisfied when the calculation agent obtains a price quotation on the Reference Obligation for purposes of cash settlement. There may be one or more valuation dates. This is typically specified if the cash settlement amount is not a fixed amount. ISDA 2003 Term: Valuation Date
     *
     * @param com.leansoft.fpml.nano.ValuationDate
	 */
	public void setValuationDate(ValuationDate valuationDate) {
	    this.valuationDate = valuationDate;
	}
	/**
     * public getter
     *
     * The time of day in the specified business center when the calculation agent seeks quotations for an amount of the reference obligation for purposes of cash settlement. ISDA 2003 Term: Valuation Time
     *
     * @returns com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public BusinessCenterTime getValuationTime() {
	    return this.valuationTime;
	}
	
	/**
	 * public setter
	 *
     * The time of day in the specified business center when the calculation agent seeks quotations for an amount of the reference obligation for purposes of cash settlement. ISDA 2003 Term: Valuation Time
     *
     * @param com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public void setValuationTime(BusinessCenterTime valuationTime) {
	    this.valuationTime = valuationTime;
	}
	/**
     * public getter
     *
     * The type of price quotations to be requested from dealers when determining the market value of the reference obligation for purposes of cash settlement. For example, Bid, Offer or Mid-market. ISDA 2003 Term: Quotation Method
     *
     * @returns com.leansoft.fpml.nano.QuotationRateTypeEnum
	 */
	public QuotationRateTypeEnum getQuotationMethod() {
	    return this.quotationMethod;
	}
	
	/**
	 * public setter
	 *
     * The type of price quotations to be requested from dealers when determining the market value of the reference obligation for purposes of cash settlement. For example, Bid, Offer or Mid-market. ISDA 2003 Term: Quotation Method
     *
     * @param com.leansoft.fpml.nano.QuotationRateTypeEnum
	 */
	public void setQuotationMethod(QuotationRateTypeEnum quotationMethod) {
	    this.quotationMethod = quotationMethod;
	}
	/**
     * public getter
     *
     * In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the quotation amount specifies an upper limit to the outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount equal to the floating rate payer calculation amount. ISDA 2003 Term: Quotation Amount
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getQuotationAmount() {
	    return this.quotationAmount;
	}
	
	/**
	 * public setter
	 *
     * In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the quotation amount specifies an upper limit to the outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount equal to the floating rate payer calculation amount. ISDA 2003 Term: Quotation Amount
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setQuotationAmount(Money quotationAmount) {
	    this.quotationAmount = quotationAmount;
	}
	/**
     * public getter
     *
     * In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the minimum quotation amount specifies a minimum intended threshold amount of outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount of the lower of either USD 1,000,000 (or its equivalent in the relevant obligation currency) or the quotation amount. ISDA 2003 Term: Minimum Quotation Amount
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getMinimumQuotationAmount() {
	    return this.minimumQuotationAmount;
	}
	
	/**
	 * public setter
	 *
     * In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the minimum quotation amount specifies a minimum intended threshold amount of outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount of the lower of either USD 1,000,000 (or its equivalent in the relevant obligation currency) or the quotation amount. ISDA 2003 Term: Minimum Quotation Amount
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setMinimumQuotationAmount(Money minimumQuotationAmount) {
	    this.minimumQuotationAmount = minimumQuotationAmount;
	}
	/**
     * public getter
     *
     * A dealer from whom quotations are obtained by the calculation agent on the reference obligation for purposes of cash settlement. ISDA 2003 Term: Dealer
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getDealer() {
	    return this.dealer;
	}
	
	/**
	 * public setter
	 *
     * A dealer from whom quotations are obtained by the calculation agent on the reference obligation for purposes of cash settlement. ISDA 2003 Term: Dealer
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setDealer(List<String> dealer) {
	    this.dealer = dealer;
	}
	/**
     * public getter
     *
     * The number of business days used in the determination of the cash settlement payment date. If a cash settlement amount is specified, the cash settlement payment date will be this number of business days following the calculation of the final price. If a cash settlement amount is not specified, the cash settlement payment date will be this number of business days after all conditions to settlement are satisfied. ISDA 2003 Term: Cash Settlement Date
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getCashSettlementBusinessDays() {
	    return this.cashSettlementBusinessDays;
	}
	
	/**
	 * public setter
	 *
     * The number of business days used in the determination of the cash settlement payment date. If a cash settlement amount is specified, the cash settlement payment date will be this number of business days following the calculation of the final price. If a cash settlement amount is not specified, the cash settlement payment date will be this number of business days after all conditions to settlement are satisfied. ISDA 2003 Term: Cash Settlement Date
     *
     * @param java.math.BigInteger
	 */
	public void setCashSettlementBusinessDays(BigInteger cashSettlementBusinessDays) {
	    this.cashSettlementBusinessDays = cashSettlementBusinessDays;
	}
	/**
     * public getter
     *
     * The amount paid by the seller to the buyer for cash settlement on the cash settlement date. If not otherwise specified, would typically be calculated as 100 (or the Reference Price) minus the price of the Reference Obligation (all expressed as a percentage) times Floating Rate Payer Calculation Amount. ISDA 2003 Term: Cash Settlement Amount.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getCashSettlementAmount() {
	    return this.cashSettlementAmount;
	}
	
	/**
	 * public setter
	 *
     * The amount paid by the seller to the buyer for cash settlement on the cash settlement date. If not otherwise specified, would typically be calculated as 100 (or the Reference Price) minus the price of the Reference Obligation (all expressed as a percentage) times Floating Rate Payer Calculation Amount. ISDA 2003 Term: Cash Settlement Amount.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setCashSettlementAmount(Money cashSettlementAmount) {
	    this.cashSettlementAmount = cashSettlementAmount;
	}
	/**
     * public getter
     *
     * Used for fixed recovery, specifies the recovery level, determined at contract inception, to be applied on a default. Used to calculate the amount paid by the seller to the buyer for cash settlement on the cash settlement date. Amount calculation is (1 minus the Recovery Factor) multiplied by the Floating Rate Payer Calculation Amount. The currency will be derived from the Floating Rate Payer Calculation Amount.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getRecoveryFactor() {
	    return this.recoveryFactor;
	}
	
	/**
	 * public setter
	 *
     * Used for fixed recovery, specifies the recovery level, determined at contract inception, to be applied on a default. Used to calculate the amount paid by the seller to the buyer for cash settlement on the cash settlement date. Amount calculation is (1 minus the Recovery Factor) multiplied by the Floating Rate Payer Calculation Amount. The currency will be derived from the Floating Rate Payer Calculation Amount.
     *
     * @param java.math.BigDecimal
	 */
	public void setRecoveryFactor(BigDecimal recoveryFactor) {
	    this.recoveryFactor = recoveryFactor;
	}
	/**
     * public getter
     *
     * Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAccruedInterest() {
	    return this.accruedInterest;
	}
	
	/**
	 * public setter
	 *
     * Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest
     *
     * @param java.lang.Boolean
	 */
	public void setAccruedInterest(Boolean accruedInterest) {
	    this.accruedInterest = accruedInterest;
	}
	/**
     * public getter
     *
     * The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement. (ISDA 2003 Term: Valuation Method). For example, Market, Highest etc.
     *
     * @returns com.leansoft.fpml.nano.ValuationMethodEnum
	 */
	public ValuationMethodEnum getValuationMethod() {
	    return this.valuationMethod;
	}
	
	/**
	 * public setter
	 *
     * The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement. (ISDA 2003 Term: Valuation Method). For example, Market, Highest etc.
     *
     * @param com.leansoft.fpml.nano.ValuationMethodEnum
	 */
	public void setValuationMethod(ValuationMethodEnum valuationMethod) {
	    this.valuationMethod = valuationMethod;
	}

}