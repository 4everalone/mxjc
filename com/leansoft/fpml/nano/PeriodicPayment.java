// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

public class PeriodicPayment implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Interval paymentFrequency;
	
	@Element
	private Date firstPeriodStartDate;
	
	@Element
	private Date firstPaymentDate;
	
	@Element
	private Date lastRegularPaymentDate;
	
	@Element
	private String rollConvention;
	
	@Element
	private Money fixedAmount;
	
	@Element
	private FixedAmountCalculation fixedAmountCalculation;
	
	@Element
	private List<AdjustedPaymentDates> adjustedPaymentDates;
	
    
	/**
     * public getter
     *
     * The time interval between regular fixed rate payer payment dates.
     *
     * @returns com.leansoft.fpml.nano.Interval
	 */
	public Interval getPaymentFrequency() {
	    return this.paymentFrequency;
	}
	
	/**
	 * public setter
	 *
     * The time interval between regular fixed rate payer payment dates.
     *
     * @param com.leansoft.fpml.nano.Interval
	 */
	public void setPaymentFrequency(Interval paymentFrequency) {
	    this.paymentFrequency = paymentFrequency;
	}
	/**
     * public getter
     *
     * The start date of the initial calculation period if such date is not equal to the trade’s effective date. It must only be specified if it is not equal to the effective date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement).
     *
     * @returns java.util.Date
	 */
	public Date getFirstPeriodStartDate() {
	    return this.firstPeriodStartDate;
	}
	
	/**
	 * public setter
	 *
     * The start date of the initial calculation period if such date is not equal to the trade’s effective date. It must only be specified if it is not equal to the effective date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement).
     *
     * @param java.util.Date
	 */
	public void setFirstPeriodStartDate(Date firstPeriodStartDate) {
	    this.firstPeriodStartDate = firstPeriodStartDate;
	}
	/**
     * public getter
     *
     * The first unadjusted fixed rate payer payment date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement). ISDA 2003 Term: Fixed Rate Payer Payment Date
     *
     * @returns java.util.Date
	 */
	public Date getFirstPaymentDate() {
	    return this.firstPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * The first unadjusted fixed rate payer payment date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement). ISDA 2003 Term: Fixed Rate Payer Payment Date
     *
     * @param java.util.Date
	 */
	public void setFirstPaymentDate(Date firstPaymentDate) {
	    this.firstPaymentDate = firstPaymentDate;
	}
	/**
     * public getter
     *
     * The last regular unadjusted fixed rate payer payment date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement). This element should only be included if there is a final payment stub, i.e. where the last regular unadjusted fixed rate payer payment date is not equal to the scheduled termination date. ISDA 2003 Term: Fixed Rate Payer Payment Date
     *
     * @returns java.util.Date
	 */
	public Date getLastRegularPaymentDate() {
	    return this.lastRegularPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * The last regular unadjusted fixed rate payer payment date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement). This element should only be included if there is a final payment stub, i.e. where the last regular unadjusted fixed rate payer payment date is not equal to the scheduled termination date. ISDA 2003 Term: Fixed Rate Payer Payment Date
     *
     * @param java.util.Date
	 */
	public void setLastRegularPaymentDate(Date lastRegularPaymentDate) {
	    this.lastRegularPaymentDate = lastRegularPaymentDate;
	}
	/**
     * public getter
     *
     * Used in conjunction with the effectiveDate, scheduledTerminationDate, firstPaymentDate, lastRegularPaymentDate and paymentFrequency to determine the regular fixed rate payer payment dates.
     *
     * @returns java.lang.String
	 */
	public String getRollConvention() {
	    return this.rollConvention;
	}
	
	/**
	 * public setter
	 *
     * Used in conjunction with the effectiveDate, scheduledTerminationDate, firstPaymentDate, lastRegularPaymentDate and paymentFrequency to determine the regular fixed rate payer payment dates.
     *
     * @param java.lang.String
	 */
	public void setRollConvention(String rollConvention) {
	    this.rollConvention = rollConvention;
	}
	/**
     * public getter
     *
     * A fixed payment amount. ISDA 2003 Term: Fixed Amount
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getFixedAmount() {
	    return this.fixedAmount;
	}
	
	/**
	 * public setter
	 *
     * A fixed payment amount. ISDA 2003 Term: Fixed Amount
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setFixedAmount(Money fixedAmount) {
	    this.fixedAmount = fixedAmount;
	}
	/**
     * public getter
     *
     * This element contains all the terms relevant to calculating a fixed amount where the fixed amount is calculated by reference to a per annum fixed rate. There is no corresponding ISDA 2003 Term. The equivalent is Sec 5.1 "Calculation of Fixed Amount" but this in itself is not a defined Term.
     *
     * @returns com.leansoft.fpml.nano.FixedAmountCalculation
	 */
	public FixedAmountCalculation getFixedAmountCalculation() {
	    return this.fixedAmountCalculation;
	}
	
	/**
	 * public setter
	 *
     * This element contains all the terms relevant to calculating a fixed amount where the fixed amount is calculated by reference to a per annum fixed rate. There is no corresponding ISDA 2003 Term. The equivalent is Sec 5.1 "Calculation of Fixed Amount" but this in itself is not a defined Term.
     *
     * @param com.leansoft.fpml.nano.FixedAmountCalculation
	 */
	public void setFixedAmountCalculation(FixedAmountCalculation fixedAmountCalculation) {
	    this.fixedAmountCalculation = fixedAmountCalculation;
	}
	/**
     * public getter
     *
     * An optional cashflow-like structure allowing the equivalent representation of the periodic fixed payments in terms of a series of adjusted payment dates and amounts. This is intended to support application integration within an organisation and is not intended for use in inter-firm communication or confirmations. ISDA 2003 Term: Fixed Rate Payer Payment Date
     *
     * @returns java.util.List<com.leansoft.fpml.nano.AdjustedPaymentDates>
	 */
	public List<AdjustedPaymentDates> getAdjustedPaymentDates() {
	    return this.adjustedPaymentDates;
	}
	
	/**
	 * public setter
	 *
     * An optional cashflow-like structure allowing the equivalent representation of the periodic fixed payments in terms of a series of adjusted payment dates and amounts. This is intended to support application integration within an organisation and is not intended for use in inter-firm communication or confirmations. ISDA 2003 Term: Fixed Rate Payer Payment Date
     *
     * @param java.util.List<com.leansoft.fpml.nano.AdjustedPaymentDates>
	 */
	public void setAdjustedPaymentDates(List<AdjustedPaymentDates> adjustedPaymentDates) {
	    this.adjustedPaymentDates = adjustedPaymentDates;
	}

}