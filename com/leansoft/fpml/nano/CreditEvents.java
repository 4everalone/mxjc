// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

@RootElement(name = "creditEvents", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class CreditEvents implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Empty bankruptcy;
	
	@Element
	private FailureToPay failureToPay;
	
	@Element
	private Empty failureToPayPrincipal;
	
	@Element
	private Empty failureToPayInterest;
	
	@Element
	private Empty obligationDefault;
	
	@Element
	private Empty obligationAcceleration;
	
	@Element
	private Empty repudiationMoratorium;
	
	@Element
	private Restructuring restructuring;
	
	@Element
	private Empty distressedRatingsDowngrade;
	
	@Element
	private Empty maturityExtension;
	
	@Element
	private Empty writedown;
	
	@Element
	private Money defaultRequirement;
	
	@Element
	private CreditEventNotice creditEventNotice;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * A credit event. The reference entity has been dissolved or has become insolvent. It also covers events that may be a precursor to insolvency such as instigation of bankruptcy or insolvency proceedings. Sovereign trades are not subject to Bankruptcy as "technically" a Sovereign cannot become bankrupt. ISDA 2003 Term: Bankruptcy
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getBankruptcy() {
	    return this.bankruptcy;
	}
	
	/**
	 * public setter
	 *
     * A credit event. The reference entity has been dissolved or has become insolvent. It also covers events that may be a precursor to insolvency such as instigation of bankruptcy or insolvency proceedings. Sovereign trades are not subject to Bankruptcy as "technically" a Sovereign cannot become bankrupt. ISDA 2003 Term: Bankruptcy
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setBankruptcy(Empty bankruptcy) {
	    this.bankruptcy = bankruptcy;
	}
	/**
     * public getter
     *
     * A credit event. This credit event triggers, after the expiration of any applicable grace period, if the reference entity fails to make due payments in an aggregrate amount of not less than the payment requirement on one or more obligations (e.g. a missed coupon payment). ISDA 2003 Term: Failure to Pay
     *
     * @returns com.leansoft.fpml.nano.FailureToPay
	 */
	public FailureToPay getFailureToPay() {
	    return this.failureToPay;
	}
	
	/**
	 * public setter
	 *
     * A credit event. This credit event triggers, after the expiration of any applicable grace period, if the reference entity fails to make due payments in an aggregrate amount of not less than the payment requirement on one or more obligations (e.g. a missed coupon payment). ISDA 2003 Term: Failure to Pay
     *
     * @param com.leansoft.fpml.nano.FailureToPay
	 */
	public void setFailureToPay(FailureToPay failureToPay) {
	    this.failureToPay = failureToPay;
	}
	/**
     * public getter
     *
     * A credit event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getFailureToPayPrincipal() {
	    return this.failureToPayPrincipal;
	}
	
	/**
	 * public setter
	 *
     * A credit event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setFailureToPayPrincipal(Empty failureToPayPrincipal) {
	    this.failureToPayPrincipal = failureToPayPrincipal;
	}
	/**
     * public getter
     *
     * A credit event. Corresponds to the failure by the Reference Entity to pay an expected interest amount or the payment of an actual interest amount that is less than the expected interest amount. ISDA 2003 Term: Failure to Pay Interest.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getFailureToPayInterest() {
	    return this.failureToPayInterest;
	}
	
	/**
	 * public setter
	 *
     * A credit event. Corresponds to the failure by the Reference Entity to pay an expected interest amount or the payment of an actual interest amount that is less than the expected interest amount. ISDA 2003 Term: Failure to Pay Interest.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setFailureToPayInterest(Empty failureToPayInterest) {
	    this.failureToPayInterest = failureToPayInterest;
	}
	/**
     * public getter
     *
     * A credit event. One or more of the obligations have become capable of being declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay. ISDA 2003 Term: Obligation Default
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getObligationDefault() {
	    return this.obligationDefault;
	}
	
	/**
	 * public setter
	 *
     * A credit event. One or more of the obligations have become capable of being declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay. ISDA 2003 Term: Obligation Default
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setObligationDefault(Empty obligationDefault) {
	    this.obligationDefault = obligationDefault;
	}
	/**
     * public getter
     *
     * A credit event. One or more of the obligations have been declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay (preferred by the market over Obligation Default, because more definitive and encompasses the definition of Obligation Default - this is more favorable to the Seller). Subject to the default requirement amount. ISDA 2003 Term: Obligation Acceleration
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getObligationAcceleration() {
	    return this.obligationAcceleration;
	}
	
	/**
	 * public setter
	 *
     * A credit event. One or more of the obligations have been declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay (preferred by the market over Obligation Default, because more definitive and encompasses the definition of Obligation Default - this is more favorable to the Seller). Subject to the default requirement amount. ISDA 2003 Term: Obligation Acceleration
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setObligationAcceleration(Empty obligationAcceleration) {
	    this.obligationAcceleration = obligationAcceleration;
	}
	/**
     * public getter
     *
     * A credit event. The reference entity, or a governmental authority, either refuses to recognise or challenges the validity of one or more obligations of the reference entity, or imposes a moratorium thereby postponing payments on one or more of the obligations of the reference entity. Subject to the default requirement amount. ISDA 2003 Term: Repudiation/Moratorium
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getRepudiationMoratorium() {
	    return this.repudiationMoratorium;
	}
	
	/**
	 * public setter
	 *
     * A credit event. The reference entity, or a governmental authority, either refuses to recognise or challenges the validity of one or more obligations of the reference entity, or imposes a moratorium thereby postponing payments on one or more of the obligations of the reference entity. Subject to the default requirement amount. ISDA 2003 Term: Repudiation/Moratorium
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setRepudiationMoratorium(Empty repudiationMoratorium) {
	    this.repudiationMoratorium = repudiationMoratorium;
	}
	/**
     * public getter
     *
     * A credit event. A restructuring is an event that materially impacts the reference entity's obligations, such as an interest rate reduction, principal reduction, deferral of interest or principal, change in priority ranking, or change in currency or composition of payment. ISDA 2003 Term: Restructuring
     *
     * @returns com.leansoft.fpml.nano.Restructuring
	 */
	public Restructuring getRestructuring() {
	    return this.restructuring;
	}
	
	/**
	 * public setter
	 *
     * A credit event. A restructuring is an event that materially impacts the reference entity's obligations, such as an interest rate reduction, principal reduction, deferral of interest or principal, change in priority ranking, or change in currency or composition of payment. ISDA 2003 Term: Restructuring
     *
     * @param com.leansoft.fpml.nano.Restructuring
	 */
	public void setRestructuring(Restructuring restructuring) {
	    this.restructuring = restructuring;
	}
	/**
     * public getter
     *
     * A credit event. Results from the fact that the rating of the reference obligation is downgraded to a distressed rating level. From a usage standpoint, this credit event is typically not applicable in case of RMBS trades.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getDistressedRatingsDowngrade() {
	    return this.distressedRatingsDowngrade;
	}
	
	/**
	 * public setter
	 *
     * A credit event. Results from the fact that the rating of the reference obligation is downgraded to a distressed rating level. From a usage standpoint, this credit event is typically not applicable in case of RMBS trades.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setDistressedRatingsDowngrade(Empty distressedRatingsDowngrade) {
	    this.distressedRatingsDowngrade = distressedRatingsDowngrade;
	}
	/**
     * public getter
     *
     * A credit event. Results from the fact that the underlier fails to make principal payments as expected.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getMaturityExtension() {
	    return this.maturityExtension;
	}
	
	/**
	 * public setter
	 *
     * A credit event. Results from the fact that the underlier fails to make principal payments as expected.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setMaturityExtension(Empty maturityExtension) {
	    this.maturityExtension = maturityExtension;
	}
	/**
     * public getter
     *
     * A credit event. Results from the fact that the underlier writes down its outstanding principal amount.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getWritedown() {
	    return this.writedown;
	}
	
	/**
	 * public setter
	 *
     * A credit event. Results from the fact that the underlier writes down its outstanding principal amount.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setWritedown(Empty writedown) {
	    this.writedown = writedown;
	}
	/**
     * public getter
     *
     * In relation to certain credit events, serves as a threshold for Obligation Acceleration, Obligation Default, Repudiation/Moratorium and Restructuring. Market standard is USD 10,000,000 (JPY 1,000,000,000 for all Japanese Yen trades). This is applied on an aggregate or total basis across all Obligations of the Reference Entity. Used to prevent technical/operational errors from triggering credit events. ISDA 2003 Term: Default Requirement
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getDefaultRequirement() {
	    return this.defaultRequirement;
	}
	
	/**
	 * public setter
	 *
     * In relation to certain credit events, serves as a threshold for Obligation Acceleration, Obligation Default, Repudiation/Moratorium and Restructuring. Market standard is USD 10,000,000 (JPY 1,000,000,000 for all Japanese Yen trades). This is applied on an aggregate or total basis across all Obligations of the Reference Entity. Used to prevent technical/operational errors from triggering credit events. ISDA 2003 Term: Default Requirement
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setDefaultRequirement(Money defaultRequirement) {
	    this.defaultRequirement = defaultRequirement;
	}
	/**
     * public getter
     *
     * A specified condition to settlement. An irrevocable written or verbal notice that describes a credit event that has occurred. The notice is sent from the notifying party (either the buyer or the seller) to the counterparty. It provides information relevant to determining that a credit event has occurred. This is typically accompanied by Publicly Available Information. ISDA 2003 Term: Credit Event Notice
     *
     * @returns com.leansoft.fpml.nano.CreditEventNotice
	 */
	public CreditEventNotice getCreditEventNotice() {
	    return this.creditEventNotice;
	}
	
	/**
	 * public setter
	 *
     * A specified condition to settlement. An irrevocable written or verbal notice that describes a credit event that has occurred. The notice is sent from the notifying party (either the buyer or the seller) to the counterparty. It provides information relevant to determining that a credit event has occurred. This is typically accompanied by Publicly Available Information. ISDA 2003 Term: Credit Event Notice
     *
     * @param com.leansoft.fpml.nano.CreditEventNotice
	 */
	public void setCreditEventNotice(CreditEventNotice creditEventNotice) {
	    this.creditEventNotice = creditEventNotice;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}