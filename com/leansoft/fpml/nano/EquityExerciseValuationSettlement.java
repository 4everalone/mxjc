// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type for defining exercise procedures for equity options.
 */
public class EquityExerciseValuationSettlement implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private EquityEuropeanExercise equityEuropeanExercise;
	
	@Element
	private EquityAmericanExercise equityAmericanExercise;
	
	@Element
	private EquityBermudaExercise equityBermudaExercise;
	
	@Element
	private Boolean automaticExercise;
	
	@Element
	private MakeWholeProvisions makeWholeProvisions;
	
	@Element
	private PrePayment prePayment;
	
	@Element
	private EquityValuation equityValuation;
	
	@Element
	private AdjustableOrRelativeDate settlementDate;
	
	@Element
	private Currency settlementCurrency;
	
	@Element
	private SettlementPriceSource settlementPriceSource;
	
	@Element
	private SettlementTypeEnum settlementType;
	
	@Element
	private AdjustableOrRelativeDate settlementMethodElectionDate;
	
	@Element
	private PartyReference settlementMethodElectingPartyReference;
	
    
	/**
     * public getter
     *
     * The parameters for defining the expiration date and time for a European style equity option
     *
     * @returns com.leansoft.fpml.nano.EquityEuropeanExercise
	 */
	public EquityEuropeanExercise getEquityEuropeanExercise() {
	    return this.equityEuropeanExercise;
	}
	
	/**
	 * public setter
	 *
     * The parameters for defining the expiration date and time for a European style equity option
     *
     * @param com.leansoft.fpml.nano.EquityEuropeanExercise
	 */
	public void setEquityEuropeanExercise(EquityEuropeanExercise equityEuropeanExercise) {
	    this.equityEuropeanExercise = equityEuropeanExercise;
	}
	/**
     * public getter
     *
     * The parameters for defining the exercise period for an American style equity option together with the rules governing the quantity of the underlying that can be exercised on any given exercise date.
     *
     * @returns com.leansoft.fpml.nano.EquityAmericanExercise
	 */
	public EquityAmericanExercise getEquityAmericanExercise() {
	    return this.equityAmericanExercise;
	}
	
	/**
	 * public setter
	 *
     * The parameters for defining the exercise period for an American style equity option together with the rules governing the quantity of the underlying that can be exercised on any given exercise date.
     *
     * @param com.leansoft.fpml.nano.EquityAmericanExercise
	 */
	public void setEquityAmericanExercise(EquityAmericanExercise equityAmericanExercise) {
	    this.equityAmericanExercise = equityAmericanExercise;
	}
	/**
     * public getter
     *
     * The parameters for defining the exercise period for an Bermuda style equity option together with the rules governing the quantity of the underlying that can be exercised on any given exercise date.
     *
     * @returns com.leansoft.fpml.nano.EquityBermudaExercise
	 */
	public EquityBermudaExercise getEquityBermudaExercise() {
	    return this.equityBermudaExercise;
	}
	
	/**
	 * public setter
	 *
     * The parameters for defining the exercise period for an Bermuda style equity option together with the rules governing the quantity of the underlying that can be exercised on any given exercise date.
     *
     * @param com.leansoft.fpml.nano.EquityBermudaExercise
	 */
	public void setEquityBermudaExercise(EquityBermudaExercise equityBermudaExercise) {
	    this.equityBermudaExercise = equityBermudaExercise;
	}
	/**
     * public getter
     *
     * If true then each option not previously exercised will be deemed to be exercised at the expiration time on the expiration date without service of notice unless the buyer notifies the seller that it no longer wishes this to occur.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAutomaticExercise() {
	    return this.automaticExercise;
	}
	
	/**
	 * public setter
	 *
     * If true then each option not previously exercised will be deemed to be exercised at the expiration time on the expiration date without service of notice unless the buyer notifies the seller that it no longer wishes this to occur.
     *
     * @param java.lang.Boolean
	 */
	public void setAutomaticExercise(Boolean automaticExercise) {
	    this.automaticExercise = automaticExercise;
	}
	/**
     * public getter
     *
     * Provisions covering early exercise of option.
     *
     * @returns com.leansoft.fpml.nano.MakeWholeProvisions
	 */
	public MakeWholeProvisions getMakeWholeProvisions() {
	    return this.makeWholeProvisions;
	}
	
	/**
	 * public setter
	 *
     * Provisions covering early exercise of option.
     *
     * @param com.leansoft.fpml.nano.MakeWholeProvisions
	 */
	public void setMakeWholeProvisions(MakeWholeProvisions makeWholeProvisions) {
	    this.makeWholeProvisions = makeWholeProvisions;
	}
	/**
     * public getter
     *
     * Prepayment features for Forward.
     *
     * @returns com.leansoft.fpml.nano.PrePayment
	 */
	public PrePayment getPrePayment() {
	    return this.prePayment;
	}
	
	/**
	 * public setter
	 *
     * Prepayment features for Forward.
     *
     * @param com.leansoft.fpml.nano.PrePayment
	 */
	public void setPrePayment(PrePayment prePayment) {
	    this.prePayment = prePayment;
	}
	/**
     * public getter
     *
     * The parameters for defining when valuation of the underlying takes place.
     *
     * @returns com.leansoft.fpml.nano.EquityValuation
	 */
	public EquityValuation getEquityValuation() {
	    return this.equityValuation;
	}
	
	/**
	 * public setter
	 *
     * The parameters for defining when valuation of the underlying takes place.
     *
     * @param com.leansoft.fpml.nano.EquityValuation
	 */
	public void setEquityValuation(EquityValuation equityValuation) {
	    this.equityValuation = equityValuation;
	}
	/**
     * public getter
     *
     * Date on which settlement of option premiums will occur.
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getSettlementDate() {
	    return this.settlementDate;
	}
	
	/**
	 * public setter
	 *
     * Date on which settlement of option premiums will occur.
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setSettlementDate(AdjustableOrRelativeDate settlementDate) {
	    this.settlementDate = settlementDate;
	}
	/**
     * public getter
     *
     * The currency in which a cash settlement for non-deliverable forward and non-deliverable options.
     *
     * @returns com.leansoft.fpml.nano.Currency
	 */
	public Currency getSettlementCurrency() {
	    return this.settlementCurrency;
	}
	
	/**
	 * public setter
	 *
     * The currency in which a cash settlement for non-deliverable forward and non-deliverable options.
     *
     * @param com.leansoft.fpml.nano.Currency
	 */
	public void setSettlementCurrency(Currency settlementCurrency) {
	    this.settlementCurrency = settlementCurrency;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.SettlementPriceSource
	 */
	public SettlementPriceSource getSettlementPriceSource() {
	    return this.settlementPriceSource;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.SettlementPriceSource
	 */
	public void setSettlementPriceSource(SettlementPriceSource settlementPriceSource) {
	    this.settlementPriceSource = settlementPriceSource;
	}
	/**
     * public getter
     *
     * How the option will be settled.
     *
     * @returns com.leansoft.fpml.nano.SettlementTypeEnum
	 */
	public SettlementTypeEnum getSettlementType() {
	    return this.settlementType;
	}
	
	/**
	 * public setter
	 *
     * How the option will be settled.
     *
     * @param com.leansoft.fpml.nano.SettlementTypeEnum
	 */
	public void setSettlementType(SettlementTypeEnum settlementType) {
	    this.settlementType = settlementType;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getSettlementMethodElectionDate() {
	    return this.settlementMethodElectionDate;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setSettlementMethodElectionDate(AdjustableOrRelativeDate settlementMethodElectionDate) {
	    this.settlementMethodElectionDate = settlementMethodElectionDate;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.PartyReference
	 */
	public PartyReference getSettlementMethodElectingPartyReference() {
	    return this.settlementMethodElectingPartyReference;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.PartyReference
	 */
	public void setSettlementMethodElectingPartyReference(PartyReference settlementMethodElectingPartyReference) {
	    this.settlementMethodElectingPartyReference = settlementMethodElectingPartyReference;
	}

}