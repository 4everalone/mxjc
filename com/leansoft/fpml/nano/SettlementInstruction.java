// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * A type that models a complete instruction for settling a currency payment, including the settlement method to be used, the correspondent bank, any intermediary banks and the ultimate beneficary.
 */
public class SettlementInstruction implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private SettlementMethod settlementMethod;
	
	@Element
	private CorrespondentInformation correspondentInformation;
	
	@Element
	private List<IntermediaryInformation> intermediaryInformation;
	
	@Element
	private Beneficiary beneficiaryBank;
	
	@Element
	private Beneficiary beneficiary;
	
	@Element
	private PartyReference depositoryPartyReference;
	
	@Element
	private List<SplitSettlement> splitSettlement;
	
    
	/**
     * public getter
     *
     * The mechanism by which settlement is to be made. The scheme of domain values will include standard mechanisms such as CLS, Fedwire, Chips ABA, Chips UID, SWIFT, CHAPS and DDA.
     *
     * @returns com.leansoft.fpml.nano.SettlementMethod
	 */
	public SettlementMethod getSettlementMethod() {
	    return this.settlementMethod;
	}
	
	/**
	 * public setter
	 *
     * The mechanism by which settlement is to be made. The scheme of domain values will include standard mechanisms such as CLS, Fedwire, Chips ABA, Chips UID, SWIFT, CHAPS and DDA.
     *
     * @param com.leansoft.fpml.nano.SettlementMethod
	 */
	public void setSettlementMethod(SettlementMethod settlementMethod) {
	    this.settlementMethod = settlementMethod;
	}
	/**
     * public getter
     *
     * The information required to identify the correspondent bank that will make delivery of the funds on the paying bank's behalf in the country where the payment is to be made
     *
     * @returns com.leansoft.fpml.nano.CorrespondentInformation
	 */
	public CorrespondentInformation getCorrespondentInformation() {
	    return this.correspondentInformation;
	}
	
	/**
	 * public setter
	 *
     * The information required to identify the correspondent bank that will make delivery of the funds on the paying bank's behalf in the country where the payment is to be made
     *
     * @param com.leansoft.fpml.nano.CorrespondentInformation
	 */
	public void setCorrespondentInformation(CorrespondentInformation correspondentInformation) {
	    this.correspondentInformation = correspondentInformation;
	}
	/**
     * public getter
     *
     * Information to identify an intermediary through which payment will be made by the correspondent bank to the ultimate beneficiary of the funds.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.IntermediaryInformation>
	 */
	public List<IntermediaryInformation> getIntermediaryInformation() {
	    return this.intermediaryInformation;
	}
	
	/**
	 * public setter
	 *
     * Information to identify an intermediary through which payment will be made by the correspondent bank to the ultimate beneficiary of the funds.
     *
     * @param java.util.List<com.leansoft.fpml.nano.IntermediaryInformation>
	 */
	public void setIntermediaryInformation(List<IntermediaryInformation> intermediaryInformation) {
	    this.intermediaryInformation = intermediaryInformation;
	}
	/**
     * public getter
     *
     * The bank that acts for the ultimate beneficiary of the funds in receiving payments.
     *
     * @returns com.leansoft.fpml.nano.Beneficiary
	 */
	public Beneficiary getBeneficiaryBank() {
	    return this.beneficiaryBank;
	}
	
	/**
	 * public setter
	 *
     * The bank that acts for the ultimate beneficiary of the funds in receiving payments.
     *
     * @param com.leansoft.fpml.nano.Beneficiary
	 */
	public void setBeneficiaryBank(Beneficiary beneficiaryBank) {
	    this.beneficiaryBank = beneficiaryBank;
	}
	/**
     * public getter
     *
     * The ultimate beneficiary of the funds. The beneficiary can be identified either by an account at the beneficiaryBank (qv) or by explicit routingInformation. This element provides for the latter.
     *
     * @returns com.leansoft.fpml.nano.Beneficiary
	 */
	public Beneficiary getBeneficiary() {
	    return this.beneficiary;
	}
	
	/**
	 * public setter
	 *
     * The ultimate beneficiary of the funds. The beneficiary can be identified either by an account at the beneficiaryBank (qv) or by explicit routingInformation. This element provides for the latter.
     *
     * @param com.leansoft.fpml.nano.Beneficiary
	 */
	public void setBeneficiary(Beneficiary beneficiary) {
	    this.beneficiary = beneficiary;
	}
	/**
     * public getter
     *
     * Reference to the depository of the settlement.
     *
     * @returns com.leansoft.fpml.nano.PartyReference
	 */
	public PartyReference getDepositoryPartyReference() {
	    return this.depositoryPartyReference;
	}
	
	/**
	 * public setter
	 *
     * Reference to the depository of the settlement.
     *
     * @param com.leansoft.fpml.nano.PartyReference
	 */
	public void setDepositoryPartyReference(PartyReference depositoryPartyReference) {
	    this.depositoryPartyReference = depositoryPartyReference;
	}
	/**
     * public getter
     *
     * The set of individual payments that are to be made when a currency payment settling a trade needs to be split between a number of ultimate beneficiaries. Each split payment may need to have its own routing information.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.SplitSettlement>
	 */
	public List<SplitSettlement> getSplitSettlement() {
	    return this.splitSettlement;
	}
	
	/**
	 * public setter
	 *
     * The set of individual payments that are to be made when a currency payment settling a trade needs to be split between a number of ultimate beneficiaries. Each split payment may need to have its own routing information.
     *
     * @param java.util.List<com.leansoft.fpml.nano.SplitSettlement>
	 */
	public void setSplitSettlement(List<SplitSettlement> splitSettlement) {
	    this.splitSettlement = splitSettlement;
	}

}