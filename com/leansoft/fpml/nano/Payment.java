// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type for defining payments
 */
@RootElement(name = "payment", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class Payment implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrAccountReference payerPartyReference;
	
	@Element
	private PartyOrAccountReference receiverPartyReference;
	
	@Element
	private Money paymentAmount;
	
	@Element
	private AdjustableDate paymentDate;
	
	@Element
	private IdentifiedDate adjustedPaymentDate;
	
	@Element
	private PaymentType paymentType;
	
	@Element
	private SettlementInformation settlementInformation;
	
	@Element
	private BigDecimal discountFactor;
	
	@Element
	private Money presentValueAmount;
	
	@Attribute  
	private Object href;
	
    
	/**
     * public getter
     *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getPayerPartyReference() {
	    return this.payerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setPayerPartyReference(PartyOrAccountReference payerPartyReference) {
	    this.payerPartyReference = payerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getReceiverPartyReference() {
	    return this.receiverPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setReceiverPartyReference(PartyOrAccountReference receiverPartyReference) {
	    this.receiverPartyReference = receiverPartyReference;
	}
	/**
     * public getter
     *
     * The currency amount of the payment.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPaymentAmount() {
	    return this.paymentAmount;
	}
	
	/**
	 * public setter
	 *
     * The currency amount of the payment.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPaymentAmount(Money paymentAmount) {
	    this.paymentAmount = paymentAmount;
	}
	/**
     * public getter
     *
     * The payment date. This date is subject to adjustment in accordance with any applicable business day convention.
     *
     * @returns com.leansoft.fpml.nano.AdjustableDate
	 */
	public AdjustableDate getPaymentDate() {
	    return this.paymentDate;
	}
	
	/**
	 * public setter
	 *
     * The payment date. This date is subject to adjustment in accordance with any applicable business day convention.
     *
     * @param com.leansoft.fpml.nano.AdjustableDate
	 */
	public void setPaymentDate(AdjustableDate paymentDate) {
	    this.paymentDate = paymentDate;
	}
	/**
     * public getter
     *
     * The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but my be specified to allow the fee structure to also serve as a cashflow type component (all dates the the Cashflows type are adjusted payment dates).
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getAdjustedPaymentDate() {
	    return this.adjustedPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but my be specified to allow the fee structure to also serve as a cashflow type component (all dates the the Cashflows type are adjusted payment dates).
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setAdjustedPaymentDate(IdentifiedDate adjustedPaymentDate) {
	    this.adjustedPaymentDate = adjustedPaymentDate;
	}
	/**
     * public getter
     *
     * A classification of the type of fee or additional payment, e.g. brokerage, upfront fee etc. FpML does not define domain values for this element.
     *
     * @returns com.leansoft.fpml.nano.PaymentType
	 */
	public PaymentType getPaymentType() {
	    return this.paymentType;
	}
	
	/**
	 * public setter
	 *
     * A classification of the type of fee or additional payment, e.g. brokerage, upfront fee etc. FpML does not define domain values for this element.
     *
     * @param com.leansoft.fpml.nano.PaymentType
	 */
	public void setPaymentType(PaymentType paymentType) {
	    this.paymentType = paymentType;
	}
	/**
     * public getter
     *
     * The information required to settle a currency payment that results from a trade.
     *
     * @returns com.leansoft.fpml.nano.SettlementInformation
	 */
	public SettlementInformation getSettlementInformation() {
	    return this.settlementInformation;
	}
	
	/**
	 * public setter
	 *
     * The information required to settle a currency payment that results from a trade.
     *
     * @param com.leansoft.fpml.nano.SettlementInformation
	 */
	public void setSettlementInformation(SettlementInformation settlementInformation) {
	    this.settlementInformation = settlementInformation;
	}
	/**
     * public getter
     *
     * The value representing the discount factor used to calculate the present value of the cash flow.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getDiscountFactor() {
	    return this.discountFactor;
	}
	
	/**
	 * public setter
	 *
     * The value representing the discount factor used to calculate the present value of the cash flow.
     *
     * @param java.math.BigDecimal
	 */
	public void setDiscountFactor(BigDecimal discountFactor) {
	    this.discountFactor = discountFactor;
	}
	/**
     * public getter
     *
     * The amount representing the present value of the forecast payment.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPresentValueAmount() {
	    return this.presentValueAmount;
	}
	
	/**
	 * public setter
	 *
     * The amount representing the present value of the forecast payment.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPresentValueAmount(Money presentValueAmount) {
	    this.presentValueAmount = presentValueAmount;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.Object
	 */
	public Object getHref() {
	    return this.href;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.Object
	 */
	public void setHref(Object href) {
	    this.href = href;
	}

}