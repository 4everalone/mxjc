// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigInteger;

/**
 * A type defining a rounding direction and precision to be used in the rounding of a rate.
 */
public class Rounding implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private RoundingDirectionEnum roundingDirection;
	
	@Element
	private BigInteger precision;
	
    
	/**
     * public getter
     *
     * Specifies the rounding direction.
     *
     * @returns com.leansoft.fpml.nano.RoundingDirectionEnum
	 */
	public RoundingDirectionEnum getRoundingDirection() {
	    return this.roundingDirection;
	}
	
	/**
	 * public setter
	 *
     * Specifies the rounding direction.
     *
     * @param com.leansoft.fpml.nano.RoundingDirectionEnum
	 */
	public void setRoundingDirection(RoundingDirectionEnum roundingDirection) {
	    this.roundingDirection = roundingDirection;
	}
	/**
     * public getter
     *
     * Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7 in the FpML document since the percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543) being rounded to the nearest 5 decimal places is 9.87654% (or 0.0987654).
     *
     * @returns java.math.BigInteger
	 */
	public BigInteger getPrecision() {
	    return this.precision;
	}
	
	/**
	 * public setter
	 *
     * Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7 in the FpML document since the percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543) being rounded to the nearest 5 decimal places is 9.87654% (or 0.0987654).
     *
     * @param java.math.BigInteger
	 */
	public void setPrecision(BigInteger precision) {
	    this.precision = precision;
	}

}