// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * Abstract base class of all time bounded dividend period types.
 */
public abstract class DividendPeriod implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private IdentifiedDate unadjustedStartDate;
	
	@Element
	private IdentifiedDate unadjustedEndDate;
	
	@Element
	private BusinessDayAdjustments dateAdjustments;
	
	@Element
	private AssetReference underlyerReference;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * Unadjusted inclusive dividend period start date.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getUnadjustedStartDate() {
	    return this.unadjustedStartDate;
	}
	
	/**
	 * public setter
	 *
     * Unadjusted inclusive dividend period start date.
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setUnadjustedStartDate(IdentifiedDate unadjustedStartDate) {
	    this.unadjustedStartDate = unadjustedStartDate;
	}
	/**
     * public getter
     *
     * Unadjusted inclusive dividend period end date.
     *
     * @returns com.leansoft.fpml.nano.IdentifiedDate
	 */
	public IdentifiedDate getUnadjustedEndDate() {
	    return this.unadjustedEndDate;
	}
	
	/**
	 * public setter
	 *
     * Unadjusted inclusive dividend period end date.
     *
     * @param com.leansoft.fpml.nano.IdentifiedDate
	 */
	public void setUnadjustedEndDate(IdentifiedDate unadjustedEndDate) {
	    this.unadjustedEndDate = unadjustedEndDate;
	}
	/**
     * public getter
     *
     * Date adjustments for all unadjusted dates in this dividend period.
     *
     * @returns com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public BusinessDayAdjustments getDateAdjustments() {
	    return this.dateAdjustments;
	}
	
	/**
	 * public setter
	 *
     * Date adjustments for all unadjusted dates in this dividend period.
     *
     * @param com.leansoft.fpml.nano.BusinessDayAdjustments
	 */
	public void setDateAdjustments(BusinessDayAdjustments dateAdjustments) {
	    this.dateAdjustments = dateAdjustments;
	}
	/**
     * public getter
     *
     * Reference to the underlyer which is paying dividends. This should be used in all cases, and must be used where there are multiple underlying assets, to avoid any ambiguity about which asset the dividend period relates to.
     *
     * @returns com.leansoft.fpml.nano.AssetReference
	 */
	public AssetReference getUnderlyerReference() {
	    return this.underlyerReference;
	}
	
	/**
	 * public setter
	 *
     * Reference to the underlyer which is paying dividends. This should be used in all cases, and must be used where there are multiple underlying assets, to avoid any ambiguity about which asset the dividend period relates to.
     *
     * @param com.leansoft.fpml.nano.AssetReference
	 */
	public void setUnderlyerReference(AssetReference underlyerReference) {
	    this.underlyerReference = underlyerReference;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}