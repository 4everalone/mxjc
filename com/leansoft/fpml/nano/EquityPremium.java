// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;

/**
 * A type used to describe the amount paid for an equity option.
 */
public class EquityPremium implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PartyOrAccountReference payerPartyReference;
	
	@Element
	private PartyOrAccountReference receiverPartyReference;
	
	@Element
	private PremiumTypeEnum premiumType;
	
	@Element
	private Money paymentAmount;
	
	@Element
	private AdjustableDate paymentDate;
	
	@Element
	private Boolean swapPremium;
	
	@Element
	private Money pricePerOption;
	
	@Element
	private BigDecimal percentageOfNotional;
	
    
	/**
     * public getter
     *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getPayerPartyReference() {
	    return this.payerPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party responsible for making the payments defined by this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setPayerPartyReference(PartyOrAccountReference payerPartyReference) {
	    this.payerPartyReference = payerPartyReference;
	}
	/**
     * public getter
     *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @returns com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public PartyOrAccountReference getReceiverPartyReference() {
	    return this.receiverPartyReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the party that receives the payments corresponding to this structure.
     *
     * @param com.leansoft.fpml.nano.PartyOrAccountReference
	 */
	public void setReceiverPartyReference(PartyOrAccountReference receiverPartyReference) {
	    this.receiverPartyReference = receiverPartyReference;
	}
	/**
     * public getter
     *
     * Forward start Premium type
     *
     * @returns com.leansoft.fpml.nano.PremiumTypeEnum
	 */
	public PremiumTypeEnum getPremiumType() {
	    return this.premiumType;
	}
	
	/**
	 * public setter
	 *
     * Forward start Premium type
     *
     * @param com.leansoft.fpml.nano.PremiumTypeEnum
	 */
	public void setPremiumType(PremiumTypeEnum premiumType) {
	    this.premiumType = premiumType;
	}
	/**
     * public getter
     *
     * The currency amount of the payment.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPaymentAmount() {
	    return this.paymentAmount;
	}
	
	/**
	 * public setter
	 *
     * The currency amount of the payment.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPaymentAmount(Money paymentAmount) {
	    this.paymentAmount = paymentAmount;
	}
	/**
     * public getter
     *
     * The payment date. This date is subject to adjustment in accordance with any applicable business day convention.
     *
     * @returns com.leansoft.fpml.nano.AdjustableDate
	 */
	public AdjustableDate getPaymentDate() {
	    return this.paymentDate;
	}
	
	/**
	 * public setter
	 *
     * The payment date. This date is subject to adjustment in accordance with any applicable business day convention.
     *
     * @param com.leansoft.fpml.nano.AdjustableDate
	 */
	public void setPaymentDate(AdjustableDate paymentDate) {
	    this.paymentDate = paymentDate;
	}
	/**
     * public getter
     *
     * Specifies whether or not the premium is to be paid in the style of payments under an interest rate swap contract.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getSwapPremium() {
	    return this.swapPremium;
	}
	
	/**
	 * public setter
	 *
     * Specifies whether or not the premium is to be paid in the style of payments under an interest rate swap contract.
     *
     * @param java.lang.Boolean
	 */
	public void setSwapPremium(Boolean swapPremium) {
	    this.swapPremium = swapPremium;
	}
	/**
     * public getter
     *
     * The amount of premium to be paid expressed as a function of the number of options.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getPricePerOption() {
	    return this.pricePerOption;
	}
	
	/**
	 * public setter
	 *
     * The amount of premium to be paid expressed as a function of the number of options.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setPricePerOption(Money pricePerOption) {
	    this.pricePerOption = pricePerOption;
	}
	/**
     * public getter
     *
     * The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getPercentageOfNotional() {
	    return this.percentageOfNotional;
	}
	
	/**
	 * public setter
	 *
     * The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.
     *
     * @param java.math.BigDecimal
	 */
	public void setPercentageOfNotional(BigDecimal percentageOfNotional) {
	    this.percentageOfNotional = percentageOfNotional;
	}

}