// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type defining the exercise period for a European style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.
 */
@RootElement(name = "europeanExercise", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class EuropeanExercise extends Exercise implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private AdjustableOrRelativeDate expirationDate;
	
	@Element
	private AdjustableOrRelativeDates relevantUnderlyingDate;
	
	@Element
	private BusinessCenterTime earliestExerciseTime;
	
	@Element
	private BusinessCenterTime expirationTime;
	
	@Element
	private PartialExercise partialExercise;
	
	@Element
	private ExerciseFee exerciseFee;
	
    
	/**
     * public getter
     *
     * The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getExpirationDate() {
	    return this.expirationDate;
	}
	
	/**
	 * public setter
	 *
     * The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setExpirationDate(AdjustableOrRelativeDate expirationDate) {
	    this.expirationDate = expirationDate;
	}
	/**
     * public getter
     *
     * The daye on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the effective date, in an extendible/cancelable provision it is the termination date).
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDates
	 */
	public AdjustableOrRelativeDates getRelevantUnderlyingDate() {
	    return this.relevantUnderlyingDate;
	}
	
	/**
	 * public setter
	 *
     * The daye on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the effective date, in an extendible/cancelable provision it is the termination date).
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDates
	 */
	public void setRelevantUnderlyingDate(AdjustableOrRelativeDates relevantUnderlyingDate) {
	    this.relevantUnderlyingDate = relevantUnderlyingDate;
	}
	/**
     * public getter
     *
     * The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.
     *
     * @returns com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public BusinessCenterTime getEarliestExerciseTime() {
	    return this.earliestExerciseTime;
	}
	
	/**
	 * public setter
	 *
     * The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.
     *
     * @param com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public void setEarliestExerciseTime(BusinessCenterTime earliestExerciseTime) {
	    this.earliestExerciseTime = earliestExerciseTime;
	}
	/**
     * public getter
     *
     * The latest time for exercise on expirationDate.
     *
     * @returns com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public BusinessCenterTime getExpirationTime() {
	    return this.expirationTime;
	}
	
	/**
	 * public setter
	 *
     * The latest time for exercise on expirationDate.
     *
     * @param com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public void setExpirationTime(BusinessCenterTime expirationTime) {
	    this.expirationTime = expirationTime;
	}
	/**
     * public getter
     *
     * As defined in the 2000 ISDA Definitions, Section 12.3. Partial Exercise, the buyer of the option has the right to exercise all or less than all the notional amount of the underlying swap on the expiration date, but may not exercise less than the minimum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.
     *
     * @returns com.leansoft.fpml.nano.PartialExercise
	 */
	public PartialExercise getPartialExercise() {
	    return this.partialExercise;
	}
	
	/**
	 * public setter
	 *
     * As defined in the 2000 ISDA Definitions, Section 12.3. Partial Exercise, the buyer of the option has the right to exercise all or less than all the notional amount of the underlying swap on the expiration date, but may not exercise less than the minimum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.
     *
     * @param com.leansoft.fpml.nano.PartialExercise
	 */
	public void setPartialExercise(PartialExercise partialExercise) {
	    this.partialExercise = partialExercise;
	}
	/**
     * public getter
     *
     * A fee to be paid on exercise. This could be represented as an amount or a rate and notional reference on which to apply the rate.
     *
     * @returns com.leansoft.fpml.nano.ExerciseFee
	 */
	public ExerciseFee getExerciseFee() {
	    return this.exerciseFee;
	}
	
	/**
	 * public setter
	 *
     * A fee to be paid on exercise. This could be represented as an amount or a rate and notional reference on which to apply the rate.
     *
     * @param com.leansoft.fpml.nano.ExerciseFee
	 */
	public void setExerciseFee(ExerciseFee exerciseFee) {
	    this.exerciseFee = exerciseFee;
	}

}