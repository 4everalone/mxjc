// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;

/**
 * A sensitivity report definition, consisting of a collection of sensitivity definitions.
 */
public class SensitivitySetDefinition implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private String name;
	
	@Element
	private QuotationCharacteristics sensitivityCharacteristics;
	
	@Element
	private ValuationScenarioReference valuationScenarioReference;
	
	@Element
	private PricingInputType pricingInputType;
	
	@Element
	private PricingStructureReference pricingInputReference;
	
	@Element
	private BigDecimal scale;
	
	@Element
	private List<SensitivityDefinition> sensitivityDefinition;
	
	@Element
	private DerivativeCalculationProcedure calculationProcedure;
	
	@Attribute  
	private String id;
	
    
	/**
     * public getter
     *
     * The name of the sensitivity set definition, e.g. "USDLIBOR curve sensitivities".
     *
     * @returns java.lang.String
	 */
	public String getName() {
	    return this.name;
	}
	
	/**
	 * public setter
	 *
     * The name of the sensitivity set definition, e.g. "USDLIBOR curve sensitivities".
     *
     * @param java.lang.String
	 */
	public void setName(String name) {
	    this.name = name;
	}
	/**
     * public getter
     *
     * The default characteristics of the quotation, e.g. type, units, etc.
     *
     * @returns com.leansoft.fpml.nano.QuotationCharacteristics
	 */
	public QuotationCharacteristics getSensitivityCharacteristics() {
	    return this.sensitivityCharacteristics;
	}
	
	/**
	 * public setter
	 *
     * The default characteristics of the quotation, e.g. type, units, etc.
     *
     * @param com.leansoft.fpml.nano.QuotationCharacteristics
	 */
	public void setSensitivityCharacteristics(QuotationCharacteristics sensitivityCharacteristics) {
	    this.sensitivityCharacteristics = sensitivityCharacteristics;
	}
	/**
     * public getter
     *
     * Reference to the valuation scenario to which this sensitivity definition applies, e.g. a reference to the EOD valuation scenario. If not supplied, this sensitivity set definition is generic to a variety of valuation scenarios.
     *
     * @returns com.leansoft.fpml.nano.ValuationScenarioReference
	 */
	public ValuationScenarioReference getValuationScenarioReference() {
	    return this.valuationScenarioReference;
	}
	
	/**
	 * public setter
	 *
     * Reference to the valuation scenario to which this sensitivity definition applies, e.g. a reference to the EOD valuation scenario. If not supplied, this sensitivity set definition is generic to a variety of valuation scenarios.
     *
     * @param com.leansoft.fpml.nano.ValuationScenarioReference
	 */
	public void setValuationScenarioReference(ValuationScenarioReference valuationScenarioReference) {
	    this.valuationScenarioReference = valuationScenarioReference;
	}
	/**
     * public getter
     *
     * The type of the pricing input to which the sensitivity is shown, e.g. a yield curve or volatility matrix.
     *
     * @returns com.leansoft.fpml.nano.PricingInputType
	 */
	public PricingInputType getPricingInputType() {
	    return this.pricingInputType;
	}
	
	/**
	 * public setter
	 *
     * The type of the pricing input to which the sensitivity is shown, e.g. a yield curve or volatility matrix.
     *
     * @param com.leansoft.fpml.nano.PricingInputType
	 */
	public void setPricingInputType(PricingInputType pricingInputType) {
	    this.pricingInputType = pricingInputType;
	}
	/**
     * public getter
     *
     * A reference to the pricing input to which the sensitivity is shown, e.g. a reference to a USDLIBOR yield curve.
     *
     * @returns com.leansoft.fpml.nano.PricingStructureReference
	 */
	public PricingStructureReference getPricingInputReference() {
	    return this.pricingInputReference;
	}
	
	/**
	 * public setter
	 *
     * A reference to the pricing input to which the sensitivity is shown, e.g. a reference to a USDLIBOR yield curve.
     *
     * @param com.leansoft.fpml.nano.PricingStructureReference
	 */
	public void setPricingInputReference(PricingStructureReference pricingInputReference) {
	    this.pricingInputReference = pricingInputReference;
	}
	/**
     * public getter
     *
     * The size of the denominator, e.g. 0.0001 = 1 bp. For derivatives with respect to time, the default period is 1 day.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getScale() {
	    return this.scale;
	}
	
	/**
	 * public setter
	 *
     * The size of the denominator, e.g. 0.0001 = 1 bp. For derivatives with respect to time, the default period is 1 day.
     *
     * @param java.math.BigDecimal
	 */
	public void setScale(BigDecimal scale) {
	    this.scale = scale;
	}
	/**
     * public getter
     *
     * A set of sensitivity definitions. Either one per point reported, or one generic definition that applies to all points.
     *
     * @returns java.util.List<com.leansoft.fpml.nano.SensitivityDefinition>
	 */
	public List<SensitivityDefinition> getSensitivityDefinition() {
	    return this.sensitivityDefinition;
	}
	
	/**
	 * public setter
	 *
     * A set of sensitivity definitions. Either one per point reported, or one generic definition that applies to all points.
     *
     * @param java.util.List<com.leansoft.fpml.nano.SensitivityDefinition>
	 */
	public void setSensitivityDefinition(List<SensitivityDefinition> sensitivityDefinition) {
	    this.sensitivityDefinition = sensitivityDefinition;
	}
	/**
     * public getter
     *
     * The method by which each derivative is computed, e.g. analytic, numerical model, perturbation, etc., and the corresponding parameters (eg. shift amounts).
     *
     * @returns com.leansoft.fpml.nano.DerivativeCalculationProcedure
	 */
	public DerivativeCalculationProcedure getCalculationProcedure() {
	    return this.calculationProcedure;
	}
	
	/**
	 * public setter
	 *
     * The method by which each derivative is computed, e.g. analytic, numerical model, perturbation, etc., and the corresponding parameters (eg. shift amounts).
     *
     * @param com.leansoft.fpml.nano.DerivativeCalculationProcedure
	 */
	public void setCalculationProcedure(DerivativeCalculationProcedure calculationProcedure) {
	    this.calculationProcedure = calculationProcedure;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getId() {
	    return this.id;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setId(String id) {
	    this.id = id;
	}

}