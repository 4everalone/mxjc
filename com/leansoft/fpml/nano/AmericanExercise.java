// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type defining the exercise period for an American style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.
 */
@RootElement(name = "americanExercise", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class AmericanExercise extends Exercise implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private AdjustableOrRelativeDate commencementDate;
	
	@Element
	private AdjustableOrRelativeDate expirationDate;
	
	@Element
	private AdjustableOrRelativeDates relevantUnderlyingDate;
	
	@Element
	private BusinessCenterTime earliestExerciseTime;
	
	@Element
	private BusinessCenterTime latestExerciseTime;
	
	@Element
	private BusinessCenterTime expirationTime;
	
	@Element
	private MultipleExercise multipleExercise;
	
	@Element
	private ExerciseFeeSchedule exerciseFeeSchedule;
	
    
	/**
     * public getter
     *
     * The first day of the exercise period for an American style option.
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getCommencementDate() {
	    return this.commencementDate;
	}
	
	/**
	 * public setter
	 *
     * The first day of the exercise period for an American style option.
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setCommencementDate(AdjustableOrRelativeDate commencementDate) {
	    this.commencementDate = commencementDate;
	}
	/**
     * public getter
     *
     * The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public AdjustableOrRelativeDate getExpirationDate() {
	    return this.expirationDate;
	}
	
	/**
	 * public setter
	 *
     * The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDate
	 */
	public void setExpirationDate(AdjustableOrRelativeDate expirationDate) {
	    this.expirationDate = expirationDate;
	}
	/**
     * public getter
     *
     * The daye on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the effective date, in an extendible/cancelable provision it is the termination date).
     *
     * @returns com.leansoft.fpml.nano.AdjustableOrRelativeDates
	 */
	public AdjustableOrRelativeDates getRelevantUnderlyingDate() {
	    return this.relevantUnderlyingDate;
	}
	
	/**
	 * public setter
	 *
     * The daye on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the effective date, in an extendible/cancelable provision it is the termination date).
     *
     * @param com.leansoft.fpml.nano.AdjustableOrRelativeDates
	 */
	public void setRelevantUnderlyingDate(AdjustableOrRelativeDates relevantUnderlyingDate) {
	    this.relevantUnderlyingDate = relevantUnderlyingDate;
	}
	/**
     * public getter
     *
     * The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.
     *
     * @returns com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public BusinessCenterTime getEarliestExerciseTime() {
	    return this.earliestExerciseTime;
	}
	
	/**
	 * public setter
	 *
     * The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.
     *
     * @param com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public void setEarliestExerciseTime(BusinessCenterTime earliestExerciseTime) {
	    this.earliestExerciseTime = earliestExerciseTime;
	}
	/**
     * public getter
     *
     * For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller's agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.
     *
     * @returns com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public BusinessCenterTime getLatestExerciseTime() {
	    return this.latestExerciseTime;
	}
	
	/**
	 * public setter
	 *
     * For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller's agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.
     *
     * @param com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public void setLatestExerciseTime(BusinessCenterTime latestExerciseTime) {
	    this.latestExerciseTime = latestExerciseTime;
	}
	/**
     * public getter
     *
     * The latest time for exercise on expirationDate.
     *
     * @returns com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public BusinessCenterTime getExpirationTime() {
	    return this.expirationTime;
	}
	
	/**
	 * public setter
	 *
     * The latest time for exercise on expirationDate.
     *
     * @param com.leansoft.fpml.nano.BusinessCenterTime
	 */
	public void setExpirationTime(BusinessCenterTime expirationTime) {
	    this.expirationTime = expirationTime;
	}
	/**
     * public getter
     *
     * As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an intergral multiple of, the integral multiple amount.
     *
     * @returns com.leansoft.fpml.nano.MultipleExercise
	 */
	public MultipleExercise getMultipleExercise() {
	    return this.multipleExercise;
	}
	
	/**
	 * public setter
	 *
     * As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an intergral multiple of, the integral multiple amount.
     *
     * @param com.leansoft.fpml.nano.MultipleExercise
	 */
	public void setMultipleExercise(MultipleExercise multipleExercise) {
	    this.multipleExercise = multipleExercise;
	}
	/**
     * public getter
     *
     * The fees associated with an exercise date. The fees are conditional on the exercise occuring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.
     *
     * @returns com.leansoft.fpml.nano.ExerciseFeeSchedule
	 */
	public ExerciseFeeSchedule getExerciseFeeSchedule() {
	    return this.exerciseFeeSchedule;
	}
	
	/**
	 * public setter
	 *
     * The fees associated with an exercise date. The fees are conditional on the exercise occuring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.
     *
     * @param com.leansoft.fpml.nano.ExerciseFeeSchedule
	 */
	public void setExerciseFeeSchedule(ExerciseFeeSchedule exerciseFeeSchedule) {
	    this.exerciseFeeSchedule = exerciseFeeSchedule;
	}

}