// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

public class Restructuring implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private RestructuringType restructuringType;
	
	@Element
	private Empty multipleHolderObligation;
	
	@Element
	private Empty multipleCreditEventNotices;
	
    
	/**
     * public getter
     *
     * Specifies the type of restructuring that is applicable.
     *
     * @returns com.leansoft.fpml.nano.RestructuringType
	 */
	public RestructuringType getRestructuringType() {
	    return this.restructuringType;
	}
	
	/**
	 * public setter
	 *
     * Specifies the type of restructuring that is applicable.
     *
     * @param com.leansoft.fpml.nano.RestructuringType
	 */
	public void setRestructuringType(RestructuringType restructuringType) {
	    this.restructuringType = restructuringType;
	}
	/**
     * public getter
     *
     * In relation to a restructuring credit event, unless multiple holder obligation is not specified restructurings are limited to multiple holder obligations. A multiple holder obligation means an obligation that is held by more than three holders that are not affiliates of each other and where at least two thirds of the holders must agree to the event that constitutes the restructuring credit event. ISDA 2003 Term: Multiple Holder Obligation
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getMultipleHolderObligation() {
	    return this.multipleHolderObligation;
	}
	
	/**
	 * public setter
	 *
     * In relation to a restructuring credit event, unless multiple holder obligation is not specified restructurings are limited to multiple holder obligations. A multiple holder obligation means an obligation that is held by more than three holders that are not affiliates of each other and where at least two thirds of the holders must agree to the event that constitutes the restructuring credit event. ISDA 2003 Term: Multiple Holder Obligation
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setMultipleHolderObligation(Empty multipleHolderObligation) {
	    this.multipleHolderObligation = multipleHolderObligation;
	}
	/**
     * public getter
     *
     * Presence of this element indicates that Section 3.9 of the 2003 Credit Derivatives Definitions shall apply. Absence of this element indicates that Section 3.9 shall not apply. NOTE: Not allowed under ISDA Credit 1999.
     *
     * @returns com.leansoft.fpml.nano.Empty
	 */
	public Empty getMultipleCreditEventNotices() {
	    return this.multipleCreditEventNotices;
	}
	
	/**
	 * public setter
	 *
     * Presence of this element indicates that Section 3.9 of the 2003 Credit Derivatives Definitions shall apply. Absence of this element indicates that Section 3.9 shall not apply. NOTE: Not allowed under ISDA Credit 1999.
     *
     * @param com.leansoft.fpml.nano.Empty
	 */
	public void setMultipleCreditEventNotices(Empty multipleCreditEventNotices) {
	    this.multipleCreditEventNotices = multipleCreditEventNotices;
	}

}