// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * Definition of a Financial Contract.
 */
@RootElement(name = "newContract", namespace = "http://www.fpml.org/FpML-5-0/reporting")
public class Contract implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private ContractHeader header;
	
	@Element
	private List<Payment> otherPartyPayment;
	
	@Element
	private CalculationAgent calculationAgent;
	
	@Element
	private BusinessCenter calculationAgentBusinessCenter;
	
	@Element
	private Collateral collateral;
	
	@Element
	private Documentation documentation;
	
	@Element
	private GoverningLaw governingLaw;
	
    
	/**
     * public getter
     *
     * Contract header containing identification and other information which is independent of the type of financial product which is the subject of this contract.
     *
     * @returns com.leansoft.fpml.nano.ContractHeader
	 */
	public ContractHeader getHeader() {
	    return this.header;
	}
	
	/**
	 * public setter
	 *
     * Contract header containing identification and other information which is independent of the type of financial product which is the subject of this contract.
     *
     * @param com.leansoft.fpml.nano.ContractHeader
	 */
	public void setHeader(ContractHeader header) {
	    this.header = header;
	}
	/**
     * public getter
     *
     * Other fees or additional payments associated with the contract, e.g. broker commissions, where one or more of the parties involved are not principal parties involved in the contract
     *
     * @returns java.util.List<com.leansoft.fpml.nano.Payment>
	 */
	public List<Payment> getOtherPartyPayment() {
	    return this.otherPartyPayment;
	}
	
	/**
	 * public setter
	 *
     * Other fees or additional payments associated with the contract, e.g. broker commissions, where one or more of the parties involved are not principal parties involved in the contract
     *
     * @param java.util.List<com.leansoft.fpml.nano.Payment>
	 */
	public void setOtherPartyPayment(List<Payment> otherPartyPayment) {
	    this.otherPartyPayment = otherPartyPayment;
	}
	/**
     * public getter
     *
     * The ISDA Calculation Agent responsible for performing duties associated with an optional early termination
     *
     * @returns com.leansoft.fpml.nano.CalculationAgent
	 */
	public CalculationAgent getCalculationAgent() {
	    return this.calculationAgent;
	}
	
	/**
	 * public setter
	 *
     * The ISDA Calculation Agent responsible for performing duties associated with an optional early termination
     *
     * @param com.leansoft.fpml.nano.CalculationAgent
	 */
	public void setCalculationAgent(CalculationAgent calculationAgent) {
	    this.calculationAgent = calculationAgent;
	}
	/**
     * public getter
     *
     * The city in which the office through which ISDA Calculation Agent is acting for purposes of the transaction is located The short-form confirm for a trade that is executed under a Sovereign or Asia Pacific Master Confirmation Agreement ( MCA ), does not need to specify the Calculation Agent. However, the confirm does need to specify the Calculation Agent City. This is due to the fact that the MCA sets the value for Calculation Agent but does not set the value for Calculation Agent City.
     *
     * @returns com.leansoft.fpml.nano.BusinessCenter
	 */
	public BusinessCenter getCalculationAgentBusinessCenter() {
	    return this.calculationAgentBusinessCenter;
	}
	
	/**
	 * public setter
	 *
     * The city in which the office through which ISDA Calculation Agent is acting for purposes of the transaction is located The short-form confirm for a trade that is executed under a Sovereign or Asia Pacific Master Confirmation Agreement ( MCA ), does not need to specify the Calculation Agent. However, the confirm does need to specify the Calculation Agent City. This is due to the fact that the MCA sets the value for Calculation Agent but does not set the value for Calculation Agent City.
     *
     * @param com.leansoft.fpml.nano.BusinessCenter
	 */
	public void setCalculationAgentBusinessCenter(BusinessCenter calculationAgentBusinessCenter) {
	    this.calculationAgentBusinessCenter = calculationAgentBusinessCenter;
	}
	/**
     * public getter
     *
     * Defines collateral obiligations of a Party
     *
     * @returns com.leansoft.fpml.nano.Collateral
	 */
	public Collateral getCollateral() {
	    return this.collateral;
	}
	
	/**
	 * public setter
	 *
     * Defines collateral obiligations of a Party
     *
     * @param com.leansoft.fpml.nano.Collateral
	 */
	public void setCollateral(Collateral collateral) {
	    this.collateral = collateral;
	}
	/**
     * public getter
     *
     * Defines the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed
     *
     * @returns com.leansoft.fpml.nano.Documentation
	 */
	public Documentation getDocumentation() {
	    return this.documentation;
	}
	
	/**
	 * public setter
	 *
     * Defines the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed
     *
     * @param com.leansoft.fpml.nano.Documentation
	 */
	public void setDocumentation(Documentation documentation) {
	    this.documentation = documentation;
	}
	/**
     * public getter
     *
     * Governing Law applicable to this Contract
     *
     * @returns com.leansoft.fpml.nano.GoverningLaw
	 */
	public GoverningLaw getGoverningLaw() {
	    return this.governingLaw;
	}
	
	/**
	 * public setter
	 *
     * Governing Law applicable to this Contract
     *
     * @param com.leansoft.fpml.nano.GoverningLaw
	 */
	public void setGoverningLaw(GoverningLaw governingLaw) {
	    this.governingLaw = governingLaw;
	}

}