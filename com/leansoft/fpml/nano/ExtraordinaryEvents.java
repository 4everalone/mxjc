// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * Where the underlying is shares, defines market events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.
 */
public class ExtraordinaryEvents implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private EquityCorporateEvents mergerEvents;
	
	@Element
	private Boolean tenderOffer;
	
	@Element
	private EquityCorporateEvents tenderOfferEvents;
	
	@Element
	private Boolean compositionOfCombinedConsideration;
	
	@Element
	private IndexAdjustmentEvents indexAdjustmentEvents;
	
	@Element
	private AdditionalDisruptionEvents additionalDisruptionEvents;
	
	@Element
	private Boolean failureToDeliver;
	
	@Element
	private Representations representations;
	
	@Element
	private NationalisationOrInsolvencyOrDelistingEventEnum nationalisationOrInsolvency;
	
	@Element
	private NationalisationOrInsolvencyOrDelistingEventEnum delisting;
	
    
	/**
     * public getter
     *
     * Occurs when the underlying ceases to exist following a merger between the Issuer and another company.
     *
     * @returns com.leansoft.fpml.nano.EquityCorporateEvents
	 */
	public EquityCorporateEvents getMergerEvents() {
	    return this.mergerEvents;
	}
	
	/**
	 * public setter
	 *
     * Occurs when the underlying ceases to exist following a merger between the Issuer and another company.
     *
     * @param com.leansoft.fpml.nano.EquityCorporateEvents
	 */
	public void setMergerEvents(EquityCorporateEvents mergerEvents) {
	    this.mergerEvents = mergerEvents;
	}
	/**
     * public getter
     *
     * If present and true, then tender offer is applicable.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getTenderOffer() {
	    return this.tenderOffer;
	}
	
	/**
	 * public setter
	 *
     * If present and true, then tender offer is applicable.
     *
     * @param java.lang.Boolean
	 */
	public void setTenderOffer(Boolean tenderOffer) {
	    this.tenderOffer = tenderOffer;
	}
	/**
     * public getter
     *
     * ISDA 2002 Equity Tender Offer Events.
     *
     * @returns com.leansoft.fpml.nano.EquityCorporateEvents
	 */
	public EquityCorporateEvents getTenderOfferEvents() {
	    return this.tenderOfferEvents;
	}
	
	/**
	 * public setter
	 *
     * ISDA 2002 Equity Tender Offer Events.
     *
     * @param com.leansoft.fpml.nano.EquityCorporateEvents
	 */
	public void setTenderOfferEvents(EquityCorporateEvents tenderOfferEvents) {
	    this.tenderOfferEvents = tenderOfferEvents;
	}
	/**
     * public getter
     *
     * If present and true, then composition of combined consideration is applicable.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getCompositionOfCombinedConsideration() {
	    return this.compositionOfCombinedConsideration;
	}
	
	/**
	 * public setter
	 *
     * If present and true, then composition of combined consideration is applicable.
     *
     * @param java.lang.Boolean
	 */
	public void setCompositionOfCombinedConsideration(Boolean compositionOfCombinedConsideration) {
	    this.compositionOfCombinedConsideration = compositionOfCombinedConsideration;
	}
	/**
     * public getter
     *
     * ISDA 2002 Equity Index Adjustment Events.
     *
     * @returns com.leansoft.fpml.nano.IndexAdjustmentEvents
	 */
	public IndexAdjustmentEvents getIndexAdjustmentEvents() {
	    return this.indexAdjustmentEvents;
	}
	
	/**
	 * public setter
	 *
     * ISDA 2002 Equity Index Adjustment Events.
     *
     * @param com.leansoft.fpml.nano.IndexAdjustmentEvents
	 */
	public void setIndexAdjustmentEvents(IndexAdjustmentEvents indexAdjustmentEvents) {
	    this.indexAdjustmentEvents = indexAdjustmentEvents;
	}
	/**
     * public getter
     *
     * ISDA 2002 Equity Additional Disruption Events.
     *
     * @returns com.leansoft.fpml.nano.AdditionalDisruptionEvents
	 */
	public AdditionalDisruptionEvents getAdditionalDisruptionEvents() {
	    return this.additionalDisruptionEvents;
	}
	
	/**
	 * public setter
	 *
     * ISDA 2002 Equity Additional Disruption Events.
     *
     * @param com.leansoft.fpml.nano.AdditionalDisruptionEvents
	 */
	public void setAdditionalDisruptionEvents(AdditionalDisruptionEvents additionalDisruptionEvents) {
	    this.additionalDisruptionEvents = additionalDisruptionEvents;
	}
	/**
     * public getter
     *
     * If true, failure to deliver is applicable.
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getFailureToDeliver() {
	    return this.failureToDeliver;
	}
	
	/**
	 * public setter
	 *
     * If true, failure to deliver is applicable.
     *
     * @param java.lang.Boolean
	 */
	public void setFailureToDeliver(Boolean failureToDeliver) {
	    this.failureToDeliver = failureToDeliver;
	}
	/**
     * public getter
     *
     * ISDA 2002 Equity Derivative Representations.
     *
     * @returns com.leansoft.fpml.nano.Representations
	 */
	public Representations getRepresentations() {
	    return this.representations;
	}
	
	/**
	 * public setter
	 *
     * ISDA 2002 Equity Derivative Representations.
     *
     * @param com.leansoft.fpml.nano.Representations
	 */
	public void setRepresentations(Representations representations) {
	    this.representations = representations;
	}
	/**
     * public getter
     *
     * The terms "Nationalisation" and "Insolvency" have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.
     *
     * @returns com.leansoft.fpml.nano.NationalisationOrInsolvencyOrDelistingEventEnum
	 */
	public NationalisationOrInsolvencyOrDelistingEventEnum getNationalisationOrInsolvency() {
	    return this.nationalisationOrInsolvency;
	}
	
	/**
	 * public setter
	 *
     * The terms "Nationalisation" and "Insolvency" have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.
     *
     * @param com.leansoft.fpml.nano.NationalisationOrInsolvencyOrDelistingEventEnum
	 */
	public void setNationalisationOrInsolvency(NationalisationOrInsolvencyOrDelistingEventEnum nationalisationOrInsolvency) {
	    this.nationalisationOrInsolvency = nationalisationOrInsolvency;
	}
	/**
     * public getter
     *
     * The term "Delisting" has the meaning defined in the ISDA 2002 Equity Derivatives Definitions.
     *
     * @returns com.leansoft.fpml.nano.NationalisationOrInsolvencyOrDelistingEventEnum
	 */
	public NationalisationOrInsolvencyOrDelistingEventEnum getDelisting() {
	    return this.delisting;
	}
	
	/**
	 * public setter
	 *
     * The term "Delisting" has the meaning defined in the ISDA 2002 Equity Derivatives Definitions.
     *
     * @param com.leansoft.fpml.nano.NationalisationOrInsolvencyOrDelistingEventEnum
	 */
	public void setDelisting(NationalisationOrInsolvencyOrDelistingEventEnum delisting) {
	    this.delisting = delisting;
	}

}