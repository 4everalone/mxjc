// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * A type for defining option features.
 */
public class OptionFeature implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private FxFeature fxFeature;
	
	@Element
	private StrategyFeature strategyFeature;
	
	@Element
	private Asian asian;
	
	@Element
	private Barrier barrier;
	
	@Element
	private Knock knock;
	
	@Element
	private PassThrough passThrough;
	
    
	/**
     * public getter
     *
     * A quanto or composite FX feature.
     *
     * @returns com.leansoft.fpml.nano.FxFeature
	 */
	public FxFeature getFxFeature() {
	    return this.fxFeature;
	}
	
	/**
	 * public setter
	 *
     * A quanto or composite FX feature.
     *
     * @param com.leansoft.fpml.nano.FxFeature
	 */
	public void setFxFeature(FxFeature fxFeature) {
	    this.fxFeature = fxFeature;
	}
	/**
     * public getter
     *
     * A simple strategy feature
     *
     * @returns com.leansoft.fpml.nano.StrategyFeature
	 */
	public StrategyFeature getStrategyFeature() {
	    return this.strategyFeature;
	}
	
	/**
	 * public setter
	 *
     * A simple strategy feature
     *
     * @param com.leansoft.fpml.nano.StrategyFeature
	 */
	public void setStrategyFeature(StrategyFeature strategyFeature) {
	    this.strategyFeature = strategyFeature;
	}
	/**
     * public getter
     *
     * An option where and average price is taken on valuation.
     *
     * @returns com.leansoft.fpml.nano.Asian
	 */
	public Asian getAsian() {
	    return this.asian;
	}
	
	/**
	 * public setter
	 *
     * An option where and average price is taken on valuation.
     *
     * @param com.leansoft.fpml.nano.Asian
	 */
	public void setAsian(Asian asian) {
	    this.asian = asian;
	}
	/**
     * public getter
     *
     * An option with a barrier feature.
     *
     * @returns com.leansoft.fpml.nano.Barrier
	 */
	public Barrier getBarrier() {
	    return this.barrier;
	}
	
	/**
	 * public setter
	 *
     * An option with a barrier feature.
     *
     * @param com.leansoft.fpml.nano.Barrier
	 */
	public void setBarrier(Barrier barrier) {
	    this.barrier = barrier;
	}
	/**
     * public getter
     *
     * A knock feature.
     *
     * @returns com.leansoft.fpml.nano.Knock
	 */
	public Knock getKnock() {
	    return this.knock;
	}
	
	/**
	 * public setter
	 *
     * A knock feature.
     *
     * @param com.leansoft.fpml.nano.Knock
	 */
	public void setKnock(Knock knock) {
	    this.knock = knock;
	}
	/**
     * public getter
     *
     * Pass through payments from the underlyer, such as dividends.
     *
     * @returns com.leansoft.fpml.nano.PassThrough
	 */
	public PassThrough getPassThrough() {
	    return this.passThrough;
	}
	
	/**
	 * public setter
	 *
     * Pass through payments from the underlyer, such as dividends.
     *
     * @param com.leansoft.fpml.nano.PassThrough
	 */
	public void setPassThrough(PassThrough passThrough) {
	    this.passThrough = passThrough;
	}

}