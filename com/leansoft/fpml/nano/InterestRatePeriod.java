// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.leansoft.fpml.nano;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.math.BigDecimal;
import java.util.Date;

/**
 * Interest rate information per rate period
 */
public class InterestRatePeriod implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private Date rateFixingDate;
	
	@Element
	private Date startDate;
	
	@Element
	private Date endDate;
	
	@Element
	private FloatingRateIndex floatingRateIndex;
	
	@Element
	private Interval indexTenor;
	
	@Element
	private BigDecimal interestRate;
	
	@Element
	private BigDecimal margin;
	
	@Element
	private Money mlaCost;
	
	@Element
	private BigDecimal allInRate;
	
	@Element
	private DayCountFraction interestDayBasis;
	
	@Element
	private Interval tenor;
	
    
	/**
     * public getter
     *
     * Date on which the underlying interest rate is fixed. Should default to effective date of the loan contract in the case of PRIME underlying.
     *
     * @returns java.util.Date
	 */
	public Date getRateFixingDate() {
	    return this.rateFixingDate;
	}
	
	/**
	 * public setter
	 *
     * Date on which the underlying interest rate is fixed. Should default to effective date of the loan contract in the case of PRIME underlying.
     *
     * @param java.util.Date
	 */
	public void setRateFixingDate(Date rateFixingDate) {
	    this.rateFixingDate = rateFixingDate;
	}
	/**
     * public getter
     *
     * Date on which this period begins.
     *
     * @returns java.util.Date
	 */
	public Date getStartDate() {
	    return this.startDate;
	}
	
	/**
	 * public setter
	 *
     * Date on which this period begins.
     *
     * @param java.util.Date
	 */
	public void setStartDate(Date startDate) {
	    this.startDate = startDate;
	}
	/**
     * public getter
     *
     * Date on which this period ends.
     *
     * @returns java.util.Date
	 */
	public Date getEndDate() {
	    return this.endDate;
	}
	
	/**
	 * public setter
	 *
     * Date on which this period ends.
     *
     * @param java.util.Date
	 */
	public void setEndDate(Date endDate) {
	    this.endDate = endDate;
	}
	/**
	 * public getter
	 *
     * @returns com.leansoft.fpml.nano.FloatingRateIndex
	 */
	public FloatingRateIndex getFloatingRateIndex() {
	    return this.floatingRateIndex;
	}
	
	/**
	 * public setter
	 *
     * @param com.leansoft.fpml.nano.FloatingRateIndex
	 */
	public void setFloatingRateIndex(FloatingRateIndex floatingRateIndex) {
	    this.floatingRateIndex = floatingRateIndex;
	}
	/**
     * public getter
     *
     * The ISDA Designated Maturity, i.e. the tenor of the floating rate.
     *
     * @returns com.leansoft.fpml.nano.Interval
	 */
	public Interval getIndexTenor() {
	    return this.indexTenor;
	}
	
	/**
	 * public setter
	 *
     * The ISDA Designated Maturity, i.e. the tenor of the floating rate.
     *
     * @param com.leansoft.fpml.nano.Interval
	 */
	public void setIndexTenor(Interval indexTenor) {
	    this.indexTenor = indexTenor;
	}
	/**
	 * public getter
	 *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getInterestRate() {
	    return this.interestRate;
	}
	
	/**
	 * public setter
	 *
     * @param java.math.BigDecimal
	 */
	public void setInterestRate(BigDecimal interestRate) {
	    this.interestRate = interestRate;
	}
	/**
	 * public getter
	 *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getMargin() {
	    return this.margin;
	}
	
	/**
	 * public setter
	 *
     * @param java.math.BigDecimal
	 */
	public void setMargin(BigDecimal margin) {
	    this.margin = margin;
	}
	/**
     * public getter
     *
     * Mandatory Liquid Asset Cost, charged by the FSA, applicable for UK funded loan contracts only.
     *
     * @returns com.leansoft.fpml.nano.Money
	 */
	public Money getMlaCost() {
	    return this.mlaCost;
	}
	
	/**
	 * public setter
	 *
     * Mandatory Liquid Asset Cost, charged by the FSA, applicable for UK funded loan contracts only.
     *
     * @param com.leansoft.fpml.nano.Money
	 */
	public void setMlaCost(Money mlaCost) {
	    this.mlaCost = mlaCost;
	}
	/**
     * public getter
     *
     * (Interest Rate + Margin + Mandatory Liquid Asset Cost) = All In Rate.
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getAllInRate() {
	    return this.allInRate;
	}
	
	/**
	 * public setter
	 *
     * (Interest Rate + Margin + Mandatory Liquid Asset Cost) = All In Rate.
     *
     * @param java.math.BigDecimal
	 */
	public void setAllInRate(BigDecimal allInRate) {
	    this.allInRate = allInRate;
	}
	/**
     * public getter
     *
     * The day count basis for the interest period.
     *
     * @returns com.leansoft.fpml.nano.DayCountFraction
	 */
	public DayCountFraction getInterestDayBasis() {
	    return this.interestDayBasis;
	}
	
	/**
	 * public setter
	 *
     * The day count basis for the interest period.
     *
     * @param com.leansoft.fpml.nano.DayCountFraction
	 */
	public void setInterestDayBasis(DayCountFraction interestDayBasis) {
	    this.interestDayBasis = interestDayBasis;
	}
	/**
     * public getter
     *
     * The number of business days in the interest rate period
     *
     * @returns com.leansoft.fpml.nano.Interval
	 */
	public Interval getTenor() {
	    return this.tenor;
	}
	
	/**
	 * public setter
	 *
     * The number of business days in the interest rate period
     *
     * @param com.leansoft.fpml.nano.Interval
	 */
	public void setTenor(Interval tenor) {
	    this.tenor = tenor;
	}

}